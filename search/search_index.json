{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Algorithm Record \u00b6 \u6076\u8865\u4e00\u4e0b\u7b97\u6cd5\uff0c\u6709Leetcode\u3001AcWing\u7684\u7b97\u6cd5\u9898\u76ee\uff0c\u76ee\u524d\u662f\u4e00\u5237\u7684\u9636\u6bb5\uff0c\u540e\u9762\u4e8c\u5237\u4f1a\u628a\u9898\u76ee\u8fdb\u884c\u91cd\u65b0\u5206\u7c7b\uff0c\u5c06\u76f8\u4f3c\u7684\u3001\u5178\u578b\u7684\u9898\u76ee\u518d\u8fdb\u884c\u6574\u7406\uff0c\u5e0c\u671b\u6765\u5e74\u79cb\u62db\u80fd\u627e\u5230\u4e00\u4e2a\u4e0d\u9519\u7684\u5b9e\u4e60\u5de5\u4f5c\u3002 \u5c0f\u76ee\u6807\u5427\u2014\u2014200\u9898\uff0c\u505a\u4e00\u9898\u5f04\u61c2\u4e00\u9898\uff0c\u575a\u6301\u5199\u9898\u89e3\uff0c\u4e0d\u6c42\u901f\u5ea6 \u9898\u578b\u5206\u7c7b\uff0c\u5199\u9898\u89e3\u548c\u81ea\u5df1\u7684\u60f3\u6cd5","title":"Home"},{"location":"#algorithm-record","text":"\u6076\u8865\u4e00\u4e0b\u7b97\u6cd5\uff0c\u6709Leetcode\u3001AcWing\u7684\u7b97\u6cd5\u9898\u76ee\uff0c\u76ee\u524d\u662f\u4e00\u5237\u7684\u9636\u6bb5\uff0c\u540e\u9762\u4e8c\u5237\u4f1a\u628a\u9898\u76ee\u8fdb\u884c\u91cd\u65b0\u5206\u7c7b\uff0c\u5c06\u76f8\u4f3c\u7684\u3001\u5178\u578b\u7684\u9898\u76ee\u518d\u8fdb\u884c\u6574\u7406\uff0c\u5e0c\u671b\u6765\u5e74\u79cb\u62db\u80fd\u627e\u5230\u4e00\u4e2a\u4e0d\u9519\u7684\u5b9e\u4e60\u5de5\u4f5c\u3002 \u5c0f\u76ee\u6807\u5427\u2014\u2014200\u9898\uff0c\u505a\u4e00\u9898\u5f04\u61c2\u4e00\u9898\uff0c\u575a\u6301\u5199\u9898\u89e3\uff0c\u4e0d\u6c42\u901f\u5ea6 \u9898\u578b\u5206\u7c7b\uff0c\u5199\u9898\u89e3\u548c\u81ea\u5df1\u7684\u60f3\u6cd5","title":"Algorithm Record"},{"location":"404/","text":"\u540e\u9762\u66f4\u65b0......","title":"Writing your docs"},{"location":"about/","text":"\u8fd9\u662f\u4e00\u4e2a\u7b97\u6cd5\u7684\u603b\u7ed3\u7ad9\u70b9\u2014\u2014\u7528\u4e8e\u5b66\u4e60\u3001\u627e\u5de5\u4f5c \u00b6 \u5982\u679c\u4e00\u76f4\u6015\u505a\uff0c\u90a3\u5c31\u4e00\u76f4\u9762\u4e34\u4e0d\u4f1a\u505a........... \u8fd9\u662f\u4e00\u4e2a\u7b14\u8bb0\u7684\u6807\u6ce8 \u8fd9\u662fattention\u7684\u6807\u6ce8\u65b9\u5f0f Caution Danger Error Hint Important Warning","title":"About"},{"location":"about/#_1","text":"\u5982\u679c\u4e00\u76f4\u6015\u505a\uff0c\u90a3\u5c31\u4e00\u76f4\u9762\u4e34\u4e0d\u4f1a\u505a........... \u8fd9\u662f\u4e00\u4e2a\u7b14\u8bb0\u7684\u6807\u6ce8 \u8fd9\u662fattention\u7684\u6807\u6ce8\u65b9\u5f0f Caution Danger Error Hint Important Warning","title":"\u8fd9\u662f\u4e00\u4e2a\u7b97\u6cd5\u7684\u603b\u7ed3\u7ad9\u70b9\u2014\u2014\u7528\u4e8e\u5b66\u4e60\u3001\u627e\u5de5\u4f5c"},{"location":"hash%E8%A1%A8/leetcode01-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target \uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u548c\u4e3a\u76ee\u6807\u503c\u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u4e0d\u80fd\u4f7f\u7528\u4e24\u904d\u3002 \u793a\u4f8b: \u7ed9\u5b9a nums = [2, 7, 11, 15], target = 9 \u56e0\u4e3a nums[0] + nums[1] = 2 + 7 = 9 \u6240\u4ee5\u8fd4\u56de [0, 1] \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/two-sum/ \u601d\u8def\u4e00 \u00b6 \u7b2c\u4e00\u79cd\uff1a \u66b4\u529b\u89e3\u6cd5 \uff0c\u5229\u7528 \u53cc\u6307\u9488 \uff0c\u76f4\u63a5\u5faa\u73af\u4e24\u6b21\u904d\u5386\u6570\u7ec4 \u4ee3\u7801\u4e00 \u00b6 class Solution { public : vector < int > twoSum ( vector < int >& nums , int target ) { int i , j ; for ( i = 0 ; i < nums . size () -1 ; i ++ ) { for ( j = i + 1 ; j < nums . size (); j ++ ) { if ( nums [ i ] + nums [ j ] == target ) { return { i , j }; } } } return { i , j }; } }; \u601d\u8def\u4e8c \u00b6 \u7b2c\u4e8c\u79cd\uff1a hash\u8868 \uff0c\u5c06 \u6570\u7ec4\u4e2d\u7684\u503c \u4f5c\u4e3ahash\u8868\u7684 key \uff0c\u5c06\u8fd9\u4e2a\u503c\u7684\u4e0b\u6807\u4f5c\u4e3ahash\u8868\u7684 value \u3002\u904d\u5386\u6570\u7ec4\uff0c\u6bd4\u5982\u5f53\u524d\u904d\u5386\u7684\u5143\u7d20\u4e3a a \uff0c\u7136\u540e\u5728hash\u8868\u4e2d\u5bfb\u627e\u662f\u5426\u6709\u7b26\u5408 target-a \u7684 key1 \uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u5c06\u5f53\u524d\u904d\u5386\u7684\u5143\u7d20 a \u53ca \u5176\u4e0b\u6807 \u63d2\u5165hash\u8868\u4e2d\uff0c\u5982\u679c\u6709\uff0c\u5c31**\u8fd4\u56dekey1\u5bf9\u5e94\u7684\u503c(\u4e5f\u5c31\u662f key1\u7684\u4e0b\u6807 )\u548c\u5f53\u524d\u904d\u5386\u7684\u5143\u7d20\u7684\u4e0b\u6807** \u4ee3\u7801\u4e8c \u00b6 class Solution { public : vector < int > twoSum ( vector < int >& nums , int target ) { unordered_map < int , int > nums_map ; int i ; for ( i = 0 ; i < nums . size (); i ++ ){ if ( nums_map . count ( target - nums [ i ]) != 0 ) return { nums_map [ target - nums [ i ]], i }; else nums_map . insert ( pair < int , int > ( nums [ i ], i )); } return { nums_map [ i ], i }; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u7b2c\u4e00\u79cd\u66b4\u529b\u89e3\u6cd5\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1) \u7b2c\u4e8c\u79cdhash\u8868\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)","title":"leetcode01-\u4e24\u6570\u4e4b\u548c"},{"location":"hash%E8%A1%A8/leetcode01-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target \uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u548c\u4e3a\u76ee\u6807\u503c\u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u4e0d\u80fd\u4f7f\u7528\u4e24\u904d\u3002 \u793a\u4f8b: \u7ed9\u5b9a nums = [2, 7, 11, 15], target = 9 \u56e0\u4e3a nums[0] + nums[1] = 2 + 7 = 9 \u6240\u4ee5\u8fd4\u56de [0, 1]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"hash%E8%A1%A8/leetcode01-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#_2","text":"https://leetcode-cn.com/problems/two-sum/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"hash%E8%A1%A8/leetcode01-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#_3","text":"\u7b2c\u4e00\u79cd\uff1a \u66b4\u529b\u89e3\u6cd5 \uff0c\u5229\u7528 \u53cc\u6307\u9488 \uff0c\u76f4\u63a5\u5faa\u73af\u4e24\u6b21\u904d\u5386\u6570\u7ec4","title":"\u601d\u8def\u4e00"},{"location":"hash%E8%A1%A8/leetcode01-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#_4","text":"class Solution { public : vector < int > twoSum ( vector < int >& nums , int target ) { int i , j ; for ( i = 0 ; i < nums . size () -1 ; i ++ ) { for ( j = i + 1 ; j < nums . size (); j ++ ) { if ( nums [ i ] + nums [ j ] == target ) { return { i , j }; } } } return { i , j }; } };","title":"\u4ee3\u7801\u4e00"},{"location":"hash%E8%A1%A8/leetcode01-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#_5","text":"\u7b2c\u4e8c\u79cd\uff1a hash\u8868 \uff0c\u5c06 \u6570\u7ec4\u4e2d\u7684\u503c \u4f5c\u4e3ahash\u8868\u7684 key \uff0c\u5c06\u8fd9\u4e2a\u503c\u7684\u4e0b\u6807\u4f5c\u4e3ahash\u8868\u7684 value \u3002\u904d\u5386\u6570\u7ec4\uff0c\u6bd4\u5982\u5f53\u524d\u904d\u5386\u7684\u5143\u7d20\u4e3a a \uff0c\u7136\u540e\u5728hash\u8868\u4e2d\u5bfb\u627e\u662f\u5426\u6709\u7b26\u5408 target-a \u7684 key1 \uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u5c06\u5f53\u524d\u904d\u5386\u7684\u5143\u7d20 a \u53ca \u5176\u4e0b\u6807 \u63d2\u5165hash\u8868\u4e2d\uff0c\u5982\u679c\u6709\uff0c\u5c31**\u8fd4\u56dekey1\u5bf9\u5e94\u7684\u503c(\u4e5f\u5c31\u662f key1\u7684\u4e0b\u6807 )\u548c\u5f53\u524d\u904d\u5386\u7684\u5143\u7d20\u7684\u4e0b\u6807**","title":"\u601d\u8def\u4e8c"},{"location":"hash%E8%A1%A8/leetcode01-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#_6","text":"class Solution { public : vector < int > twoSum ( vector < int >& nums , int target ) { unordered_map < int , int > nums_map ; int i ; for ( i = 0 ; i < nums . size (); i ++ ){ if ( nums_map . count ( target - nums [ i ]) != 0 ) return { nums_map [ target - nums [ i ]], i }; else nums_map . insert ( pair < int , int > ( nums [ i ], i )); } return { nums_map [ i ], i }; } };","title":"\u4ee3\u7801\u4e8c"},{"location":"hash%E8%A1%A8/leetcode01-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#_7","text":"\u7b2c\u4e00\u79cd\u66b4\u529b\u89e3\u6cd5\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1) \u7b2c\u4e8c\u79cdhash\u8868\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"hash%E8%A1%A8/leetcode03-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002 \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/ \u601d\u8def \u00b6 hash\u8868 + \u53cc\u6307\u9488 hash\u8868 \u7528\u6765\u5b58\u653e\u5b57\u7b26\u4e32 s\u4e2d\u7684\u5b57\u7b26 \uff1b\u8bbe\u7f6e\u4e24\u4e2a\u6307\u9488 i \u548c j \uff0ci \u7528\u6765\u904d\u5386\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\uff0cj \u4e00\u5f00\u59cb\u518d\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c i\u6bcf\u904d\u5386\u4e00\u4e2a\u5b57\u7b26\uff0c\u5c31\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4f5c\u4e3a\u952e\u5b58\u5165hash\u8868\uff0c\u503c\u4e3a\u8fd9\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u540c\u65f6 \u8bb0\u5f55i\u548cj\u4e4b\u95f4\u7684\u8ddd\u79bb(\u5373\u8fde\u7eed\u4e0d\u91cd\u590d\u5b57\u7b26\u7684\u5b57\u4e32\u7684\u957f\u5ea6) \u5982\u679c\u904d\u5386\u7684\u65f6\u5019\uff0c\u67d0\u4e2a\u5b57\u7b26\u5728hash\u8868\u4e2d\u7684\u503c\u5927\u4e8e1\uff0c\u5c31\u8bf4\u660e\u8fd9\u4e2a\u5b57\u7b26\u91cd\u590d\u51fa\u73b0\u4e86\uff0c\u6b64\u65f6\u5c31\u51fa\u73b0\u4e86\u91cd\u590d\u5b57\u7b26\u7684\u5b57\u4e32\uff0ci \u505c\u6b62\u5411\u540e\u904d\u5386,\u7136\u540e\u5c06j\u6307\u5411\u7684\u5b57\u7b26\u5728hash \u8868\u4e2d\u7684\u503c --\uff0c\u540c\u65f6\u5c06 j \u5411\u540e\u79fb\u52a8\uff0c\u76f4\u5230\u5f53\u524d i \u6307\u5411\u7684\u5b57\u7b26\u5728hash\u8868\u4e2d\u7684\u503c\u4e0d\u5927\u4e8e1\u4e3a\u6b62\uff0c\u7136\u540ei\u518d\u7ee7\u7eed\u5411\u540e\u79fb\u52a8\u904d\u5386 \u6700\u7ec8\u8fd4\u56de\u6700\u5927\u7684\u8fde\u7eed\u4e0d\u91cd\u590d\u5b50\u4e32\u7684\u957f\u5ea6 \u4ee3\u7801 \u00b6 class Solution { public : int lengthOfLongestSubstring ( string s ) { int res = 0 ; unordered_map < char , int > s_map ; for ( int i = 0 , j = 0 ; i < s . size (); i ++ ){ s_map [ s [ i ]] ++ ; while ( s_map [ s [ i ]] > 1 ){ s_map [ s [ j ]] -- ; j ++ ; } res = max ( res , i - j + 1 ); } return res ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N)","title":"leetcode03-\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32"},{"location":"hash%E8%A1%A8/leetcode03-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"hash%E8%A1%A8/leetcode03-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/#_2","text":"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"hash%E8%A1%A8/leetcode03-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/#_3","text":"hash\u8868 + \u53cc\u6307\u9488 hash\u8868 \u7528\u6765\u5b58\u653e\u5b57\u7b26\u4e32 s\u4e2d\u7684\u5b57\u7b26 \uff1b\u8bbe\u7f6e\u4e24\u4e2a\u6307\u9488 i \u548c j \uff0ci \u7528\u6765\u904d\u5386\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\uff0cj \u4e00\u5f00\u59cb\u518d\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c i\u6bcf\u904d\u5386\u4e00\u4e2a\u5b57\u7b26\uff0c\u5c31\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4f5c\u4e3a\u952e\u5b58\u5165hash\u8868\uff0c\u503c\u4e3a\u8fd9\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u540c\u65f6 \u8bb0\u5f55i\u548cj\u4e4b\u95f4\u7684\u8ddd\u79bb(\u5373\u8fde\u7eed\u4e0d\u91cd\u590d\u5b57\u7b26\u7684\u5b57\u4e32\u7684\u957f\u5ea6) \u5982\u679c\u904d\u5386\u7684\u65f6\u5019\uff0c\u67d0\u4e2a\u5b57\u7b26\u5728hash\u8868\u4e2d\u7684\u503c\u5927\u4e8e1\uff0c\u5c31\u8bf4\u660e\u8fd9\u4e2a\u5b57\u7b26\u91cd\u590d\u51fa\u73b0\u4e86\uff0c\u6b64\u65f6\u5c31\u51fa\u73b0\u4e86\u91cd\u590d\u5b57\u7b26\u7684\u5b57\u4e32\uff0ci \u505c\u6b62\u5411\u540e\u904d\u5386,\u7136\u540e\u5c06j\u6307\u5411\u7684\u5b57\u7b26\u5728hash \u8868\u4e2d\u7684\u503c --\uff0c\u540c\u65f6\u5c06 j \u5411\u540e\u79fb\u52a8\uff0c\u76f4\u5230\u5f53\u524d i \u6307\u5411\u7684\u5b57\u7b26\u5728hash\u8868\u4e2d\u7684\u503c\u4e0d\u5927\u4e8e1\u4e3a\u6b62\uff0c\u7136\u540ei\u518d\u7ee7\u7eed\u5411\u540e\u79fb\u52a8\u904d\u5386 \u6700\u7ec8\u8fd4\u56de\u6700\u5927\u7684\u8fde\u7eed\u4e0d\u91cd\u590d\u5b50\u4e32\u7684\u957f\u5ea6","title":"\u601d\u8def"},{"location":"hash%E8%A1%A8/leetcode03-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/#_4","text":"class Solution { public : int lengthOfLongestSubstring ( string s ) { int res = 0 ; unordered_map < char , int > s_map ; for ( int i = 0 , j = 0 ; i < s . size (); i ++ ){ s_map [ s [ i ]] ++ ; while ( s_map [ s [ i ]] > 1 ){ s_map [ s [ j ]] -- ; j ++ ; } res = max ( res , i - j + 1 ); } return res ; } };","title":"\u4ee3\u7801"},{"location":"hash%E8%A1%A8/leetcode03-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"hash%E8%A1%A8/leetcode30-%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e9b\u957f\u5ea6\u76f8\u540c\u7684\u5355\u8bcd words\u3002\u627e\u51fa s \u4e2d\u6070\u597d\u53ef\u4ee5\u7531 words \u4e2d\u6240\u6709\u5355\u8bcd\u4e32\u8054\u5f62\u6210\u7684\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u6ce8\u610f\u5b50\u4e32\u8981\u4e0e words \u4e2d\u7684\u5355\u8bcd\u5b8c\u5168\u5339\u914d\uff0c\u4e2d\u95f4\u4e0d\u80fd\u6709\u5176\u4ed6\u5b57\u7b26\uff0c\u4f46**\u4e0d\u9700\u8981\u8003\u8651 words \u4e2d\u5355\u8bcd\u4e32\u8054\u7684\u987a\u5e8f**\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"] \u8f93\u51fa\uff1a[0,9] \u89e3\u91ca\uff1a \u4ece\u7d22\u5f15 0 \u548c 9 \u5f00\u59cb\u7684\u5b50\u4e32\u5206\u522b\u662f \"barfoo\" \u548c \"foobar\" \u3002 \u8f93\u51fa\u7684\u987a\u5e8f\u4e0d\u91cd\u8981, [9,0] \u4e5f\u662f\u6709\u6548\u7b54\u6848\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"] \u8f93\u51fa\uff1a[] \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words \u601d\u8def \u00b6 hash\u8868 + \u6ed1\u52a8\u7a97\u53e3 \u9898\u76ee\u4e2d\u8bf4 \u4e0d\u8003\u8651words\u4e2d\u5355\u8bcd\u7684\u987a\u5e8f \uff0c\u5982\u679cwords\u4e2d\u6709 n\u4e2a\u5355\u8bcd \uff0c\u90a3\u4e48\u8bf4\u660e\u5176\u4e2d\u7684\u5355\u8bcd\u53ef\u4ee5\u6709 n! \u79cd\u987a\u5e8f\uff0c\u5982\u679c\u8981\u5355\u8bcd\u6570\u6bd4\u8f83\u5c11\uff0c\u6328\u4e2a\u8003\u8651\u8fd8\u884c\uff0c\u4f46\u662f\u5982\u679c\u5355\u8bcd\u6570\u76ee\u6bd4\u8f83\u591a\uff0c\u8003\u8651\u8fd9\u4e48\u591a\u987a\u5e8f\u65e0\u7591\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u6240\u4ee5\u5c31\u5f15\u5165\u4e86 hash\u8868 \u6765\u89e3\u51b3words\u4e2d\u7684\u5355\u8bcd\u662f\u5426\u4e0e\u5b50\u4e32\u4e2d\u7684\u5b57\u7b26\u5339\u914d\uff1b\u7136\u540e\u901a\u8fc7 \u6ed1\u52a8\u7a97\u53e3 \u6765\u5bf9\u5b50\u4e32\u4e2d\u7684\u6bcf\u4e2a\u7a97\u53e3\u7684\u5355\u8bcd\u8fdb\u884c\u5224\u65ad\u662f\u5426\u7b26\u5408\u3002 \u4e3awords\u6570\u7ec4\u5efa\u7acb\u4e00\u4e2ahash\u8868\uff0c\u6765\u5b58\u653ewords\u4e2d\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\uff1b\u4e3a\u5b50\u4e32s\u5efa\u7acb\u4e00\u4e2ahash\u8868\uff0c\u6765\u5b58\u653e\u4e00\u6bb5\u7a97\u53e3\u4e2d\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\uff1b\u5982\u679c\u4e24\u4e2ahash\u8868\u4e2d\u5355\u8bcd\u7684\u51fa\u73b0\u6b21\u6570\u90fd\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7a97\u53e3\u4e2d\u7684\u5355\u8bcd\u5c31\u662f\u5339\u914d\u7684\uff0c\u5c31\u8bb0\u5f55\u4e0b\u8fd9\u4e2a\u7a97\u53e3\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f = words\u6570\u7ec4\u4e2d\u7684\u5355\u8bcd\u6570\u91cf*\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6(\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u90fd\u662f\u4e00\u6837\u7684) \uff0c\u8fd9\u6837\u4ece\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u5f00\u59cb\u8bbe\u7f6e\u4e00\u4e2a\u4e0a\u8ff0\u5927\u5c0f\u7684\u7a97\u53e3\uff0c\u7a97\u53e3\u6ed1\u52a8\u7684\u6b65\u957f\u4e3a 1 \u5982\u4f55\u5bf9\u7a97\u53e3\u4e2d\u7684\u5355\u8bcd\u8fdb\u884c\u5339\u914d\uff1f \u9996\u5148\u786e\u5b9a\u597d\u7a97\u53e3\u4e4b\u540e\uff0c\u5bf9\u7a97\u53e3 \u4ee5\u5355\u8bcd\u5927\u5c0f \u8fdb\u884c\u904d\u5386\uff0c\u5bf9\u6bcf\u4e2a\u904d\u5386\u5230\u7684\u5355\u8bcd \u9996\u5148 \u5224\u65ad\u7a97\u53e3hash\u8868\u4e2d\u8be5\u5355\u8bcd\u662f\u5426\u5728words\u7684hash\u8868\u4e2d\u51fa\u73b0\u8fc7 \uff0c\u5982\u679c\u90fd \u6ca1\u51fa\u73b0\u8fc7 \u5c31\u8bf4\u660e\u5f53\u524d\u7a97\u53e3\u4e0d\u7b26\u5408\u5339\u914d\u539f\u5219\uff0c\u76f4\u63a5 \u8fdb\u5165\u4e0b\u4e00\u4e2a\u7a97\u53e3 \uff1b\u5982\u679c \u51fa\u73b0\u8fc7 \uff0c\u5c31\u5c06 \u8be5\u5355\u8bcd\u5728\u7a97\u53e3hash\u8868\u4e2d\u7684\u6b21\u6570+1 \u6839\u636e \u4e24\u4e2ahash\u8868\u4e2d\u7684\u5355\u8bcd\u6b21\u6570\u6bd4\u8f83\u5224\u65ad\u7a97\u53e3\u4e2d\u7684\u5355\u8bcd\u662f\u5426\u5339\u914d \u3002 \u5982\u679c\u5bf9\u4e8e\u7a97\u53e3\u4e2d\u6240\u6709\u7684\u5355\u8bcd\uff0c\u4e24\u4e2ahash\u8868\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5c31\u8bf4\u660e\u5b8c\u5168\u5339\u914d\u3002\u5c06\u7a97\u53e3\u8fdb\u884c\u6ed1\u52a8\uff0c\u5224\u65ad\u4e0b\u4e00\u4e2a\u7a97\u53e3\u662f\u5426\u7b26\u5408 \u5982\u679c \u7a97\u53e3\u7684hash\u8868\u4e2d\u5355\u8bcd\u7684\u51fa\u73b0\u6b21\u6570\u5927\u4e8ewords\u6570\u7ec4\u7684hash\u8868\u4e2d\u7684\u6b21\u6570 \uff0c\u5c31\u8bf4\u660e\u4e0d\u5339\u914d\uff0c\u7136\u540e\u76f4\u63a5\u5c06\u7a97\u53e3\u8fdb\u884c\u6ed1\u52a8\uff0c\u5224\u65ad\u4e0b\u4e00\u4e2a\u7a97\u53e3\u662f\u5426\u7b26\u5408\uff08\u53ea\u8981\u7a97\u53e3\u4e2d\u6709\u4e00\u4e2a\u5355\u8bcd\u4e0d\u7b26\u5408\u5c31\u5c06\u8fdb\u5165\u4e0b\u4e00\u4e2a\u7a97\u53e3\uff01\uff01\uff01\uff01\uff01\uff01\uff09 \u4ee3\u7801 \u00b6 class Solution { public : vector < int > findSubstring ( string s , vector < string >& words ) { vector < int > res ; if ( s . size () == 0 || words . size () == 0 ) return res ; unordered_map < string , int > words_map ; for ( auto w : words ) words_map [ w ] ++ ; unordered_map < string , int > s_map ; //\u8ba1\u7b97\u51fa\u5355\u8bcd\u7ec4\u5408\u7684\u603b\u957f\u5ea6 int len = words [ 0 ]. size () * words . size (); //\u904d\u5386\u5b50\u4e32,\u8d77\u59cb\u4f4d\u7f6e\u662f\u6162\u6162\u53f3\u79fb\u7684 for ( int start = 0 ; start + len <= s . size (); start ++ ){ //\u6bcf\u6b21\u5728\u65b0\u7684\u8d77\u70b9\u9700\u8981\u6e05\u7a7amap s_map . clear (); int j ; //\u5728\u5b50\u4e32s\u4e2dlen\u957f\u7684\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u5355\u8bcd\uff0c\u770b\u662f\u5426\u7b26\u5408words_map\u4e2d\u7684\u6761\u4ef6 for ( j = 0 ; j < len ; j += words [ 0 ]. size ()){ string tempstr = s . substr ( start + j , words [ 0 ]. size ()); if ( words_map [ tempstr ]){ s_map [ tempstr ] ++ ; if ( s_map [ tempstr ] > words_map [ tempstr ]){ break ; } } else { break ; } } if ( j == len ) res . push_back ( start ); } return res ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N) n\u4e3a\u5b50\u4e32\u957f\u5ea6\uff0cm\u4e3awords\u6570\u7ec4\u5b57\u7b26\u957f\u5ea6","title":"leetcode30-\u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32"},{"location":"hash%E8%A1%A8/leetcode30-%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e9b\u957f\u5ea6\u76f8\u540c\u7684\u5355\u8bcd words\u3002\u627e\u51fa s \u4e2d\u6070\u597d\u53ef\u4ee5\u7531 words \u4e2d\u6240\u6709\u5355\u8bcd\u4e32\u8054\u5f62\u6210\u7684\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u6ce8\u610f\u5b50\u4e32\u8981\u4e0e words \u4e2d\u7684\u5355\u8bcd\u5b8c\u5168\u5339\u914d\uff0c\u4e2d\u95f4\u4e0d\u80fd\u6709\u5176\u4ed6\u5b57\u7b26\uff0c\u4f46**\u4e0d\u9700\u8981\u8003\u8651 words \u4e2d\u5355\u8bcd\u4e32\u8054\u7684\u987a\u5e8f**\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"] \u8f93\u51fa\uff1a[0,9] \u89e3\u91ca\uff1a \u4ece\u7d22\u5f15 0 \u548c 9 \u5f00\u59cb\u7684\u5b50\u4e32\u5206\u522b\u662f \"barfoo\" \u548c \"foobar\" \u3002 \u8f93\u51fa\u7684\u987a\u5e8f\u4e0d\u91cd\u8981, [9,0] \u4e5f\u662f\u6709\u6548\u7b54\u6848\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"] \u8f93\u51fa\uff1a[]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"hash%E8%A1%A8/leetcode30-%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2/#_2","text":"https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"hash%E8%A1%A8/leetcode30-%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2/#_3","text":"hash\u8868 + \u6ed1\u52a8\u7a97\u53e3 \u9898\u76ee\u4e2d\u8bf4 \u4e0d\u8003\u8651words\u4e2d\u5355\u8bcd\u7684\u987a\u5e8f \uff0c\u5982\u679cwords\u4e2d\u6709 n\u4e2a\u5355\u8bcd \uff0c\u90a3\u4e48\u8bf4\u660e\u5176\u4e2d\u7684\u5355\u8bcd\u53ef\u4ee5\u6709 n! \u79cd\u987a\u5e8f\uff0c\u5982\u679c\u8981\u5355\u8bcd\u6570\u6bd4\u8f83\u5c11\uff0c\u6328\u4e2a\u8003\u8651\u8fd8\u884c\uff0c\u4f46\u662f\u5982\u679c\u5355\u8bcd\u6570\u76ee\u6bd4\u8f83\u591a\uff0c\u8003\u8651\u8fd9\u4e48\u591a\u987a\u5e8f\u65e0\u7591\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u6240\u4ee5\u5c31\u5f15\u5165\u4e86 hash\u8868 \u6765\u89e3\u51b3words\u4e2d\u7684\u5355\u8bcd\u662f\u5426\u4e0e\u5b50\u4e32\u4e2d\u7684\u5b57\u7b26\u5339\u914d\uff1b\u7136\u540e\u901a\u8fc7 \u6ed1\u52a8\u7a97\u53e3 \u6765\u5bf9\u5b50\u4e32\u4e2d\u7684\u6bcf\u4e2a\u7a97\u53e3\u7684\u5355\u8bcd\u8fdb\u884c\u5224\u65ad\u662f\u5426\u7b26\u5408\u3002 \u4e3awords\u6570\u7ec4\u5efa\u7acb\u4e00\u4e2ahash\u8868\uff0c\u6765\u5b58\u653ewords\u4e2d\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\uff1b\u4e3a\u5b50\u4e32s\u5efa\u7acb\u4e00\u4e2ahash\u8868\uff0c\u6765\u5b58\u653e\u4e00\u6bb5\u7a97\u53e3\u4e2d\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\uff1b\u5982\u679c\u4e24\u4e2ahash\u8868\u4e2d\u5355\u8bcd\u7684\u51fa\u73b0\u6b21\u6570\u90fd\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7a97\u53e3\u4e2d\u7684\u5355\u8bcd\u5c31\u662f\u5339\u914d\u7684\uff0c\u5c31\u8bb0\u5f55\u4e0b\u8fd9\u4e2a\u7a97\u53e3\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f = words\u6570\u7ec4\u4e2d\u7684\u5355\u8bcd\u6570\u91cf*\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6(\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u90fd\u662f\u4e00\u6837\u7684) \uff0c\u8fd9\u6837\u4ece\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u5f00\u59cb\u8bbe\u7f6e\u4e00\u4e2a\u4e0a\u8ff0\u5927\u5c0f\u7684\u7a97\u53e3\uff0c\u7a97\u53e3\u6ed1\u52a8\u7684\u6b65\u957f\u4e3a 1 \u5982\u4f55\u5bf9\u7a97\u53e3\u4e2d\u7684\u5355\u8bcd\u8fdb\u884c\u5339\u914d\uff1f \u9996\u5148\u786e\u5b9a\u597d\u7a97\u53e3\u4e4b\u540e\uff0c\u5bf9\u7a97\u53e3 \u4ee5\u5355\u8bcd\u5927\u5c0f \u8fdb\u884c\u904d\u5386\uff0c\u5bf9\u6bcf\u4e2a\u904d\u5386\u5230\u7684\u5355\u8bcd \u9996\u5148 \u5224\u65ad\u7a97\u53e3hash\u8868\u4e2d\u8be5\u5355\u8bcd\u662f\u5426\u5728words\u7684hash\u8868\u4e2d\u51fa\u73b0\u8fc7 \uff0c\u5982\u679c\u90fd \u6ca1\u51fa\u73b0\u8fc7 \u5c31\u8bf4\u660e\u5f53\u524d\u7a97\u53e3\u4e0d\u7b26\u5408\u5339\u914d\u539f\u5219\uff0c\u76f4\u63a5 \u8fdb\u5165\u4e0b\u4e00\u4e2a\u7a97\u53e3 \uff1b\u5982\u679c \u51fa\u73b0\u8fc7 \uff0c\u5c31\u5c06 \u8be5\u5355\u8bcd\u5728\u7a97\u53e3hash\u8868\u4e2d\u7684\u6b21\u6570+1 \u6839\u636e \u4e24\u4e2ahash\u8868\u4e2d\u7684\u5355\u8bcd\u6b21\u6570\u6bd4\u8f83\u5224\u65ad\u7a97\u53e3\u4e2d\u7684\u5355\u8bcd\u662f\u5426\u5339\u914d \u3002 \u5982\u679c\u5bf9\u4e8e\u7a97\u53e3\u4e2d\u6240\u6709\u7684\u5355\u8bcd\uff0c\u4e24\u4e2ahash\u8868\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5c31\u8bf4\u660e\u5b8c\u5168\u5339\u914d\u3002\u5c06\u7a97\u53e3\u8fdb\u884c\u6ed1\u52a8\uff0c\u5224\u65ad\u4e0b\u4e00\u4e2a\u7a97\u53e3\u662f\u5426\u7b26\u5408 \u5982\u679c \u7a97\u53e3\u7684hash\u8868\u4e2d\u5355\u8bcd\u7684\u51fa\u73b0\u6b21\u6570\u5927\u4e8ewords\u6570\u7ec4\u7684hash\u8868\u4e2d\u7684\u6b21\u6570 \uff0c\u5c31\u8bf4\u660e\u4e0d\u5339\u914d\uff0c\u7136\u540e\u76f4\u63a5\u5c06\u7a97\u53e3\u8fdb\u884c\u6ed1\u52a8\uff0c\u5224\u65ad\u4e0b\u4e00\u4e2a\u7a97\u53e3\u662f\u5426\u7b26\u5408\uff08\u53ea\u8981\u7a97\u53e3\u4e2d\u6709\u4e00\u4e2a\u5355\u8bcd\u4e0d\u7b26\u5408\u5c31\u5c06\u8fdb\u5165\u4e0b\u4e00\u4e2a\u7a97\u53e3\uff01\uff01\uff01\uff01\uff01\uff01\uff09","title":"\u601d\u8def"},{"location":"hash%E8%A1%A8/leetcode30-%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2/#_4","text":"class Solution { public : vector < int > findSubstring ( string s , vector < string >& words ) { vector < int > res ; if ( s . size () == 0 || words . size () == 0 ) return res ; unordered_map < string , int > words_map ; for ( auto w : words ) words_map [ w ] ++ ; unordered_map < string , int > s_map ; //\u8ba1\u7b97\u51fa\u5355\u8bcd\u7ec4\u5408\u7684\u603b\u957f\u5ea6 int len = words [ 0 ]. size () * words . size (); //\u904d\u5386\u5b50\u4e32,\u8d77\u59cb\u4f4d\u7f6e\u662f\u6162\u6162\u53f3\u79fb\u7684 for ( int start = 0 ; start + len <= s . size (); start ++ ){ //\u6bcf\u6b21\u5728\u65b0\u7684\u8d77\u70b9\u9700\u8981\u6e05\u7a7amap s_map . clear (); int j ; //\u5728\u5b50\u4e32s\u4e2dlen\u957f\u7684\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u5355\u8bcd\uff0c\u770b\u662f\u5426\u7b26\u5408words_map\u4e2d\u7684\u6761\u4ef6 for ( j = 0 ; j < len ; j += words [ 0 ]. size ()){ string tempstr = s . substr ( start + j , words [ 0 ]. size ()); if ( words_map [ tempstr ]){ s_map [ tempstr ] ++ ; if ( s_map [ tempstr ] > words_map [ tempstr ]){ break ; } } else { break ; } } if ( j == len ) res . push_back ( start ); } return res ; } };","title":"\u4ee3\u7801"},{"location":"hash%E8%A1%A8/leetcode30-%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N) n\u4e3a\u5b50\u4e32\u957f\u5ea6\uff0cm\u4e3awords\u6570\u7ec4\u5b57\u7b26\u957f\u5ea6","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"hash%E8%A1%A8/leetcode347-%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8fd4\u56de\u5176\u4e2d\u51fa\u73b0\u9891\u7387\u524d k \u9ad8\u7684\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [1,1,1,2,2,3], k = 2 \u8f93\u51fa: [1,2] \u793a\u4f8b 2: \u8f93\u5165: nums = [1], k = 1 \u8f93\u51fa: [1] \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/top-k-frequent-elements \u601d\u8def\u4e00(\u66b4\u529b\u89e3\u6cd5--hash\u8868+\u6392\u5e8f\u6cd5) \u00b6 hash\u8868 + \u666e\u901a\u6392\u5e8f \u904d\u5386\u6570\u7ec4\uff0c\u7136\u540e\u5c06\u5176\u4e2d\u7684\u5143\u7d20\u5b58\u5165hash\u8868\uff0c \u5143\u7d20\u503c \u4f5c\u4e3ahash\u8868\u7684 \u952e \uff0c \u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 \u4f5c\u4e3ahash\u8868\u7684 \u503c .\u8fd9\u6837hash\u8868\u5c31\u53ef\u4ee5\u8fdb\u884c\u53bb\u91cd \u5c06hash\u8868\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\uff08\u8fd9\u91cc\u662f\u7528\u4e86\u4e00\u4e2avector >\u8f85\u52a9\u6765\u5bf9hash\u4e2d\u7684\u5143\u7d20\u6392\u5e8f\u7684\uff09\uff0c\u7136\u540e\u4ece\u8fd9\u4e2avector\u4e2d\u622a\u53d6\u524dK\u4e2a\u5143\u7d20\uff0c\u8fd4\u56de \u4ee3\u7801\u4e00 \u00b6 class Solution { public : static bool cmp1 ( pair < int , int > a , pair < int , int > b ){ return a . second > b . second ; } vector < int > topKFrequent ( vector < int >& nums , int k ) { vector < pair < int , int >> res ; vector < int > ans ; unordered_map < int , int > nums_map ; for ( auto n : nums ) nums_map [ n ] ++ ; //\u904d\u5386hashmap auto iter = nums_map . begin (); while ( iter != nums_map . end ()){ res . push_back ( make_pair ( iter -> first , iter -> second )); ++ iter ; } sort ( res . begin (), res . end (), cmp1 ); for ( auto it = res . begin (); it != res . end (); it ++ ){ ans . push_back ( it -> first ); } vector < int >:: const_iterator first = ans . begin (); vector < int >:: const_iterator end = ans . begin () + k ; vector < int > r ( first , end ); return r ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(NlogN)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u8fd9\u4e2a\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u6ee1\u8db3\u9898\u76ee\u7684\u8981\u6c42\uff0c\u56e0\u4e3a\u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u80fd\u9ad8\u4e8eNlogN\uff0c\u4e3b\u8981\u662f\u5bf9\u4e8ehash\u8868\u4e2d\u6240\u6709\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u622a\u53d6\u4e86\u524dK\u4e2a\uff0c\u90a3\u4e48\u80fd\u4e0d\u80fd\u5c31\u53ea\u9488\u5bf9K\u4e2a\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u5462\uff1f\u8fd9\u91cc\u53ef\u4ee5\u7528\u5806\u6765\u5b9e\u73b0 \u601d\u8def\u4e8c (hash\u8868+\u5806) \u00b6 hash\u8868 + \u5806 \u904d\u5386\u6570\u7ec4\uff0c\u7136\u540e\u5c06\u5176\u4e2d\u7684\u5143\u7d20\u5b58\u5165hash\u8868\uff0c \u5143\u7d20\u503c \u4f5c\u4e3ahash\u8868\u7684 \u952e \uff0c \u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 \u4f5c\u4e3ahash\u8868\u7684 \u503c .\u8fd9\u6837hash\u8868\u5c31\u53ef\u4ee5\u8fdb\u884c\u53bb\u91cd \u5efa\u7acb \u5c0f\u6839\u5806 \uff08\u5806\u9876\u4e3a\u5806\u7684\u6700\u5c0f\u5143\u7d20\uff09\uff0c\u5f53\u5806\u7684\u5143\u7d20\u4e2a\u6570\u5c0f\u4e8eK\u7684\u65f6\u5019\uff0c\u5c06hash\u8868\u4e2d\u7684\u952e\u503c\u5b58\u653e\u8fdb\u5806\uff08\u6ce8\u610f\u5f53\u5982\u5806\u7684\u65f6\u5019\uff0c\u5e94\u8be5\u5c06 \u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 \u4f5c\u4e3a\u5806\u7684\u4e2d\u5143\u7d20\u7684 \u952e \uff0c\u5c06 \u5143\u7d20\u503c \u4f5c\u4e3a\u5806\u4e2d\u5143\u7d20\u7684 \u503c ,\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u653e\uff1f\u56e0\u4e3a\u6211\u4eec\u662f\u8981\u627e\u51fa\u73b0\u9891\u6b21\u6700\u9ad8\u7684k\u4e2a\u6570\uff0c\u6240\u4ee5\u5806\u4e2d\u5e94\u8be5\u662f\u4ee5 \u9891\u6b21 \u8fdb\u884c\u6392\u5e8f\u7684\uff0c\u800cc++\u4e2d\u7684 \u4f18\u5148\u961f\u5217\u5efa\u7acb\u7684\u5806 \u662f\u4ee5\u7b2c\u4e00\u4e2a\u5143\u7d20\u6765\u6392\u5e8f\u7684\uff0c\u6240\u4ee5\u5c06\u9891\u6b21\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u5f53\u5230\u7b2ck + 1\u4e2a\u5143\u7d20\u7684\u65f6\u5019\uff0c\u6bd4\u8f83\u5176 \u9891\u6b21 \u4e0e\u5806\u9876\u5143\u7d20 \u9891\u6b21 \u7684\u5927\u5c0f\uff0c\u5982\u679c\u6bd4\u5806\u9876\u5143\u7d20\u5c0f\uff0c\u90a3\u4e48\u904d\u5386hash\u8868\u7684\u4e0b\u4e00\u4e2a\uff1b\u5982\u679c\u6bd4\u5806\u9876\u5143\u7d20\u7684\u9891\u6b21\u5927\uff0c\u90a3\u4e48\u5c06\u5806\u9876\u5143\u7d20pop()\uff0c\u7136\u540e\u5c06\u8be5\u5143\u7d20\u53ca\u5176\u9891\u6b21\u653e\u5165\u5806\u4e2d \u904d\u5386\u5b8chash\u8868\uff0c\u7136\u540e\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u8bb0\u5f55\u5806\u4e2d\u7684\u5143\u7d20\uff0c\u8f93\u51fa\u5373\u53ef \u4ee3\u7801\u4e8c \u00b6 class Solution { public : vector < int > topKFrequent ( vector < int >& nums , int k ) { unordered_map < int , int > nums_map ; //\u585e\u8fdbhash\u8868 for ( auto n : nums ) nums_map [ n ] ++ ; //hash\u8868\u4e2d\u5143\u7d20\u4e3a[\u6570\u503c\uff0c\u9891\u6b21]] //\u5806\u4e2d\u7684\u5143\u7d20\u4e3a [\u9891\u6b21\uff0c\u6570\u503c] //\u5806\u4e2d\u662f\u6309\u7167\u9891\u6b21\uff0c\u5373\u4ee5first\u8fdb\u884c\u6392\u5e8f\u7684\uff0c\u6700\u540e\u8f93\u51fa\u7684\u65f6\u5019\u53ea\u9700\u8981\u8f93\u51fa\u6570\u503c\u5373\u53ef priority_queue < pair < int , int > , vector < pair < int , int >> , greater < pair < int , int >>> q ; for ( auto it : nums_map ){ if ( q . size () != k ) q . push ( make_pair ( it . second , it . first )); else { if ( it . second > q . top (). first ){ q . pop (); q . push ( make_pair ( it . second , it . first )); } } } vector < int > res ; while ( ! q . empty ()){ res . push_back ( q . top (). second ); q . pop (); } //\u56e0\u4e3a\u662f\u5c0f\u6839\u5806\uff0c\u6240\u4ee5\u9891\u6b21\u5c0f\u7684\u5148\u8f93\u51fa reverse ( res . begin (), res . end ()); return res ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(NlogK)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N) \u8fd9\u91cc\u4e00\u4e2a\u4f18\u5316\u5c31\u662f\u5806\u6392\u5e8f\uff0c\u5e76\u4e0d\u9700\u8981\u5bf9\u6240\u6709\u5143\u7d20\u6392\u5e8f\uff0c\u53ea\u9700\u8981\u5bf9\u5806\u4e2d\u7684K\u4e2a\u5143\u7d20\u6392\u5e8f\u5373\u53ef \u601d\u8def\u4e09(hash\u8868+\u6876\u6392\u5e8f) \u00b6","title":"leetcode347-\u524dk\u4e2a\u9ad8\u9891\u5143\u7d20"},{"location":"hash%E8%A1%A8/leetcode347-%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8fd4\u56de\u5176\u4e2d\u51fa\u73b0\u9891\u7387\u524d k \u9ad8\u7684\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [1,1,1,2,2,3], k = 2 \u8f93\u51fa: [1,2] \u793a\u4f8b 2: \u8f93\u5165: nums = [1], k = 1 \u8f93\u51fa: [1]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"hash%E8%A1%A8/leetcode347-%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/#_2","text":"https://leetcode-cn.com/problems/top-k-frequent-elements","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"hash%E8%A1%A8/leetcode347-%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/#-hash","text":"hash\u8868 + \u666e\u901a\u6392\u5e8f \u904d\u5386\u6570\u7ec4\uff0c\u7136\u540e\u5c06\u5176\u4e2d\u7684\u5143\u7d20\u5b58\u5165hash\u8868\uff0c \u5143\u7d20\u503c \u4f5c\u4e3ahash\u8868\u7684 \u952e \uff0c \u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 \u4f5c\u4e3ahash\u8868\u7684 \u503c .\u8fd9\u6837hash\u8868\u5c31\u53ef\u4ee5\u8fdb\u884c\u53bb\u91cd \u5c06hash\u8868\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\uff08\u8fd9\u91cc\u662f\u7528\u4e86\u4e00\u4e2avector >\u8f85\u52a9\u6765\u5bf9hash\u4e2d\u7684\u5143\u7d20\u6392\u5e8f\u7684\uff09\uff0c\u7136\u540e\u4ece\u8fd9\u4e2avector\u4e2d\u622a\u53d6\u524dK\u4e2a\u5143\u7d20\uff0c\u8fd4\u56de","title":"\u601d\u8def\u4e00(\u66b4\u529b\u89e3\u6cd5--hash\u8868+\u6392\u5e8f\u6cd5)"},{"location":"hash%E8%A1%A8/leetcode347-%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/#_3","text":"class Solution { public : static bool cmp1 ( pair < int , int > a , pair < int , int > b ){ return a . second > b . second ; } vector < int > topKFrequent ( vector < int >& nums , int k ) { vector < pair < int , int >> res ; vector < int > ans ; unordered_map < int , int > nums_map ; for ( auto n : nums ) nums_map [ n ] ++ ; //\u904d\u5386hashmap auto iter = nums_map . begin (); while ( iter != nums_map . end ()){ res . push_back ( make_pair ( iter -> first , iter -> second )); ++ iter ; } sort ( res . begin (), res . end (), cmp1 ); for ( auto it = res . begin (); it != res . end (); it ++ ){ ans . push_back ( it -> first ); } vector < int >:: const_iterator first = ans . begin (); vector < int >:: const_iterator end = ans . begin () + k ; vector < int > r ( first , end ); return r ; } };","title":"\u4ee3\u7801\u4e00"},{"location":"hash%E8%A1%A8/leetcode347-%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/#_4","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(NlogN)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u8fd9\u4e2a\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u6ee1\u8db3\u9898\u76ee\u7684\u8981\u6c42\uff0c\u56e0\u4e3a\u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u80fd\u9ad8\u4e8eNlogN\uff0c\u4e3b\u8981\u662f\u5bf9\u4e8ehash\u8868\u4e2d\u6240\u6709\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u622a\u53d6\u4e86\u524dK\u4e2a\uff0c\u90a3\u4e48\u80fd\u4e0d\u80fd\u5c31\u53ea\u9488\u5bf9K\u4e2a\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u5462\uff1f\u8fd9\u91cc\u53ef\u4ee5\u7528\u5806\u6765\u5b9e\u73b0","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"hash%E8%A1%A8/leetcode347-%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/#hash","text":"hash\u8868 + \u5806 \u904d\u5386\u6570\u7ec4\uff0c\u7136\u540e\u5c06\u5176\u4e2d\u7684\u5143\u7d20\u5b58\u5165hash\u8868\uff0c \u5143\u7d20\u503c \u4f5c\u4e3ahash\u8868\u7684 \u952e \uff0c \u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 \u4f5c\u4e3ahash\u8868\u7684 \u503c .\u8fd9\u6837hash\u8868\u5c31\u53ef\u4ee5\u8fdb\u884c\u53bb\u91cd \u5efa\u7acb \u5c0f\u6839\u5806 \uff08\u5806\u9876\u4e3a\u5806\u7684\u6700\u5c0f\u5143\u7d20\uff09\uff0c\u5f53\u5806\u7684\u5143\u7d20\u4e2a\u6570\u5c0f\u4e8eK\u7684\u65f6\u5019\uff0c\u5c06hash\u8868\u4e2d\u7684\u952e\u503c\u5b58\u653e\u8fdb\u5806\uff08\u6ce8\u610f\u5f53\u5982\u5806\u7684\u65f6\u5019\uff0c\u5e94\u8be5\u5c06 \u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 \u4f5c\u4e3a\u5806\u7684\u4e2d\u5143\u7d20\u7684 \u952e \uff0c\u5c06 \u5143\u7d20\u503c \u4f5c\u4e3a\u5806\u4e2d\u5143\u7d20\u7684 \u503c ,\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u653e\uff1f\u56e0\u4e3a\u6211\u4eec\u662f\u8981\u627e\u51fa\u73b0\u9891\u6b21\u6700\u9ad8\u7684k\u4e2a\u6570\uff0c\u6240\u4ee5\u5806\u4e2d\u5e94\u8be5\u662f\u4ee5 \u9891\u6b21 \u8fdb\u884c\u6392\u5e8f\u7684\uff0c\u800cc++\u4e2d\u7684 \u4f18\u5148\u961f\u5217\u5efa\u7acb\u7684\u5806 \u662f\u4ee5\u7b2c\u4e00\u4e2a\u5143\u7d20\u6765\u6392\u5e8f\u7684\uff0c\u6240\u4ee5\u5c06\u9891\u6b21\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u5f53\u5230\u7b2ck + 1\u4e2a\u5143\u7d20\u7684\u65f6\u5019\uff0c\u6bd4\u8f83\u5176 \u9891\u6b21 \u4e0e\u5806\u9876\u5143\u7d20 \u9891\u6b21 \u7684\u5927\u5c0f\uff0c\u5982\u679c\u6bd4\u5806\u9876\u5143\u7d20\u5c0f\uff0c\u90a3\u4e48\u904d\u5386hash\u8868\u7684\u4e0b\u4e00\u4e2a\uff1b\u5982\u679c\u6bd4\u5806\u9876\u5143\u7d20\u7684\u9891\u6b21\u5927\uff0c\u90a3\u4e48\u5c06\u5806\u9876\u5143\u7d20pop()\uff0c\u7136\u540e\u5c06\u8be5\u5143\u7d20\u53ca\u5176\u9891\u6b21\u653e\u5165\u5806\u4e2d \u904d\u5386\u5b8chash\u8868\uff0c\u7136\u540e\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u8bb0\u5f55\u5806\u4e2d\u7684\u5143\u7d20\uff0c\u8f93\u51fa\u5373\u53ef","title":"\u601d\u8def\u4e8c(hash\u8868+\u5806)"},{"location":"hash%E8%A1%A8/leetcode347-%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/#_5","text":"class Solution { public : vector < int > topKFrequent ( vector < int >& nums , int k ) { unordered_map < int , int > nums_map ; //\u585e\u8fdbhash\u8868 for ( auto n : nums ) nums_map [ n ] ++ ; //hash\u8868\u4e2d\u5143\u7d20\u4e3a[\u6570\u503c\uff0c\u9891\u6b21]] //\u5806\u4e2d\u7684\u5143\u7d20\u4e3a [\u9891\u6b21\uff0c\u6570\u503c] //\u5806\u4e2d\u662f\u6309\u7167\u9891\u6b21\uff0c\u5373\u4ee5first\u8fdb\u884c\u6392\u5e8f\u7684\uff0c\u6700\u540e\u8f93\u51fa\u7684\u65f6\u5019\u53ea\u9700\u8981\u8f93\u51fa\u6570\u503c\u5373\u53ef priority_queue < pair < int , int > , vector < pair < int , int >> , greater < pair < int , int >>> q ; for ( auto it : nums_map ){ if ( q . size () != k ) q . push ( make_pair ( it . second , it . first )); else { if ( it . second > q . top (). first ){ q . pop (); q . push ( make_pair ( it . second , it . first )); } } } vector < int > res ; while ( ! q . empty ()){ res . push_back ( q . top (). second ); q . pop (); } //\u56e0\u4e3a\u662f\u5c0f\u6839\u5806\uff0c\u6240\u4ee5\u9891\u6b21\u5c0f\u7684\u5148\u8f93\u51fa reverse ( res . begin (), res . end ()); return res ; } };","title":"\u4ee3\u7801\u4e8c"},{"location":"hash%E8%A1%A8/leetcode347-%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/#_6","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(NlogK)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N) \u8fd9\u91cc\u4e00\u4e2a\u4f18\u5316\u5c31\u662f\u5806\u6392\u5e8f\uff0c\u5e76\u4e0d\u9700\u8981\u5bf9\u6240\u6709\u5143\u7d20\u6392\u5e8f\uff0c\u53ea\u9700\u8981\u5bf9\u5806\u4e2d\u7684K\u4e2a\u5143\u7d20\u6392\u5e8f\u5373\u53ef","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"hash%E8%A1%A8/leetcode347-%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/#hash_1","text":"","title":"\u601d\u8def\u4e09(hash\u8868+\u6876\u6392\u5e8f)"},{"location":"%E4%BD%8D%E8%BF%90%E7%AE%97/leetcode78-%E5%AD%90%E9%9B%86/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u7ec4**\u4e0d\u542b\u91cd\u590d\u5143\u7d20**\u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002 **\u8bf4\u660e\uff1a**\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002 \u793a\u4f8b: \u8f93\u5165: nums = [1,2,3] \u8f93\u51fa: [ [3], [1], [2], [1,2,3], [1,3], [2,3], [1,2], [] ] \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/subsets \u601d\u8def\u4e00(\u4f4d\u8fd0\u7b97) \u00b6 \u4ee3\u7801 \u00b6 class Solution { public : vector < vector < int >> subsets ( vector < int >& nums ) { vector < vector < int >> res ; int size = nums . size (); for ( int i = 0 ; i < 1 << size ; i ++ ){ vector < int > ans ; for ( int j = 0 ; j < size ; j ++ ){ if ( i & ( 1 << j )) ans . push_back ( nums [ j ]); } res . push_back ( ans ); } return res ; } }; \u601d\u8def\u4e8c(\u9012\u5f52) \u00b6 \u4ee3\u7801 \u00b6 class Solution { public : vector < vector < int >> subsets ( vector < int >& nums ) { if ( nums . empty ()) return {{}}; int n = nums . back (); nums . pop_back (); vector < vector < int >> res = subsets ( nums ); int size = res . size (); for ( int i = 0 ; i < size ; i ++ ){ res . push_back ( res [ i ]); res . back (). push_back ( n ); } return res ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u601d\u8def\u4e09(DFS) \u00b6 \u4ee3\u7801 \u00b6","title":"Leetcode78 \u5b50\u96c6"},{"location":"%E4%BD%8D%E8%BF%90%E7%AE%97/leetcode78-%E5%AD%90%E9%9B%86/#_1","text":"\u7ed9\u5b9a\u4e00\u7ec4**\u4e0d\u542b\u91cd\u590d\u5143\u7d20**\u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002 **\u8bf4\u660e\uff1a**\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002 \u793a\u4f8b: \u8f93\u5165: nums = [1,2,3] \u8f93\u51fa: [ [3], [1], [2], [1,2,3], [1,3], [2,3], [1,2], [] ]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E4%BD%8D%E8%BF%90%E7%AE%97/leetcode78-%E5%AD%90%E9%9B%86/#_2","text":"https://leetcode-cn.com/problems/subsets","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E4%BD%8D%E8%BF%90%E7%AE%97/leetcode78-%E5%AD%90%E9%9B%86/#_3","text":"","title":"\u601d\u8def\u4e00(\u4f4d\u8fd0\u7b97)"},{"location":"%E4%BD%8D%E8%BF%90%E7%AE%97/leetcode78-%E5%AD%90%E9%9B%86/#_4","text":"class Solution { public : vector < vector < int >> subsets ( vector < int >& nums ) { vector < vector < int >> res ; int size = nums . size (); for ( int i = 0 ; i < 1 << size ; i ++ ){ vector < int > ans ; for ( int j = 0 ; j < size ; j ++ ){ if ( i & ( 1 << j )) ans . push_back ( nums [ j ]); } res . push_back ( ans ); } return res ; } };","title":"\u4ee3\u7801"},{"location":"%E4%BD%8D%E8%BF%90%E7%AE%97/leetcode78-%E5%AD%90%E9%9B%86/#_5","text":"","title":"\u601d\u8def\u4e8c(\u9012\u5f52)"},{"location":"%E4%BD%8D%E8%BF%90%E7%AE%97/leetcode78-%E5%AD%90%E9%9B%86/#_6","text":"class Solution { public : vector < vector < int >> subsets ( vector < int >& nums ) { if ( nums . empty ()) return {{}}; int n = nums . back (); nums . pop_back (); vector < vector < int >> res = subsets ( nums ); int size = res . size (); for ( int i = 0 ; i < size ; i ++ ){ res . push_back ( res [ i ]); res . back (). push_back ( n ); } return res ; } };","title":"\u4ee3\u7801"},{"location":"%E4%BD%8D%E8%BF%90%E7%AE%97/leetcode78-%E5%AD%90%E9%9B%86/#_7","text":"","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E4%BD%8D%E8%BF%90%E7%AE%97/leetcode78-%E5%AD%90%E9%9B%86/#dfs","text":"","title":"\u601d\u8def\u4e09(DFS)"},{"location":"%E4%BD%8D%E8%BF%90%E7%AE%97/leetcode78-%E5%AD%90%E9%9B%86/#_8","text":"","title":"\u4ee3\u7801"},{"location":"%E5%89%8D%E7%BC%80%E6%A0%91/leetcode208-%E5%AE%9E%E7%8E%B0Trie%E6%A0%91/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u5b9e\u73b0\u4e00\u4e2a Trie (\u524d\u7f00\u6811)\uff0c\u5305\u542b insert, search, \u548c startsWith \u8fd9\u4e09\u4e2a\u64cd\u4f5c\u3002 \u793a\u4f8b: Trie trie = new Trie(); trie.insert(\"apple\"); trie.search(\"apple\"); // \u8fd4\u56de true trie.search(\"app\"); // \u8fd4\u56de false trie.startsWith(\"app\"); // \u8fd4\u56de true trie.insert(\"app\"); trie.search(\"app\"); // \u8fd4\u56de true \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/implement-trie-prefix-tree \u601d\u8def \u00b6 \u524d\u7f00\u6811 \u524d\u7f00\u6811\u548c\u4e4b\u524d\u7684\u666e\u901a\u7684\u6811\u7684\u5b9a\u4e49\u6709\u6240\u4e0d\u540c\uff0c\u4ed6\u6ca1\u6709\u660e\u786e\u5b58\u50a8\u67d0\u4e2a\u503c\uff0c\u800c\u662f\u6709 isend\u8fd9\u4e2a\u5c5e\u6027 \u5b83\u7684\u6700\u5178\u578b\u7684\u5e94\u7528\u573a\u666f\u662f\uff1a\u5f53\u6709\u5f88\u591a\u5b57\u7b26\u4e32\u6709\u516c\u5171\u524d\u7f00\u7684\u65f6\u5019\uff0c\u7528\u6765\u67e5\u627e\u67d0\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5176\u4e2d\uff08\u4e0d\u7528hash\u8868\u662f\u56e0\u4e3a\u5f53\u5b57\u7b26\u4e32\u5f88\u591a\u7684\u65f6\u5019\uff0chash\u8868\u4f1a\u4ea7\u751fhash\u51b2\u7a81\uff0c\u4ece\u800c\u5bfc\u81f4\u6548\u7387\u964d\u4f4e\uff09\uff1b\u6a21\u7cca\u5339\u914d\u7b49 Trie\u7684\u67e5\u8be2\u4e00\u5b9a\u662f\u5229\u7528\u7684\u524d\u7f00\u67e5\u8be2\uff0c\u6700\u5e38\u89c1\u7684\u64cd\u4f5c\u5c31\u662f\u63d2\u5165\uff0c\u67e5\u627e\u662f\u5426\u5b58\u5728\u67d0\u4e2a\u952e\uff0c\u67e5\u627e\u67d0\u4e2a\u952e\u662f\u5426\u5b58\u662f\u516c\u5171\u524d\u7f00 \u4ee3\u7801 \u00b6 class Trie { private : Trie * next [ 26 ]; bool isend ; public : /** Initialize your data structure here. */ Trie () { isend = false ; memset ( next , 0 , sizeof ( next )); //\u521d\u59cb\u5316\u6e050 } /** Inserts a word into the trie. */ void insert ( string word ) { Trie * node = this ; for ( auto c : word ){ if ( node -> next [ c - 'a' ] == nullptr ) node -> next [ c - 'a' ] = new Trie ; node = node -> next [ c - 'a' ]; } //\u904d\u5386\u5230\u6700\u540e node -> isend = true ; } /** Returns if the word is in the trie. */ bool search ( string word ) { Trie * node = this ; for ( auto c : word ){ node = node -> next [ c - 'a' ]; if ( node == nullptr ) return false ; } return node -> isend ; } /** Returns if there is any word in the trie that starts with the given prefix. */ bool startsWith ( string prefix ) { Trie * node = this ; for ( auto c : prefix ){ node = node -> next [ c - 'a' ]; if ( node == nullptr ) return false ; } return true ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(len(word))\uff0c\u6700\u574f\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(26^N)","title":"leetcode208-\u5b9e\u73b0Trie\u6811"},{"location":"%E5%89%8D%E7%BC%80%E6%A0%91/leetcode208-%E5%AE%9E%E7%8E%B0Trie%E6%A0%91/#_1","text":"\u5b9e\u73b0\u4e00\u4e2a Trie (\u524d\u7f00\u6811)\uff0c\u5305\u542b insert, search, \u548c startsWith \u8fd9\u4e09\u4e2a\u64cd\u4f5c\u3002 \u793a\u4f8b: Trie trie = new Trie(); trie.insert(\"apple\"); trie.search(\"apple\"); // \u8fd4\u56de true trie.search(\"app\"); // \u8fd4\u56de false trie.startsWith(\"app\"); // \u8fd4\u56de true trie.insert(\"app\"); trie.search(\"app\"); // \u8fd4\u56de true","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%89%8D%E7%BC%80%E6%A0%91/leetcode208-%E5%AE%9E%E7%8E%B0Trie%E6%A0%91/#_2","text":"https://leetcode-cn.com/problems/implement-trie-prefix-tree","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%89%8D%E7%BC%80%E6%A0%91/leetcode208-%E5%AE%9E%E7%8E%B0Trie%E6%A0%91/#_3","text":"\u524d\u7f00\u6811 \u524d\u7f00\u6811\u548c\u4e4b\u524d\u7684\u666e\u901a\u7684\u6811\u7684\u5b9a\u4e49\u6709\u6240\u4e0d\u540c\uff0c\u4ed6\u6ca1\u6709\u660e\u786e\u5b58\u50a8\u67d0\u4e2a\u503c\uff0c\u800c\u662f\u6709 isend\u8fd9\u4e2a\u5c5e\u6027 \u5b83\u7684\u6700\u5178\u578b\u7684\u5e94\u7528\u573a\u666f\u662f\uff1a\u5f53\u6709\u5f88\u591a\u5b57\u7b26\u4e32\u6709\u516c\u5171\u524d\u7f00\u7684\u65f6\u5019\uff0c\u7528\u6765\u67e5\u627e\u67d0\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5176\u4e2d\uff08\u4e0d\u7528hash\u8868\u662f\u56e0\u4e3a\u5f53\u5b57\u7b26\u4e32\u5f88\u591a\u7684\u65f6\u5019\uff0chash\u8868\u4f1a\u4ea7\u751fhash\u51b2\u7a81\uff0c\u4ece\u800c\u5bfc\u81f4\u6548\u7387\u964d\u4f4e\uff09\uff1b\u6a21\u7cca\u5339\u914d\u7b49 Trie\u7684\u67e5\u8be2\u4e00\u5b9a\u662f\u5229\u7528\u7684\u524d\u7f00\u67e5\u8be2\uff0c\u6700\u5e38\u89c1\u7684\u64cd\u4f5c\u5c31\u662f\u63d2\u5165\uff0c\u67e5\u627e\u662f\u5426\u5b58\u5728\u67d0\u4e2a\u952e\uff0c\u67e5\u627e\u67d0\u4e2a\u952e\u662f\u5426\u5b58\u662f\u516c\u5171\u524d\u7f00","title":"\u601d\u8def"},{"location":"%E5%89%8D%E7%BC%80%E6%A0%91/leetcode208-%E5%AE%9E%E7%8E%B0Trie%E6%A0%91/#_4","text":"class Trie { private : Trie * next [ 26 ]; bool isend ; public : /** Initialize your data structure here. */ Trie () { isend = false ; memset ( next , 0 , sizeof ( next )); //\u521d\u59cb\u5316\u6e050 } /** Inserts a word into the trie. */ void insert ( string word ) { Trie * node = this ; for ( auto c : word ){ if ( node -> next [ c - 'a' ] == nullptr ) node -> next [ c - 'a' ] = new Trie ; node = node -> next [ c - 'a' ]; } //\u904d\u5386\u5230\u6700\u540e node -> isend = true ; } /** Returns if the word is in the trie. */ bool search ( string word ) { Trie * node = this ; for ( auto c : word ){ node = node -> next [ c - 'a' ]; if ( node == nullptr ) return false ; } return node -> isend ; } /** Returns if there is any word in the trie that starts with the given prefix. */ bool startsWith ( string prefix ) { Trie * node = this ; for ( auto c : prefix ){ node = node -> next [ c - 'a' ]; if ( node == nullptr ) return false ; } return true ; } };","title":"\u4ee3\u7801"},{"location":"%E5%89%8D%E7%BC%80%E6%A0%91/leetcode208-%E5%AE%9E%E7%8E%B0Trie%E6%A0%91/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(len(word))\uff0c\u6700\u574f\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(26^N)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%89%8D%E7%BC%80%E6%A0%91/leetcode677-%E9%94%AE%E5%80%BC%E6%98%A0%E5%B0%84/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u5b9e\u73b0\u4e00\u4e2a MapSum \u7c7b\uff0c\u652f\u6301\u4e24\u4e2a\u65b9\u6cd5\uff0cinsert \u548c sum\uff1a MapSum() \u521d\u59cb\u5316 MapSum \u5bf9\u8c61 void insert(String key, int val) \u63d2\u5165 key-val \u952e\u503c\u5bf9\uff0c\u5b57\u7b26\u4e32\u8868\u793a\u952e key \uff0c\u6574\u6570\u8868\u793a\u503c val \u3002\u5982\u679c\u952e key \u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u539f\u6765\u7684\u952e\u503c\u5bf9\u5c06\u88ab\u66ff\u4ee3\u6210\u65b0\u7684\u952e\u503c\u5bf9\u3002 int sum(string prefix) \u8fd4\u56de\u6240\u6709\u4ee5\u8be5\u524d\u7f00 prefix \u5f00\u5934\u7684\u952e key \u7684\u503c\u7684\u603b\u548c\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a [\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"] [[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]] \u8f93\u51fa\uff1a [null, null, 3, null, 5] \u89e3\u91ca\uff1a MapSum mapSum = new MapSum(); mapSum.insert(\"apple\", 3); mapSum.sum(\"ap\"); // return 3 (apple = 3) mapSum.insert(\"app\", 2); mapSum.sum(\"ap\"); // return 5 (apple + app = 3 + 2 = 5) \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/map-sum-pairs \u601d\u8def \u00b6 \u6309\u7167\u9898\u76ee\u7684\u8981\u6c42\uff0c\u548c\u5b9e\u73b0\u524d\u7f00\u6811\u7684\u505a\u6cd5\u5dee\u4e0d\u591a\uff0c\u5c31\u662f\u5728\u539f\u6709\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u4e00\u4e2avalue\u503c\u6765\u8bb0\u5f55\uff08\u5f53isend\u4e3atrue\u7684\u65f6\u5019\uff0c\u8bb0\u4e0b\u6b64\u65f6\u8282\u70b9\u7684value\u503c\uff09 \u4ee3\u7801 \u00b6 class MapSum { private : MapSum * next [ 26 ]; int value ; bool isend ; //\u7528\u6765\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u662f\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\uff0c\u5373\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u8fd9\u4e2akey\u5b58\u5728\u4e86 int DFS ( MapSum * root ){ if ( ! root ) return 0 ; int sum = 0 ; //\u5b9a\u4e49\u4e00\u4e2a\u603b\u548c\u53d8\u91cf\u7528\u6765\u8bb0\u5f55 if ( root -> isend ) sum += root -> value ; //\u5982\u679c\u5f53\u524d\u7684\u524d\u7f00\u6070\u597d\u662f\u67d0\u4e2a\u5355\u8bcd\uff0c\u90a3\u4e48\u5c31\u52a0\u4e0a\u5b83\u7684value //\u7ee7\u7eed\u4ee5\u8fd9\u4e2a\u524d\u7f00\u7684\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386 for ( auto cur : root -> next ){ sum += DFS ( cur ); } return sum ; } public : /** Initialize your data structure here. */ MapSum () { value = 0 ; isend = false ; memset ( next , 0 , sizeof ( next )); } void insert ( string key , int val ) { MapSum * node = this ; for ( auto c : key ){ if ( node -> next [ c - 'a' ] == nullptr ) node -> next [ c - 'a' ] = new MapSum ; node = node -> next [ c - 'a' ]; } node -> isend = true ; node -> value = val ; //\u76f8\u6bd4\u5b9e\u73b0Trie\u6811\uff0c\u8fd9\u91cc\u589e\u52a0\u4e86\u4e00\u4e2a\u66f4\u65b0value\u7684\u64cd\u4f5c } int sum ( string prefix ) { MapSum * node = this ; for ( auto c : prefix ){ if ( ! node -> next [ c - 'a' ]) return 0 ; node = node -> next [ c - 'a' ]; } return DFS ( node ); } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 insert sum \u65f6\u95f4\u590d\u6742\u5ea6 O(N) O(N) \u7a7a\u95f4\u590d\u6742\u5ea6 O(N) O(logN)","title":"leetcode677-\u952e\u503c\u6620\u5c04"},{"location":"%E5%89%8D%E7%BC%80%E6%A0%91/leetcode677-%E9%94%AE%E5%80%BC%E6%98%A0%E5%B0%84/#_1","text":"\u5b9e\u73b0\u4e00\u4e2a MapSum \u7c7b\uff0c\u652f\u6301\u4e24\u4e2a\u65b9\u6cd5\uff0cinsert \u548c sum\uff1a MapSum() \u521d\u59cb\u5316 MapSum \u5bf9\u8c61 void insert(String key, int val) \u63d2\u5165 key-val \u952e\u503c\u5bf9\uff0c\u5b57\u7b26\u4e32\u8868\u793a\u952e key \uff0c\u6574\u6570\u8868\u793a\u503c val \u3002\u5982\u679c\u952e key \u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u539f\u6765\u7684\u952e\u503c\u5bf9\u5c06\u88ab\u66ff\u4ee3\u6210\u65b0\u7684\u952e\u503c\u5bf9\u3002 int sum(string prefix) \u8fd4\u56de\u6240\u6709\u4ee5\u8be5\u524d\u7f00 prefix \u5f00\u5934\u7684\u952e key \u7684\u503c\u7684\u603b\u548c\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a [\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"] [[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]] \u8f93\u51fa\uff1a [null, null, 3, null, 5] \u89e3\u91ca\uff1a MapSum mapSum = new MapSum(); mapSum.insert(\"apple\", 3); mapSum.sum(\"ap\"); // return 3 (apple = 3) mapSum.insert(\"app\", 2); mapSum.sum(\"ap\"); // return 5 (apple + app = 3 + 2 = 5)","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%89%8D%E7%BC%80%E6%A0%91/leetcode677-%E9%94%AE%E5%80%BC%E6%98%A0%E5%B0%84/#_2","text":"https://leetcode-cn.com/problems/map-sum-pairs","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%89%8D%E7%BC%80%E6%A0%91/leetcode677-%E9%94%AE%E5%80%BC%E6%98%A0%E5%B0%84/#_3","text":"\u6309\u7167\u9898\u76ee\u7684\u8981\u6c42\uff0c\u548c\u5b9e\u73b0\u524d\u7f00\u6811\u7684\u505a\u6cd5\u5dee\u4e0d\u591a\uff0c\u5c31\u662f\u5728\u539f\u6709\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u4e00\u4e2avalue\u503c\u6765\u8bb0\u5f55\uff08\u5f53isend\u4e3atrue\u7684\u65f6\u5019\uff0c\u8bb0\u4e0b\u6b64\u65f6\u8282\u70b9\u7684value\u503c\uff09","title":"\u601d\u8def"},{"location":"%E5%89%8D%E7%BC%80%E6%A0%91/leetcode677-%E9%94%AE%E5%80%BC%E6%98%A0%E5%B0%84/#_4","text":"class MapSum { private : MapSum * next [ 26 ]; int value ; bool isend ; //\u7528\u6765\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u662f\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\uff0c\u5373\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u8fd9\u4e2akey\u5b58\u5728\u4e86 int DFS ( MapSum * root ){ if ( ! root ) return 0 ; int sum = 0 ; //\u5b9a\u4e49\u4e00\u4e2a\u603b\u548c\u53d8\u91cf\u7528\u6765\u8bb0\u5f55 if ( root -> isend ) sum += root -> value ; //\u5982\u679c\u5f53\u524d\u7684\u524d\u7f00\u6070\u597d\u662f\u67d0\u4e2a\u5355\u8bcd\uff0c\u90a3\u4e48\u5c31\u52a0\u4e0a\u5b83\u7684value //\u7ee7\u7eed\u4ee5\u8fd9\u4e2a\u524d\u7f00\u7684\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386 for ( auto cur : root -> next ){ sum += DFS ( cur ); } return sum ; } public : /** Initialize your data structure here. */ MapSum () { value = 0 ; isend = false ; memset ( next , 0 , sizeof ( next )); } void insert ( string key , int val ) { MapSum * node = this ; for ( auto c : key ){ if ( node -> next [ c - 'a' ] == nullptr ) node -> next [ c - 'a' ] = new MapSum ; node = node -> next [ c - 'a' ]; } node -> isend = true ; node -> value = val ; //\u76f8\u6bd4\u5b9e\u73b0Trie\u6811\uff0c\u8fd9\u91cc\u589e\u52a0\u4e86\u4e00\u4e2a\u66f4\u65b0value\u7684\u64cd\u4f5c } int sum ( string prefix ) { MapSum * node = this ; for ( auto c : prefix ){ if ( ! node -> next [ c - 'a' ]) return 0 ; node = node -> next [ c - 'a' ]; } return DFS ( node ); } };","title":"\u4ee3\u7801"},{"location":"%E5%89%8D%E7%BC%80%E6%A0%91/leetcode677-%E9%94%AE%E5%80%BC%E6%98%A0%E5%B0%84/#_5","text":"insert sum \u65f6\u95f4\u590d\u6742\u5ea6 O(N) O(N) \u7a7a\u95f4\u590d\u6742\u5ea6 O(N) O(logN)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode1052-%E7%88%B1%E7%94%9F%E6%B0%94%E7%9A%84%E4%B9%A6%E5%BA%97%E8%80%81%E6%9D%BF/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u4eca\u5929\uff0c\u4e66\u5e97\u8001\u677f\u6709\u4e00\u5bb6\u5e97\u6253\u7b97\u8bd5\u8425\u4e1a customers.length \u5206\u949f\u3002\u6bcf\u5206\u949f\u90fd\u6709\u4e00\u4e9b\u987e\u5ba2\uff08customers[i]\uff09\u4f1a\u8fdb\u5165\u4e66\u5e97\uff0c\u6240\u6709\u8fd9\u4e9b\u987e\u5ba2\u90fd\u4f1a\u5728\u90a3\u4e00\u5206\u949f\u7ed3\u675f\u540e\u79bb\u5f00\u3002 \u5728\u67d0\u4e9b\u65f6\u5019\uff0c\u4e66\u5e97\u8001\u677f\u4f1a\u751f\u6c14\u3002 \u5982\u679c\u4e66\u5e97\u8001\u677f\u5728\u7b2c i \u5206\u949f\u751f\u6c14\uff0c\u90a3\u4e48 grumpy[i] = 1\uff0c\u5426\u5219 grumpy[i] = 0\u3002 \u5f53\u4e66\u5e97\u8001\u677f\u751f\u6c14\u65f6\uff0c\u90a3\u4e00\u5206\u949f\u7684\u987e\u5ba2\u5c31\u4f1a\u4e0d\u6ee1\u610f\uff0c\u4e0d\u751f\u6c14\u5219\u4ed6\u4eec\u662f\u6ee1\u610f\u7684\u3002 \u4e66\u5e97\u8001\u677f\u77e5\u9053\u4e00\u4e2a\u79d8\u5bc6\u6280\u5de7\uff0c\u80fd\u6291\u5236\u81ea\u5df1\u7684\u60c5\u7eea\uff0c\u53ef\u4ee5\u8ba9\u81ea\u5df1\u8fde\u7eed X \u5206\u949f\u4e0d\u751f\u6c14\uff0c\u4f46\u5374\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002 \u8bf7\u4f60\u8fd4\u56de\u8fd9\u4e00\u5929\u8425\u4e1a\u4e0b\u6765\uff0c\u6700\u591a\u6709\u591a\u5c11\u5ba2\u6237\u80fd\u591f\u611f\u5230\u6ee1\u610f\u7684\u6570\u91cf\u3002 \u8f93\u5165\uff1acustomers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3 \u8f93\u51fa\uff1a16 \u89e3\u91ca\uff1a \u4e66\u5e97\u8001\u677f\u5728\u6700\u540e 3 \u5206\u949f\u4fdd\u6301\u51b7\u9759\u3002 \u611f\u5230\u6ee1\u610f\u7684\u6700\u5927\u5ba2\u6237\u6570\u91cf = 1 + 1 + 1 + 1 + 7 + 5 = 16. \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/grumpy-bookstore-owner \u601d\u8def \u00b6 \u6ed1\u52a8\u7a97\u53e3 grump\u6570\u7ec4\u4ee3\u8868\u7684\u662f\u8001\u677f\u751f\u4e0d\u751f\u6c14\uff0c\u5982\u679c\u8001\u677f\u751f\u6c14\uff0c\u987e\u5ba2\u5c31\u4e0d\u9ad8\u5174\uff1b\u53cd\u4e4b\u987e\u5ba2\u9ad8\u5174\u3002\u6240\u4ee5 \u5ba2\u6237\u6570\u91cf\u4e2d\u80af\u5b9a\u8981\u5305\u542b\u8001\u677f\u4e0d\u751f\u6c14\u7684\u65f6\u5019\u987e\u5ba2\u7684\u6570\u91cf \uff0c\u7136\u540e\u8001\u677f\u662f\u7531\u4fdd\u6301\u51b7\u9759\u7684\u6280\u80fd\u7684\uff0c\u8981\u6c42\u51fa\u80fd\u8fbe\u5230\u6700\u5927\u5ba2\u6237\u6570\u91cf\u7684\u6548\u679c\uff0c\u5fc5\u987b\u8981\u5c06\u8fd9\u4e2a \u4fdd\u6301\u51b7\u9759 \u7684\u6280\u80fd \u7528\u5728\u5200\u5203 \u4e0a\uff0c\u90a3\u8fd9\u4e2a\u5200\u5203\u662f\u4ec0\u4e48\u5462\uff1f\u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\u8fd9\u4e2a\u6280\u80fd\u80af\u5b9a\u8981\u5728 \u4eba\u6570\u6700\u591a\u7684\u65f6\u95f4\u53d1\u52a8 \u624d\u884c\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u6700\u591a\u7684\u4eba\u6ee1\u610f\uff0c\u5ba2\u6237\u4e0d\u6d41\u5931\u561b\u3002\u6240\u4ee5\u8fd9\u4e2a\u624d\u662f\u51b3\u5b9a\u4eba\u6570\u6700\u591a\u7684\u5173\u952e\uff0c\u53ea\u6709\u5c06\u5c3d\u53ef\u80fd\u591a\u7684\u4e0d\u6ee1\u610f\u7684\u5ba2\u6237\u8f6c\u53d8\u4e3a\u6ee1\u610f\u7684\u5ba2\u6237\uff0c\u8fd9\u6837\u624d\u80fd\u8fbe\u5230\u6700\u591a\u6ee1\u610f\u7684\u5ba2\u6237\u3002 \u6240\u4ee5\u53ef\u4ee5\u5c06 \u5ba2\u6237\u4e0d\u6ee1\u610f\u7684\u4eba\u6570 \u653e\u5728\u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3a X \uff0c\u5728\u7a97\u53e3\u5411\u53f3\u6ed1\u52a8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f9d\u6b21\u8ba1\u7b97\u6bcf\u4e2a\u7a97\u53e3\u4e2d\u6240\u6709\u503c\u7684\u548c\uff0c\u540c\u65f6\u8bb0\u5f55\u4e0b\u5de6\u53f3\u7a97\u53e3\u7684\u6700\u5927\u503c\uff0c\u8fd9\u4e2a \u6700\u5927\u503c\u662f\u8001\u677f\u53ef\u4ee5\u53d1\u52a8\u6280\u80fd\u8ba9\u6700\u591a\u5ba2\u6237\u6ee1\u610f\u7684\u6570\u91cf \uff0c\u6700\u7ec8\u7684 \u6700\u5927\u5ba2\u6237\u6ee1\u610f\u6570\u91cf=\u51b7\u9759\u6280\u80fd\u53d1\u52a8\u540e\u6ee1\u610f\u7684\u6700\u5927\u5ba2\u6237\u6570\u91cf + \u8001\u677f\u5f00\u5fc3\u7684\u65f6\u5019\u6240\u6709\u5ba2\u6237\u7684\u6570\u91cf \u4ee3\u7801 \u00b6 class Solution { public : int maxSatisfied ( vector < int >& customers , vector < int >& grumpy , int X ) { int res = 0 ; for ( int i = 0 ; i < customers . size (); i ++ ){ if ( ! grumpy [ i ]) res += customers [ i ]; else grumpy [ i ] = customers [ i ]; } //tempSum\u7528\u6765\u8bb0\u5f55\u6bcf\u4e2a\u7a97\u53e3\u4e2d\u7684\u503c\u7684\u548c\uff0cMax\u8bb0\u5f55\u7684\u662f\u6240\u6709\u7a97\u53e3\u4e2d\u6700\u5927\u7684\u503c int tempSum = 0 , Max = 0 ; for ( int i = 0 ; i < X ; i ++ ) tempSum += grumpy [ i ]; Max = tempSum ; //\u7a97\u53e3\u540e\u79fb\uff0c\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u7a97\u53e3\u7684\u603b\u5171\u503c\uff0c\u7136\u540e\u53d6\u6700\u5927\u7684\u5373\u53ef\uff0c\u6700\u5927\u7684\u5c31\u662f\u8001\u677f\u53d1\u52a8\u6280\u80fd\u7684\u65f6\u673a for ( int i = X ; i < grumpy . size (); i ++ ){ tempSum -= grumpy [ i - X ]; tempSum += grumpy [ i ]; if ( tempSum > Max ) Max = tempSum ; } return res + Max ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"leetcode1052-\u7231\u751f\u6c14\u7684\u4e66\u5e97\u8001\u677f"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode1052-%E7%88%B1%E7%94%9F%E6%B0%94%E7%9A%84%E4%B9%A6%E5%BA%97%E8%80%81%E6%9D%BF/#_1","text":"\u4eca\u5929\uff0c\u4e66\u5e97\u8001\u677f\u6709\u4e00\u5bb6\u5e97\u6253\u7b97\u8bd5\u8425\u4e1a customers.length \u5206\u949f\u3002\u6bcf\u5206\u949f\u90fd\u6709\u4e00\u4e9b\u987e\u5ba2\uff08customers[i]\uff09\u4f1a\u8fdb\u5165\u4e66\u5e97\uff0c\u6240\u6709\u8fd9\u4e9b\u987e\u5ba2\u90fd\u4f1a\u5728\u90a3\u4e00\u5206\u949f\u7ed3\u675f\u540e\u79bb\u5f00\u3002 \u5728\u67d0\u4e9b\u65f6\u5019\uff0c\u4e66\u5e97\u8001\u677f\u4f1a\u751f\u6c14\u3002 \u5982\u679c\u4e66\u5e97\u8001\u677f\u5728\u7b2c i \u5206\u949f\u751f\u6c14\uff0c\u90a3\u4e48 grumpy[i] = 1\uff0c\u5426\u5219 grumpy[i] = 0\u3002 \u5f53\u4e66\u5e97\u8001\u677f\u751f\u6c14\u65f6\uff0c\u90a3\u4e00\u5206\u949f\u7684\u987e\u5ba2\u5c31\u4f1a\u4e0d\u6ee1\u610f\uff0c\u4e0d\u751f\u6c14\u5219\u4ed6\u4eec\u662f\u6ee1\u610f\u7684\u3002 \u4e66\u5e97\u8001\u677f\u77e5\u9053\u4e00\u4e2a\u79d8\u5bc6\u6280\u5de7\uff0c\u80fd\u6291\u5236\u81ea\u5df1\u7684\u60c5\u7eea\uff0c\u53ef\u4ee5\u8ba9\u81ea\u5df1\u8fde\u7eed X \u5206\u949f\u4e0d\u751f\u6c14\uff0c\u4f46\u5374\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002 \u8bf7\u4f60\u8fd4\u56de\u8fd9\u4e00\u5929\u8425\u4e1a\u4e0b\u6765\uff0c\u6700\u591a\u6709\u591a\u5c11\u5ba2\u6237\u80fd\u591f\u611f\u5230\u6ee1\u610f\u7684\u6570\u91cf\u3002 \u8f93\u5165\uff1acustomers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3 \u8f93\u51fa\uff1a16 \u89e3\u91ca\uff1a \u4e66\u5e97\u8001\u677f\u5728\u6700\u540e 3 \u5206\u949f\u4fdd\u6301\u51b7\u9759\u3002 \u611f\u5230\u6ee1\u610f\u7684\u6700\u5927\u5ba2\u6237\u6570\u91cf = 1 + 1 + 1 + 1 + 7 + 5 = 16.","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode1052-%E7%88%B1%E7%94%9F%E6%B0%94%E7%9A%84%E4%B9%A6%E5%BA%97%E8%80%81%E6%9D%BF/#_2","text":"https://leetcode-cn.com/problems/grumpy-bookstore-owner","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode1052-%E7%88%B1%E7%94%9F%E6%B0%94%E7%9A%84%E4%B9%A6%E5%BA%97%E8%80%81%E6%9D%BF/#_3","text":"\u6ed1\u52a8\u7a97\u53e3 grump\u6570\u7ec4\u4ee3\u8868\u7684\u662f\u8001\u677f\u751f\u4e0d\u751f\u6c14\uff0c\u5982\u679c\u8001\u677f\u751f\u6c14\uff0c\u987e\u5ba2\u5c31\u4e0d\u9ad8\u5174\uff1b\u53cd\u4e4b\u987e\u5ba2\u9ad8\u5174\u3002\u6240\u4ee5 \u5ba2\u6237\u6570\u91cf\u4e2d\u80af\u5b9a\u8981\u5305\u542b\u8001\u677f\u4e0d\u751f\u6c14\u7684\u65f6\u5019\u987e\u5ba2\u7684\u6570\u91cf \uff0c\u7136\u540e\u8001\u677f\u662f\u7531\u4fdd\u6301\u51b7\u9759\u7684\u6280\u80fd\u7684\uff0c\u8981\u6c42\u51fa\u80fd\u8fbe\u5230\u6700\u5927\u5ba2\u6237\u6570\u91cf\u7684\u6548\u679c\uff0c\u5fc5\u987b\u8981\u5c06\u8fd9\u4e2a \u4fdd\u6301\u51b7\u9759 \u7684\u6280\u80fd \u7528\u5728\u5200\u5203 \u4e0a\uff0c\u90a3\u8fd9\u4e2a\u5200\u5203\u662f\u4ec0\u4e48\u5462\uff1f\u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\u8fd9\u4e2a\u6280\u80fd\u80af\u5b9a\u8981\u5728 \u4eba\u6570\u6700\u591a\u7684\u65f6\u95f4\u53d1\u52a8 \u624d\u884c\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u6700\u591a\u7684\u4eba\u6ee1\u610f\uff0c\u5ba2\u6237\u4e0d\u6d41\u5931\u561b\u3002\u6240\u4ee5\u8fd9\u4e2a\u624d\u662f\u51b3\u5b9a\u4eba\u6570\u6700\u591a\u7684\u5173\u952e\uff0c\u53ea\u6709\u5c06\u5c3d\u53ef\u80fd\u591a\u7684\u4e0d\u6ee1\u610f\u7684\u5ba2\u6237\u8f6c\u53d8\u4e3a\u6ee1\u610f\u7684\u5ba2\u6237\uff0c\u8fd9\u6837\u624d\u80fd\u8fbe\u5230\u6700\u591a\u6ee1\u610f\u7684\u5ba2\u6237\u3002 \u6240\u4ee5\u53ef\u4ee5\u5c06 \u5ba2\u6237\u4e0d\u6ee1\u610f\u7684\u4eba\u6570 \u653e\u5728\u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3a X \uff0c\u5728\u7a97\u53e3\u5411\u53f3\u6ed1\u52a8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f9d\u6b21\u8ba1\u7b97\u6bcf\u4e2a\u7a97\u53e3\u4e2d\u6240\u6709\u503c\u7684\u548c\uff0c\u540c\u65f6\u8bb0\u5f55\u4e0b\u5de6\u53f3\u7a97\u53e3\u7684\u6700\u5927\u503c\uff0c\u8fd9\u4e2a \u6700\u5927\u503c\u662f\u8001\u677f\u53ef\u4ee5\u53d1\u52a8\u6280\u80fd\u8ba9\u6700\u591a\u5ba2\u6237\u6ee1\u610f\u7684\u6570\u91cf \uff0c\u6700\u7ec8\u7684 \u6700\u5927\u5ba2\u6237\u6ee1\u610f\u6570\u91cf=\u51b7\u9759\u6280\u80fd\u53d1\u52a8\u540e\u6ee1\u610f\u7684\u6700\u5927\u5ba2\u6237\u6570\u91cf + \u8001\u677f\u5f00\u5fc3\u7684\u65f6\u5019\u6240\u6709\u5ba2\u6237\u7684\u6570\u91cf","title":"\u601d\u8def"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode1052-%E7%88%B1%E7%94%9F%E6%B0%94%E7%9A%84%E4%B9%A6%E5%BA%97%E8%80%81%E6%9D%BF/#_4","text":"class Solution { public : int maxSatisfied ( vector < int >& customers , vector < int >& grumpy , int X ) { int res = 0 ; for ( int i = 0 ; i < customers . size (); i ++ ){ if ( ! grumpy [ i ]) res += customers [ i ]; else grumpy [ i ] = customers [ i ]; } //tempSum\u7528\u6765\u8bb0\u5f55\u6bcf\u4e2a\u7a97\u53e3\u4e2d\u7684\u503c\u7684\u548c\uff0cMax\u8bb0\u5f55\u7684\u662f\u6240\u6709\u7a97\u53e3\u4e2d\u6700\u5927\u7684\u503c int tempSum = 0 , Max = 0 ; for ( int i = 0 ; i < X ; i ++ ) tempSum += grumpy [ i ]; Max = tempSum ; //\u7a97\u53e3\u540e\u79fb\uff0c\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u7a97\u53e3\u7684\u603b\u5171\u503c\uff0c\u7136\u540e\u53d6\u6700\u5927\u7684\u5373\u53ef\uff0c\u6700\u5927\u7684\u5c31\u662f\u8001\u677f\u53d1\u52a8\u6280\u80fd\u7684\u65f6\u673a for ( int i = X ; i < grumpy . size (); i ++ ){ tempSum -= grumpy [ i - X ]; tempSum += grumpy [ i ]; if ( tempSum > Max ) Max = tempSum ; } return res + Max ; } };","title":"\u4ee3\u7801"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode1052-%E7%88%B1%E7%94%9F%E6%B0%94%E7%9A%84%E4%B9%A6%E5%BA%97%E8%80%81%E6%9D%BF/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode239-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/","text":"\u5728\u8fdb\u5165leetcode\u9898\u76ee\u4e4b\u524d\u5148\u6765\u4e2aAcwing\u7684\u9898\u76ee\u70ed\u4e2a\u8eab\uff1a\u9898\u76ee\u6765\u81eahttps:// www.acwing.com/ \uff0c\u7531\u5317\u5927yxc\u5927\u4f6c\u5efa\u7684\u5237\u9898\u7f51\u7ad9\uff0c\u975e\u5e38Nice \u7ed9\u5b9a\u4e00\u4e2a\u5927\u5c0f\u4e3a n \u2264 10^{6} 10^{6} \u7684\u6570\u7ec4\u3002 \u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a k \u7684\u6ed1\u52a8\u7a97\u53e3\uff0c\u5b83\u4ece\u6570\u7ec4\u7684\u6700\u5de6\u8fb9\u79fb\u52a8\u5230\u6700\u53f3\u8fb9\u3002 \u60a8\u53ea\u80fd\u5728\u7a97\u53e3\u4e2d\u770b\u5230 k \u4e2a\u6570\u5b57\u3002 \u6bcf\u6b21\u6ed1\u52a8\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a \u8be5\u6570\u7ec4\u4e3a [1 3 -1 -3 5 3 6 7] \uff0ck\u4e3a3\u3002\u8f93\u5165\u683c\u5f0f \u8f93\u5165\u5305\u542b\u4e24\u884c\u3002 \u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 n \u548c k \uff0c\u5206\u522b\u4ee3\u8868\u6570\u7ec4\u957f\u5ea6\u548c\u6ed1\u52a8\u7a97\u53e3\u7684\u957f\u5ea6\u3002 \u7b2c\u4e8c\u884c\u6709 n \u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u6570\u7ec4\u7684\u5177\u4f53\u6570\u503c\u3002 \u540c\u884c\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\u3002 \u8f93\u51fa\u683c\u5f0f \u00b6 \u8f93\u51fa\u5305\u542b\u4e24\u4e2a\u3002 \u7b2c\u4e00\u884c\u8f93\u51fa\uff0c\u4ece\u5de6\u81f3\u53f3\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5c0f\u503c\u3002 \u7b2c\u4e8c\u884c\u8f93\u51fa\uff0c\u4ece\u5de6\u81f3\u53f3\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\u3002 \u8f93\u5165\u6837\u4f8b\uff1a \u00b6 8 3 1 3 -1 -3 5 3 6 7 \u8f93\u51fa\u6837\u4f8b\uff1a \u00b6 -1 -3 -3 -3 3 3 3 3 5 5 6 7 \u4ee3\u7801 \u00b6 #include <iostream> using namespace std ; const int maxn = 1000010 ; //a\u6570\u7ec4\u5b58\u503c\uff0cq\u6570\u7ec4\u5b58\u4e0b\u6807 int a [ maxn ], q [ maxn ]; int n , k ; int main (){ cin >> n >> k ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; int h = 0 , t = -1 ; for ( int i = 0 ; i < n ; i ++ ){ if ( h <= t && i - k + 1 > q [ h ]) h ++ ; while ( h <= t && a [ q [ t ]] >= a [ i ]) t -- ; q [ ++ t ] = i ; if ( i >= k - 1 ) cout << a [ q [ h ]] << \" \" ; } cout << endl ; h = 0 , t = -1 ; for ( int i = 0 ; i < n ; i ++ ){ if ( h <= t && i - k + 1 > q [ h ]) h ++ ; while ( h <= t && a [ q [ t ]] <= a [ i ]) t -- ; q [ ++ t ] = i ; if ( i >= k - 1 ) cout << a [ q [ h ]] << \" \" ; } return 0 ; } \u6734\u7d20\u7684\u505a\u6cd5\uff1a \u5bf9\u7a97\u53e3\u4e2d\u7684K\u4e2a\u5143\u7d20\u8fdb\u884c\u904d\u5386\uff0c\u627e\u5230\u6700\u503c\u5143\u7d20\uff1b\u7136\u540e\u6bcf\u79fb\u52a8\u4e00\u6b21\u7a97\u53e3\uff0c\u904d\u5386\u4e00\u6b21\u7a97\u53e3\u5185\u7684\u5143\u7d20\uff0c\u5f97\u5230\u6700\u503c\u3002\u8fd9\u6837\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662fO(KN)\uff0c\u5c31\u4e0d\u662f\u7ebf\u6027\u7684\u590d\u6742\u5ea6\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6bd4\u8f83\u9ad8\u3002 \u4f7f\u7528\u4e00\u4e2a \u5355\u8c03\u961f\u5217 \uff0c\u540c\u65f6\u53c8\u662f\u4e00\u4e2a \u53cc\u7aef\u961f\u5217 \uff0c\u5b9e\u73b0\u6c42 \u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u503c \u3002\u5927\u4f53\u601d\u8def\u5c31\u662f\u7528\u4e00\u4e2a\u961f\u5217\u6765\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4\u5143\u7d20\u4e0b\u6807\uff0c\u5e76\u4e14\u8fd9\u4e2a \u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e0b\u6807\u6240\u5bf9\u5e94\u7684\u503c \u662f \u5355\u8c03\u7684 \uff0c\u8981\u627e\u7a97\u53e3\u6700\u503c\u5143\u7d20\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981 \u8f93\u51fa\u961f\u5934 \u5373\u53ef. \u5982\u679c\u8981\u5bfb\u627e\u7a97\u53e3\u7684\u6700\u5927\u503c\uff0c\u90a3\u4e48\u5c06\u5f53\u524d \u961f\u5c3e\u5143\u7d20\u4e0b\u6807\u5bf9\u5e94\u7684\u503c \u5c0f\u4e8e \u5f53\u524d\u904d\u5386\u5230\u7684\u503c \uff0c\u90a3\u4e48\u5f53\u524d\u961f\u5217\u4e2d\u7684\u4e0b\u6807\u5c31\u8981 \u8ba9\u4f4d \uff0c\u8ba9\u5f53\u524d\u904d\u5386\u5230\u7684\u8fd9\u4e2a\u5143\u7d20\u4e0b\u6807\u8fdb\u961f\u5217\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u5bfb\u627e\u6700\u5927\u503c\uff0c\u961f\u5c3e\u5143\u7d20\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u662f\u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u5927\u503c\u7684\uff0c\u56e0\u4e3a\u540e\u9762\u8fd9\u4e2a\u66f4\u5927\u7684\u8fdb\u6765\u4e86\u3002 \u5982\u679c\u8981\u5bfb\u627e\u7a97\u53e3\u7684\u6700\u5927\u503c\uff0c\u90a3\u4e48\u5c06\u5f53\u524d \u961f\u5c3e\u5143\u7d20\u4e0b\u6807\u5bf9\u5e94\u7684\u503c \u5927\u4e8e \u5f53\u524d\u904d\u5386\u5230\u7684\u503c \uff0c\u90a3\u4e48\u5f53\u524d\u961f\u5217\u4e2d\u7684\u4e0b\u6807\u5c31\u8981 \u8ba9\u4f4d \uff0c\u8ba9\u5f53\u524d\u904d\u5386\u5230\u7684\u8fd9\u4e2a\u5143\u7d20\u4e0b\u6807\u8fdb\u961f\u5217\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u5bfb\u627e\u6700\u5c0f\u503c\uff0c\u961f\u5c3e\u5143\u7d20\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u662f\u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u5c0f\u503c\u7684\uff0c\u56e0\u4e3a\u540e\u9762\u8fd9\u4e2a\u66f4\u5c0f\u7684\u8fdb\u6765\u4e86\u3002 \u7b97\u6cd5\u6d41\u7a0b\u6f14\u793a\uff1a \u4e00\u5f00\u59cb\uff0c \u4e0b\u9762\u662fleetcode\u7684\u9898\u76ee\uff1a \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 nums\uff0c\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a k \u7684\u6ed1\u52a8\u7a97\u53e3\u4ece\u6570\u7ec4\u7684\u6700\u5de6\u4fa7\u79fb\u52a8\u5230\u6570\u7ec4\u7684\u6700\u53f3\u4fa7\u3002\u4f60\u53ea\u53ef\u4ee5\u770b\u5230\u5728\u6ed1\u52a8\u7a97\u53e3\u5185\u7684 k \u4e2a\u6570\u5b57\u3002\u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u53ea\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\u3002 \u8fd4\u56de\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u5728\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u6b64\u9898\u5417\uff1f \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/sliding-window-maximum \u601d\u8def \u00b6 \u5176\u5b9e\u548c\u4e0a\u9762\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\uff0c\u5728Leetcode\u4e0a\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528C++ STL\u5e93\u7684deque\u53cc\u7aef\u961f\u5217\u6765\u8fdb\u884c\u64cd\u4f5c \u4ee3\u7801 \u00b6 class Solution { public : vector < int > maxSlidingWindow ( vector < int >& nums , int k ) { //\u7ed3\u679c\u6570\u7ec4 vector < int > res ; //\u961f\u5217\u5b58\u4e0b\u6807 deque < int > q ; for ( int i = 0 ; i < nums . size (); i ++ ){ if ( q . size () && i - k + 1 > q . front ()) q . pop_front (); while ( q . size () && nums [ q . back ()] <= nums [ i ]) q . pop_back (); q . push_back ( i ); if ( i >= k - 1 ) res . push_back ( nums [ q . front ()]); } return res ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff1b \u6ce8\u610f\u6bcf\u6b21\u51fa\u961f\u7684\u65f6\u5019\u627e\u5230\u6700\u503c\u5143\u7d20\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u53ea\u4e0d\u8fc7\u8981\u627e\u5230N\u4e2a\u6700\u503c\u5143\u7d20\uff0c\u6240\u4ee5\u624d\u662fO(N)","title":"leetcode239-\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode239-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/#_1","text":"\u8f93\u51fa\u5305\u542b\u4e24\u4e2a\u3002 \u7b2c\u4e00\u884c\u8f93\u51fa\uff0c\u4ece\u5de6\u81f3\u53f3\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5c0f\u503c\u3002 \u7b2c\u4e8c\u884c\u8f93\u51fa\uff0c\u4ece\u5de6\u81f3\u53f3\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\u3002","title":"\u8f93\u51fa\u683c\u5f0f"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode239-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/#_2","text":"8 3 1 3 -1 -3 5 3 6 7","title":"\u8f93\u5165\u6837\u4f8b\uff1a"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode239-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/#_3","text":"-1 -3 -3 -3 3 3 3 3 5 5 6 7","title":"\u8f93\u51fa\u6837\u4f8b\uff1a"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode239-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/#_4","text":"#include <iostream> using namespace std ; const int maxn = 1000010 ; //a\u6570\u7ec4\u5b58\u503c\uff0cq\u6570\u7ec4\u5b58\u4e0b\u6807 int a [ maxn ], q [ maxn ]; int n , k ; int main (){ cin >> n >> k ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; int h = 0 , t = -1 ; for ( int i = 0 ; i < n ; i ++ ){ if ( h <= t && i - k + 1 > q [ h ]) h ++ ; while ( h <= t && a [ q [ t ]] >= a [ i ]) t -- ; q [ ++ t ] = i ; if ( i >= k - 1 ) cout << a [ q [ h ]] << \" \" ; } cout << endl ; h = 0 , t = -1 ; for ( int i = 0 ; i < n ; i ++ ){ if ( h <= t && i - k + 1 > q [ h ]) h ++ ; while ( h <= t && a [ q [ t ]] <= a [ i ]) t -- ; q [ ++ t ] = i ; if ( i >= k - 1 ) cout << a [ q [ h ]] << \" \" ; } return 0 ; } \u6734\u7d20\u7684\u505a\u6cd5\uff1a \u5bf9\u7a97\u53e3\u4e2d\u7684K\u4e2a\u5143\u7d20\u8fdb\u884c\u904d\u5386\uff0c\u627e\u5230\u6700\u503c\u5143\u7d20\uff1b\u7136\u540e\u6bcf\u79fb\u52a8\u4e00\u6b21\u7a97\u53e3\uff0c\u904d\u5386\u4e00\u6b21\u7a97\u53e3\u5185\u7684\u5143\u7d20\uff0c\u5f97\u5230\u6700\u503c\u3002\u8fd9\u6837\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662fO(KN)\uff0c\u5c31\u4e0d\u662f\u7ebf\u6027\u7684\u590d\u6742\u5ea6\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6bd4\u8f83\u9ad8\u3002 \u4f7f\u7528\u4e00\u4e2a \u5355\u8c03\u961f\u5217 \uff0c\u540c\u65f6\u53c8\u662f\u4e00\u4e2a \u53cc\u7aef\u961f\u5217 \uff0c\u5b9e\u73b0\u6c42 \u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u503c \u3002\u5927\u4f53\u601d\u8def\u5c31\u662f\u7528\u4e00\u4e2a\u961f\u5217\u6765\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4\u5143\u7d20\u4e0b\u6807\uff0c\u5e76\u4e14\u8fd9\u4e2a \u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e0b\u6807\u6240\u5bf9\u5e94\u7684\u503c \u662f \u5355\u8c03\u7684 \uff0c\u8981\u627e\u7a97\u53e3\u6700\u503c\u5143\u7d20\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981 \u8f93\u51fa\u961f\u5934 \u5373\u53ef. \u5982\u679c\u8981\u5bfb\u627e\u7a97\u53e3\u7684\u6700\u5927\u503c\uff0c\u90a3\u4e48\u5c06\u5f53\u524d \u961f\u5c3e\u5143\u7d20\u4e0b\u6807\u5bf9\u5e94\u7684\u503c \u5c0f\u4e8e \u5f53\u524d\u904d\u5386\u5230\u7684\u503c \uff0c\u90a3\u4e48\u5f53\u524d\u961f\u5217\u4e2d\u7684\u4e0b\u6807\u5c31\u8981 \u8ba9\u4f4d \uff0c\u8ba9\u5f53\u524d\u904d\u5386\u5230\u7684\u8fd9\u4e2a\u5143\u7d20\u4e0b\u6807\u8fdb\u961f\u5217\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u5bfb\u627e\u6700\u5927\u503c\uff0c\u961f\u5c3e\u5143\u7d20\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u662f\u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u5927\u503c\u7684\uff0c\u56e0\u4e3a\u540e\u9762\u8fd9\u4e2a\u66f4\u5927\u7684\u8fdb\u6765\u4e86\u3002 \u5982\u679c\u8981\u5bfb\u627e\u7a97\u53e3\u7684\u6700\u5927\u503c\uff0c\u90a3\u4e48\u5c06\u5f53\u524d \u961f\u5c3e\u5143\u7d20\u4e0b\u6807\u5bf9\u5e94\u7684\u503c \u5927\u4e8e \u5f53\u524d\u904d\u5386\u5230\u7684\u503c \uff0c\u90a3\u4e48\u5f53\u524d\u961f\u5217\u4e2d\u7684\u4e0b\u6807\u5c31\u8981 \u8ba9\u4f4d \uff0c\u8ba9\u5f53\u524d\u904d\u5386\u5230\u7684\u8fd9\u4e2a\u5143\u7d20\u4e0b\u6807\u8fdb\u961f\u5217\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u5bfb\u627e\u6700\u5c0f\u503c\uff0c\u961f\u5c3e\u5143\u7d20\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u662f\u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u5c0f\u503c\u7684\uff0c\u56e0\u4e3a\u540e\u9762\u8fd9\u4e2a\u66f4\u5c0f\u7684\u8fdb\u6765\u4e86\u3002 \u7b97\u6cd5\u6d41\u7a0b\u6f14\u793a\uff1a \u4e00\u5f00\u59cb\uff0c \u4e0b\u9762\u662fleetcode\u7684\u9898\u76ee\uff1a","title":"\u4ee3\u7801"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode239-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/#_5","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 nums\uff0c\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a k \u7684\u6ed1\u52a8\u7a97\u53e3\u4ece\u6570\u7ec4\u7684\u6700\u5de6\u4fa7\u79fb\u52a8\u5230\u6570\u7ec4\u7684\u6700\u53f3\u4fa7\u3002\u4f60\u53ea\u53ef\u4ee5\u770b\u5230\u5728\u6ed1\u52a8\u7a97\u53e3\u5185\u7684 k \u4e2a\u6570\u5b57\u3002\u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u53ea\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\u3002 \u8fd4\u56de\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u5728\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u6b64\u9898\u5417\uff1f","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode239-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/#_6","text":"https://leetcode-cn.com/problems/sliding-window-maximum","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode239-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/#_7","text":"\u5176\u5b9e\u548c\u4e0a\u9762\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\uff0c\u5728Leetcode\u4e0a\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528C++ STL\u5e93\u7684deque\u53cc\u7aef\u961f\u5217\u6765\u8fdb\u884c\u64cd\u4f5c","title":"\u601d\u8def"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode239-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/#_8","text":"class Solution { public : vector < int > maxSlidingWindow ( vector < int >& nums , int k ) { //\u7ed3\u679c\u6570\u7ec4 vector < int > res ; //\u961f\u5217\u5b58\u4e0b\u6807 deque < int > q ; for ( int i = 0 ; i < nums . size (); i ++ ){ if ( q . size () && i - k + 1 > q . front ()) q . pop_front (); while ( q . size () && nums [ q . back ()] <= nums [ i ]) q . pop_back (); q . push_back ( i ); if ( i >= k - 1 ) res . push_back ( nums [ q . front ()]); } return res ; } };","title":"\u4ee3\u7801"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode239-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/#_9","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff1b \u6ce8\u610f\u6bcf\u6b21\u51fa\u961f\u7684\u65f6\u5019\u627e\u5230\u6700\u503c\u5143\u7d20\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u53ea\u4e0d\u8fc7\u8981\u627e\u5230N\u4e2a\u6700\u503c\u5143\u7d20\uff0c\u6240\u4ee5\u624d\u662fO(N)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode26-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728 \u539f\u5730 \u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u4fee\u6539\u8f93\u5165\u6570\u7ec4 \u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a nums = [0,0,1,1,1,2,2,3,3,4], \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 5, \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 0, 1, 2, 3, 4\u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array \u601d\u8def \u00b6 \u5feb\u6162\u6307\u9488 \u8bbe\u7f6e\u4e00\u4e2a\u6162\u6307\u9488\u521d\u59cb\u5316\u4e0b\u6807\u4e3a0\uff0c\u4e00\u4e2a\u5feb\u6307\u9488\u521d\u59cb\u5316\u4e0b\u8868\u4e3a1\uff1b\u5feb\u6307\u9488\u8d1f\u8d23\u904d\u5386\u6570\u7ec4\uff0c\u6162\u6307\u9488\u8d1f\u8d23\u8bb0\u5f55\u54ea\u4e9b\u5143\u7d20\u9700\u8981\u4fdd\u7559\u4e0b\u6765\u3002 \u4ee3\u7801 \u00b6 class Solution { public : int removeDuplicates ( vector < int >& nums ) { if ( nums . size () == 0 ) return 0 ; int i = 0 , j = 1 ; for (; j < nums . size (); j ++ ){ if ( nums [ i ] != nums [ j ]){ i ++ ; nums [ i ] = nums [ j ]; } } return i + 1 ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"leetcode26-\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode26-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728 \u539f\u5730 \u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u4fee\u6539\u8f93\u5165\u6570\u7ec4 \u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a nums = [0,0,1,1,1,2,2,3,3,4], \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 5, \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 0, 1, 2, 3, 4\u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode26-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/#_2","text":"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode26-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/#_3","text":"\u5feb\u6162\u6307\u9488 \u8bbe\u7f6e\u4e00\u4e2a\u6162\u6307\u9488\u521d\u59cb\u5316\u4e0b\u6807\u4e3a0\uff0c\u4e00\u4e2a\u5feb\u6307\u9488\u521d\u59cb\u5316\u4e0b\u8868\u4e3a1\uff1b\u5feb\u6307\u9488\u8d1f\u8d23\u904d\u5386\u6570\u7ec4\uff0c\u6162\u6307\u9488\u8d1f\u8d23\u8bb0\u5f55\u54ea\u4e9b\u5143\u7d20\u9700\u8981\u4fdd\u7559\u4e0b\u6765\u3002","title":"\u601d\u8def"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode26-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/#_4","text":"class Solution { public : int removeDuplicates ( vector < int >& nums ) { if ( nums . size () == 0 ) return 0 ; int i = 0 , j = 1 ; for (; j < nums . size (); j ++ ){ if ( nums [ i ] != nums [ j ]){ i ++ ; nums [ i ] = nums [ j ]; } } return i + 1 ; } };","title":"\u4ee3\u7801"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode26-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode34-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6309\u7167\u5347\u5e8f\u6392\u5217\u7684\u6574\u6570\u6570\u7ec4 nums\uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u503c target\u3002\u627e\u51fa\u7ed9\u5b9a\u76ee\u6807\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002 \u4f60\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662f O(log n) \u7ea7\u522b\u3002 \u5982\u679c\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u76ee\u6807\u503c\uff0c\u8fd4\u56de [-1, -1]\u3002 \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array \u601d\u8def \u00b6 \u4e8c\u5206\u67e5\u627e\uff0c\u5206\u4e24\u6b21\uff0c\u4e00\u6b21\u67e5\u627e\u8be5\u6570\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff1b\u7b2c\u4e8c\u6b21\u67e5\u627e\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e; \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u67e5\u627e\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u7684\u65f6\u5019\uff0cmid = ( l + r + 1) >> 1\uff0c\u4e0d\u80fd\u5fd8\u8bb0 +1,\u4e0d\u7136\u4f1a\u51fa\u73b0\u6b7b\u5faa\u73af \u4ee3\u7801 \u00b6 class Solution { public : vector < int > searchRange ( vector < int >& nums , int target ) { if ( nums . size () == 0 ) return { -1 , -1 }; vector < int > res ; //\u4ece\u5de6\u5f80\u53f3\u627e\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e int l = 0 , r = nums . size () - 1 ; while ( l < r ){ int mid = ( l + r ) >> 1 ; if ( nums [ mid ] >= target ) r = mid ; else l = mid + 1 ; } if ( nums [ l ] != target ) { res . push_back ( -1 ); res . push_back ( -1 ); return res ; } else res . push_back ( l ); //\u4ece\u53f3\u5f80\u5de6\u627e\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e l = 0 , r = nums . size () - 1 ; while ( l < r ){ int mid = ( l + r + 1 ) >> 1 ; if ( nums [ mid ] <= target ) l = mid ; else r = mid - 1 ; } res . push_back ( l ); return res ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"leetcode34-\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode34-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6309\u7167\u5347\u5e8f\u6392\u5217\u7684\u6574\u6570\u6570\u7ec4 nums\uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u503c target\u3002\u627e\u51fa\u7ed9\u5b9a\u76ee\u6807\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002 \u4f60\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662f O(log n) \u7ea7\u522b\u3002 \u5982\u679c\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u76ee\u6807\u503c\uff0c\u8fd4\u56de [-1, -1]\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode34-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/#_2","text":"https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode34-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/#_3","text":"\u4e8c\u5206\u67e5\u627e\uff0c\u5206\u4e24\u6b21\uff0c\u4e00\u6b21\u67e5\u627e\u8be5\u6570\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff1b\u7b2c\u4e8c\u6b21\u67e5\u627e\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e; \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u67e5\u627e\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u7684\u65f6\u5019\uff0cmid = ( l + r + 1) >> 1\uff0c\u4e0d\u80fd\u5fd8\u8bb0 +1,\u4e0d\u7136\u4f1a\u51fa\u73b0\u6b7b\u5faa\u73af","title":"\u601d\u8def"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode34-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/#_4","text":"class Solution { public : vector < int > searchRange ( vector < int >& nums , int target ) { if ( nums . size () == 0 ) return { -1 , -1 }; vector < int > res ; //\u4ece\u5de6\u5f80\u53f3\u627e\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e int l = 0 , r = nums . size () - 1 ; while ( l < r ){ int mid = ( l + r ) >> 1 ; if ( nums [ mid ] >= target ) r = mid ; else l = mid + 1 ; } if ( nums [ l ] != target ) { res . push_back ( -1 ); res . push_back ( -1 ); return res ; } else res . push_back ( l ); //\u4ece\u53f3\u5f80\u5de6\u627e\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e l = 0 , r = nums . size () - 1 ; while ( l < r ){ int mid = ( l + r + 1 ) >> 1 ; if ( nums [ mid ] <= target ) l = mid ; else r = mid - 1 ; } res . push_back ( l ); return res ; } };","title":"\u4ee3\u7801"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode34-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u503c\uff0c\u5728\u6570\u7ec4\u4e2d\u627e\u5230\u76ee\u6807\u503c\uff0c\u5e76\u8fd4\u56de\u5176\u7d22\u5f15\u3002\u5982\u679c\u76ee\u6807\u503c\u4e0d\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\uff0c\u8fd4\u56de\u5b83\u5c06\u4f1a\u88ab\u6309\u987a\u5e8f\u63d2\u5165\u7684\u4f4d\u7f6e\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u65e0\u91cd\u590d\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,3,5,6], 5 \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: [1,3,5,6], 2 \u8f93\u51fa: 1 \u793a\u4f8b 3: \u8f93\u5165: [1,3,5,6], 7 \u8f93\u51fa: 4 \u793a\u4f8b 4: \u8f93\u5165: [1,3,5,6], 0 \u8f93\u51fa: 0 \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/search-insert-position \u601d\u8def\u4e00(\u66b4\u529b\u89e3\u6cd5) \u00b6 \u76f4\u63a5\u904d\u5386\u6570\u7ec4\uff0c\u56e0\u4e3a\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u5bfb\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8etarget\u7684\u6570\uff0c\u8fd4\u56de\u5176\u4e0b\u6807\uff08\u5982\u679c\u662f\u521a\u597d\u7b49\u4e8etarget\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7684\u4e0b\u6807\u5c31\u662f\u8981\u8fd4\u56de\u7684\uff1b\u5982\u679c\u662f\u7b2c\u4e00\u4e2a\u5927\u4e8etarget\uff0c\u90a3\u4e48target\u5e94\u8be5\u63d2\u5165\u5728\u5f53\u524d\u8fd9\u4e2a\u6570\u7684\u4e0b\u6807\u4f4d\u7f6e\uff09 \u4ee3\u7801 \u00b6 class Solution { public : int searchInsert ( vector < int >& nums , int target ) { int i = 0 ; for (; i < nums . size (); i ++ ){ if ( nums [ i ] >= target ) return i ; } return i ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1) \u601d\u8def\u4e8c(\u4e8c\u5206\u6cd5) \u00b6 \u56e0\u4e3a\u9898\u76ee\u7ed9\u7684\u662f \u6709\u5e8f\u7684\u6570\u7ec4 \uff0c\u6240\u4ee5\u91c7\u7528 \u4e8c\u5206\u6cd5 \u627e\u6bd4\u8f83\u5408\u9002 \u4ee3\u7801 \u00b6 class Solution { public : int searchInsert ( vector < int >& nums , int target ) { int l = 0 , r = nums . size () - 1 ; while ( l <= r ){ int mid = ( l + r ) >> 1 ; if ( nums [ mid ] == target ) return mid ; else if ( nums [ mid ] > target ) r = mid - 1 ; else l = mid + 1 ; } return l ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"leetcode35-\u641c\u7d22\u63d2\u5165\u4f4d\u7f6e"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u503c\uff0c\u5728\u6570\u7ec4\u4e2d\u627e\u5230\u76ee\u6807\u503c\uff0c\u5e76\u8fd4\u56de\u5176\u7d22\u5f15\u3002\u5982\u679c\u76ee\u6807\u503c\u4e0d\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\uff0c\u8fd4\u56de\u5b83\u5c06\u4f1a\u88ab\u6309\u987a\u5e8f\u63d2\u5165\u7684\u4f4d\u7f6e\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u65e0\u91cd\u590d\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,3,5,6], 5 \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: [1,3,5,6], 2 \u8f93\u51fa: 1 \u793a\u4f8b 3: \u8f93\u5165: [1,3,5,6], 7 \u8f93\u51fa: 4 \u793a\u4f8b 4: \u8f93\u5165: [1,3,5,6], 0 \u8f93\u51fa: 0","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/#_2","text":"https://leetcode-cn.com/problems/search-insert-position","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/#_3","text":"\u76f4\u63a5\u904d\u5386\u6570\u7ec4\uff0c\u56e0\u4e3a\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u5bfb\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8etarget\u7684\u6570\uff0c\u8fd4\u56de\u5176\u4e0b\u6807\uff08\u5982\u679c\u662f\u521a\u597d\u7b49\u4e8etarget\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7684\u4e0b\u6807\u5c31\u662f\u8981\u8fd4\u56de\u7684\uff1b\u5982\u679c\u662f\u7b2c\u4e00\u4e2a\u5927\u4e8etarget\uff0c\u90a3\u4e48target\u5e94\u8be5\u63d2\u5165\u5728\u5f53\u524d\u8fd9\u4e2a\u6570\u7684\u4e0b\u6807\u4f4d\u7f6e\uff09","title":"\u601d\u8def\u4e00(\u66b4\u529b\u89e3\u6cd5)"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/#_4","text":"class Solution { public : int searchInsert ( vector < int >& nums , int target ) { int i = 0 ; for (; i < nums . size (); i ++ ){ if ( nums [ i ] >= target ) return i ; } return i ; } };","title":"\u4ee3\u7801"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/#_6","text":"\u56e0\u4e3a\u9898\u76ee\u7ed9\u7684\u662f \u6709\u5e8f\u7684\u6570\u7ec4 \uff0c\u6240\u4ee5\u91c7\u7528 \u4e8c\u5206\u6cd5 \u627e\u6bd4\u8f83\u5408\u9002","title":"\u601d\u8def\u4e8c(\u4e8c\u5206\u6cd5)"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/#_7","text":"class Solution { public : int searchInsert ( vector < int >& nums , int target ) { int l = 0 , r = nums . size () - 1 ; while ( l <= r ){ int mid = ( l + r ) >> 1 ; if ( nums [ mid ] == target ) return mid ; else if ( nums [ mid ] > target ) r = mid - 1 ; else l = mid + 1 ; } return l ; } };","title":"\u4ee3\u7801"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/#_8","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode74-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u5224\u65ad m x n \u77e9\u9635\u4e2d\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u76ee\u6807\u503c\u3002\u8be5\u77e9\u9635\u5177\u6709\u5982\u4e0b\u7279\u6027\uff1a \u6bcf\u884c\u4e2d\u7684\u6574\u6570\u4ece\u5de6\u5230\u53f3\u6309\u5347\u5e8f\u6392\u5217\u3002 \u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u5927\u4e8e\u524d\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6574\u6570\u3002 \u8f93\u5165\uff1amatrix = [[1,3,5,7],[10,11,16,20],[23,30,34,50]], target = 3 \u8f93\u51fa\uff1atrue \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/search-a-2d-matrix \u601d\u8def\u4e00(\u7b80\u5355\u7684\u5bf9\u201c\u884c\u201d\u4e8c\u5206) \u00b6 \u9996\u5148\u60f3\u5230\u7684\u5c31\u662f\u901a\u8fc7\u6bcf\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6570\u8fdb\u884c\u5224\u65ad\uff0c\u7136\u540e\u5b9a\u4f4d\u5230\u8fd9\u4e2a\u6570\u518d\u67d0\u4e00\u884c\uff0c\u518d\u5bf9\u8fd9\u4e00\u884c\u7684\u6570\u8fdb\u884c\u4e8c\u5206\u641c\u7d22 \u4ee3\u7801 \u00b6 class Solution { public : bool searchMatrix ( vector < vector < int >>& matrix , int target ) { if ( matrix . size () == 0 || matrix [ 0 ]. size () == 0 ) return false ; int m = matrix . size (), n = matrix [ 0 ]. size (); int i ; //\u8bb0\u5f55\u76ee\u6807\u503c\u5728\u54ea\u4e00\u884c for ( i = 0 ; i < m - 1 ; i ++ ){ if ( matrix [ i ][ n -1 ] >= target ) break ; } //\u5728\u7b2ci\u884c\u641c\u7d22 int l = 0 , r = matrix [ 0 ]. size () - 1 ; while ( l <= r ){ int mid = ( l + r ) >> 1 ; if ( matrix [ i ][ mid ] == target ) return true ; else if ( matrix [ i ][ mid ] > target ) r = mid - 1 ; else l = mid + 1 ; } return false ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N + logM) \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1) \u4f46\u662f\u65e2\u7136\u662f\u4e3a\u4e86\u5bfb\u627e\u518d\u54ea\u4e00\u884c\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5bf9\u884c\u8fdb\u884c\u4e8c\u5206\u5462\uff1f\uff1f\uff1f\u6240\u4ee5\u6211\u611f\u89c9\u5e94\u8be5\u8fd8\u53ef\u4ee5\u5bf9\u884c\u4e8c\u5206\u8fdb\u884c\u4f18\u5316 \u601d\u8def\u4e8c(\u5bf9\u201c\u884c\u5217\u201d\u8fdb\u884c\u4e8c\u5206) \u00b6 \u5bfb\u627e\u786e\u5b9a\u7684\u884c\uff0c\u518d\u5728\u90a3\u4e00\u884c\u8fdb\u884c\u4e8c\u5206\uff1b \u901a\u8fc7\u6bcf\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u6765\u8fdb\u884c\u6bd4\u8f83 \u5982\u679c\u6b63\u597d\u76f8\u7b49\uff0c\u5c31\u8fd4\u56detrue \u5982\u679c\u7b2c mid \u884c\u7b2c\u4e00\u4e2a\u6570\u6bd4 target \u5927\uff0c\u90a3\u4e48\u8bf4\u660e \u53f3\u8fb9\u754c n = mid - 1\uff0c\u5373\u5728\u7b2c mid \u884c\u524d\u9762\u7684\u884c\u4e2d \u4ee3\u7801 \u00b6 class Solution { public : bool searchMatrix ( vector < vector < int >>& matrix , int target ) { if ( matrix . size () == 0 || matrix [ 0 ]. size () == 0 ) return false ; //\u5148\u5bf9\u884c\u8fdb\u884c\u4e8c\u5206 int m = 0 , n = matrix . size () - 1 ; while ( m <= n ){ int mid = ( m + n ) >> 1 ; if ( matrix [ mid ][ 0 ] == target ) return true ; else if ( matrix [ mid ][ 0 ] > target ) n = mid - 1 ; else m = mid + 1 ; } if ( n < 0 ) return false ; //\u5b9a\u4f4d\u5230\u7b2cn\u884c\uff0c\u5bf9\u8be5\u884c\u7684\u6570\u8fdb\u884c\u4e8c\u5206 int l = 0 , r = matrix [ 0 ]. size () - 1 ; while ( l <= r ){ int mid = ( l + r ) >> 1 ; if ( matrix [ n ][ mid ] == target ) return true ; else if ( matrix [ n ][ mid ] > target ) r = mid - 1 ; else l = mid + 1 ; } return false ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1) \u601d\u8def\u4e09( \u644a\u5f00\u4e3a\u4e00\u7ef4\u6570\u7ec4\u8fdb\u884c\u4e8c\u5206 ) \u00b6 \u5c06\u4e8c\u7ef4\u6570\u7ec4\u865a\u62df\u5316\u4e3a\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff08\u5e76\u4e0d\u662f\u771f\u7684\u521b\u5efa\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff09 \u4ee3\u7801 \u00b6 class Solution { public : bool searchMatrix ( vector < vector < int >>& matrix , int target ) { if ( matrix . size () == 0 || matrix [ 0 ]. size () == 0 ) return false ; int m = matrix . size (), n = matrix [ 0 ]. size (); int l = 0 , r = m * n - 1 ; while ( l <= r ){ int mid = ( l + r ) >> 1 ; int x = mid / n ; //\u884c int y = mid % n ; //\u5217 if ( matrix [ x ][ y ] == target ) return true ; else if ( matrix [ x ][ y ] > target ) r = mid - 1 ; else l = mid + 1 ; } return false ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(log(m*n))\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"leetcode74-\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode74-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/#_1","text":"\u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u5224\u65ad m x n \u77e9\u9635\u4e2d\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u76ee\u6807\u503c\u3002\u8be5\u77e9\u9635\u5177\u6709\u5982\u4e0b\u7279\u6027\uff1a \u6bcf\u884c\u4e2d\u7684\u6574\u6570\u4ece\u5de6\u5230\u53f3\u6309\u5347\u5e8f\u6392\u5217\u3002 \u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u5927\u4e8e\u524d\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6574\u6570\u3002 \u8f93\u5165\uff1amatrix = [[1,3,5,7],[10,11,16,20],[23,30,34,50]], target = 3 \u8f93\u51fa\uff1atrue","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode74-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/#_2","text":"https://leetcode-cn.com/problems/search-a-2d-matrix","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode74-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/#_3","text":"\u9996\u5148\u60f3\u5230\u7684\u5c31\u662f\u901a\u8fc7\u6bcf\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6570\u8fdb\u884c\u5224\u65ad\uff0c\u7136\u540e\u5b9a\u4f4d\u5230\u8fd9\u4e2a\u6570\u518d\u67d0\u4e00\u884c\uff0c\u518d\u5bf9\u8fd9\u4e00\u884c\u7684\u6570\u8fdb\u884c\u4e8c\u5206\u641c\u7d22","title":"\u601d\u8def\u4e00(\u7b80\u5355\u7684\u5bf9\u201c\u884c\u201d\u4e8c\u5206)"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode74-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/#_4","text":"class Solution { public : bool searchMatrix ( vector < vector < int >>& matrix , int target ) { if ( matrix . size () == 0 || matrix [ 0 ]. size () == 0 ) return false ; int m = matrix . size (), n = matrix [ 0 ]. size (); int i ; //\u8bb0\u5f55\u76ee\u6807\u503c\u5728\u54ea\u4e00\u884c for ( i = 0 ; i < m - 1 ; i ++ ){ if ( matrix [ i ][ n -1 ] >= target ) break ; } //\u5728\u7b2ci\u884c\u641c\u7d22 int l = 0 , r = matrix [ 0 ]. size () - 1 ; while ( l <= r ){ int mid = ( l + r ) >> 1 ; if ( matrix [ i ][ mid ] == target ) return true ; else if ( matrix [ i ][ mid ] > target ) r = mid - 1 ; else l = mid + 1 ; } return false ; } };","title":"\u4ee3\u7801"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode74-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N + logM) \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1) \u4f46\u662f\u65e2\u7136\u662f\u4e3a\u4e86\u5bfb\u627e\u518d\u54ea\u4e00\u884c\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5bf9\u884c\u8fdb\u884c\u4e8c\u5206\u5462\uff1f\uff1f\uff1f\u6240\u4ee5\u6211\u611f\u89c9\u5e94\u8be5\u8fd8\u53ef\u4ee5\u5bf9\u884c\u4e8c\u5206\u8fdb\u884c\u4f18\u5316","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode74-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/#_6","text":"\u5bfb\u627e\u786e\u5b9a\u7684\u884c\uff0c\u518d\u5728\u90a3\u4e00\u884c\u8fdb\u884c\u4e8c\u5206\uff1b \u901a\u8fc7\u6bcf\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u6765\u8fdb\u884c\u6bd4\u8f83 \u5982\u679c\u6b63\u597d\u76f8\u7b49\uff0c\u5c31\u8fd4\u56detrue \u5982\u679c\u7b2c mid \u884c\u7b2c\u4e00\u4e2a\u6570\u6bd4 target \u5927\uff0c\u90a3\u4e48\u8bf4\u660e \u53f3\u8fb9\u754c n = mid - 1\uff0c\u5373\u5728\u7b2c mid \u884c\u524d\u9762\u7684\u884c\u4e2d","title":"\u601d\u8def\u4e8c(\u5bf9\u201c\u884c\u5217\u201d\u8fdb\u884c\u4e8c\u5206)"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode74-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/#_7","text":"class Solution { public : bool searchMatrix ( vector < vector < int >>& matrix , int target ) { if ( matrix . size () == 0 || matrix [ 0 ]. size () == 0 ) return false ; //\u5148\u5bf9\u884c\u8fdb\u884c\u4e8c\u5206 int m = 0 , n = matrix . size () - 1 ; while ( m <= n ){ int mid = ( m + n ) >> 1 ; if ( matrix [ mid ][ 0 ] == target ) return true ; else if ( matrix [ mid ][ 0 ] > target ) n = mid - 1 ; else m = mid + 1 ; } if ( n < 0 ) return false ; //\u5b9a\u4f4d\u5230\u7b2cn\u884c\uff0c\u5bf9\u8be5\u884c\u7684\u6570\u8fdb\u884c\u4e8c\u5206 int l = 0 , r = matrix [ 0 ]. size () - 1 ; while ( l <= r ){ int mid = ( l + r ) >> 1 ; if ( matrix [ n ][ mid ] == target ) return true ; else if ( matrix [ n ][ mid ] > target ) r = mid - 1 ; else l = mid + 1 ; } return false ; } };","title":"\u4ee3\u7801"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode74-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/#_8","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode74-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/#_9","text":"\u5c06\u4e8c\u7ef4\u6570\u7ec4\u865a\u62df\u5316\u4e3a\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff08\u5e76\u4e0d\u662f\u771f\u7684\u521b\u5efa\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff09","title":"\u601d\u8def\u4e09(\u644a\u5f00\u4e3a\u4e00\u7ef4\u6570\u7ec4\u8fdb\u884c\u4e8c\u5206)"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode74-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/#_10","text":"class Solution { public : bool searchMatrix ( vector < vector < int >>& matrix , int target ) { if ( matrix . size () == 0 || matrix [ 0 ]. size () == 0 ) return false ; int m = matrix . size (), n = matrix [ 0 ]. size (); int l = 0 , r = m * n - 1 ; while ( l <= r ){ int mid = ( l + r ) >> 1 ; int x = mid / n ; //\u884c int y = mid % n ; //\u5217 if ( matrix [ x ][ y ] == target ) return true ; else if ( matrix [ x ][ y ] > target ) r = mid - 1 ; else l = mid + 1 ; } return false ; } };","title":"\u4ee3\u7801"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode74-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/#_11","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(log(m*n))\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode876-%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%8A%82%E7%82%B9/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5934\u7ed3\u70b9\u4e3a head \u7684\u975e\u7a7a\u5355\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9\u3002 \u5982\u679c\u6709\u4e24\u4e2a\u4e2d\u95f4\u7ed3\u70b9\uff0c\u5219\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u4e2d\u95f4\u7ed3\u70b9\u3002 \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/middle-of-the-linked-list/ \u601d\u8def \u00b6 \u5feb\u6162\u6307\u9488 \u4e00\u4e2a\u5feb\u6307\u9488\uff0c\u4e00\u4e2a\u6162\u6307\u9488\uff0c\u5747\u521d\u59cb\u5316\u6307\u5411head\uff1b\u5feb\u6307\u9488\u4e00\u6b21\u8d70\u4e24\u6b65\uff0c\u6162\u6307\u9488\u4e00\u6b21\u8d70\u4e00\u6b65\uff0c\u76f4\u5230\u5feb\u6307\u9488\u8d70\u5230\u5c3d\u5934\u7684\u65f6\u5019\uff0c\u6b64\u65f6\u7684\u6162\u6307\u9488\u5c31\u662f\u6307\u5411\u7684\u4e2d\u95f4\u8282\u70b9\uff0c\u8fd4\u56de\u5373\u53ef\u3002 \u4ee3\u7801 \u00b6 class Solution { public : ListNode * middleNode ( ListNode * head ) { ListNode * low = head ; ListNode * fast = head ; while ( fast != nullptr && fast -> next != nullptr ){ low = low -> next ; fast = fast -> next -> next ; } return low ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"leetcode876-\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode876-%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%8A%82%E7%82%B9/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5934\u7ed3\u70b9\u4e3a head \u7684\u975e\u7a7a\u5355\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9\u3002 \u5982\u679c\u6709\u4e24\u4e2a\u4e2d\u95f4\u7ed3\u70b9\uff0c\u5219\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u4e2d\u95f4\u7ed3\u70b9\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode876-%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%8A%82%E7%82%B9/#_2","text":"https://leetcode-cn.com/problems/middle-of-the-linked-list/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode876-%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%8A%82%E7%82%B9/#_3","text":"\u5feb\u6162\u6307\u9488 \u4e00\u4e2a\u5feb\u6307\u9488\uff0c\u4e00\u4e2a\u6162\u6307\u9488\uff0c\u5747\u521d\u59cb\u5316\u6307\u5411head\uff1b\u5feb\u6307\u9488\u4e00\u6b21\u8d70\u4e24\u6b65\uff0c\u6162\u6307\u9488\u4e00\u6b21\u8d70\u4e00\u6b65\uff0c\u76f4\u5230\u5feb\u6307\u9488\u8d70\u5230\u5c3d\u5934\u7684\u65f6\u5019\uff0c\u6b64\u65f6\u7684\u6162\u6307\u9488\u5c31\u662f\u6307\u5411\u7684\u4e2d\u95f4\u8282\u70b9\uff0c\u8fd4\u56de\u5373\u53ef\u3002","title":"\u601d\u8def"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode876-%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%8A%82%E7%82%B9/#_4","text":"class Solution { public : ListNode * middleNode ( ListNode * head ) { ListNode * low = head ; ListNode * fast = head ; while ( fast != nullptr && fast -> next != nullptr ){ low = low -> next ; fast = fast -> next -> next ; } return low ; } };","title":"\u4ee3\u7801"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88/leetcode876-%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%8A%82%E7%82%B9/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode39-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u65e0\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002 candidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u3002 \u8bf4\u660e\uff1a \u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002 \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1acandidates = [2,3,6,7], target = 7, \u6240\u6c42\u89e3\u96c6\u4e3a\uff1a [ [7], [2,2,3] ] \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u94fe\u63a5\uff1a \u8457\u4f5c\u6743\u5f52\u9886\u6263\u7f51\u7edc\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u5b98\u65b9\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/combination-sum \u601d\u8def \u00b6 \u4ee3\u7801 \u00b6 class Solution { public : void DFS ( vector < int >& candidates , int target , int s , vector < vector < int >>& res , vector < int >& cur ){ if ( target == 0 ) { res . push_back ( cur ); return ; } for ( int i = s ; i < candidates . size (); i ++ ){ if ( candidates [ i ] > target ) break ; cur . push_back ( candidates [ i ]); DFS ( candidates , target - candidates [ i ], i , res , cur ); cur . pop_back (); } } vector < vector < int >> combinationSum ( vector < int >& candidates , int target ) { vector < vector < int >> res ; vector < int > cur ; sort ( candidates . begin (), candidates . end ()); DFS ( candidates , target , 0 , res , cur ); return res ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6","title":"leetcode39-\u7ec4\u5408\u603b\u548c"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode39-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002 candidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u3002 \u8bf4\u660e\uff1a \u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002 \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1acandidates = [2,3,6,7], target = 7, \u6240\u6c42\u89e3\u96c6\u4e3a\uff1a [ [7], [2,2,3] ] \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u94fe\u63a5\uff1a \u8457\u4f5c\u6743\u5f52\u9886\u6263\u7f51\u7edc\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u5b98\u65b9\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode39-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/#_2","text":"https://leetcode-cn.com/problems/combination-sum","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode39-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/#_3","text":"","title":"\u601d\u8def"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode39-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/#_4","text":"class Solution { public : void DFS ( vector < int >& candidates , int target , int s , vector < vector < int >>& res , vector < int >& cur ){ if ( target == 0 ) { res . push_back ( cur ); return ; } for ( int i = s ; i < candidates . size (); i ++ ){ if ( candidates [ i ] > target ) break ; cur . push_back ( candidates [ i ]); DFS ( candidates , target - candidates [ i ], i , res , cur ); cur . pop_back (); } } vector < vector < int >> combinationSum ( vector < int >& candidates , int target ) { vector < vector < int >> res ; vector < int > cur ; sort ( candidates . begin (), candidates . end ()); DFS ( candidates , target , 0 , res , cur ); return res ; } };","title":"\u4ee3\u7801"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode39-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/#_5","text":"","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode40-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002 candidates \u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u5728\u6bcf\u4e2a\u7ec4\u5408\u4e2d\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002 \u8bf4\u660e\uff1a \u6240\u6709\u6570\u5b57\uff08\u5305\u62ec\u76ee\u6807\u6570\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002 \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \u793a\u4f8b 1: \u8f93\u5165: candidates = [10,1,2,7,6,1,5], target = 8, \u6240\u6c42\u89e3\u96c6\u4e3a: [ [1, 7], [1, 2, 5], [2, 6], [1, 1, 6] ] \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/combination-sum-ii \u601d\u8def \u00b6 \u4ee3\u7801 \u00b6 class Solution { public : //\u9996\u5148\u6309\u7167\u6b63\u5e38\u7684\u56de\u6eaf\u6765\u505a\u7684\u8bdd\uff0c\u4f1a\u51fa\u73b0\u91cd\u590d\u7684\u7ec4\u5408\u73b0\u8c61\uff0c\u539f\u56e0\u662f\uff0c\u5728\u6392\u5e8f\u7684\u65f6\u5019\uff0c\u5982\u679c\u6709\u76f8\u540c\u7684\u6570\uff0c\u90a3\u4e48\u8fd9\u5bf9\u76f8\u540c\u7684\u6570\u5c31\u4f1a\u548c\u540e\u9762\u7684\u6570\u8fdb\u884c\u7ec4\u5408\u4ece\u800c\u5f62\u6210\u91cd\u590d\u7684vector\uff0c\u8fd9\u91cc\u6709\u6709\u4e24\u79cd\u65b9\u6cd5 // \u7b2c\u4e00\u79cd\u662f\uff1b\u5229\u7528set\u8fdb\u884c\u53bb\u91cd // \u7b2c\u4e8c\u79cd\u662f\uff1a\u901a\u8fc7\u5224\u65ad\u5f53\u524d\u904d\u5386\u7684\u6570\u662f\u5426\u4e0e\u540e\u4e00\u4e2a\u6570\u76f8\u540c\uff0c\u5982\u679c\u662f\u76f8\u540c\u7684\u90a3\u4e48\u5c31\u4e0d\u904d\u5386\uff0c\u4ece\u800c\u907f\u514d\u4e86\u91cd\u590d //\u4f7f\u7528set\u8fdb\u884c\u53bb\u91cd // void DFS(vector<int>& candidates,int target,int h,set<vector<int>>& res,vector<int>& cur){ // if(target == 0) { // res.insert(cur); // return; // } // for(int i = h;i < candidates.size();i ++){ // if(candidates[i] > target) return; // cur.push_back(candidates[i]); // DFS(candidates,target - candidates[i],i + 1,res,cur); // cur.pop_back(); // } // } // vector<vector<int>> combinationSum2(vector<int>& candidates, int target) { // set<vector<int>> res; // vector<int> cur; // sort(candidates.begin(),candidates.end()); // DFS(candidates,target,0,res,cur); // return vector<vector<int>>(res.begin(),res.end()); // } //\u4e0d\u4f7f\u7528set\uff0c\u8fd8\u662f\u4f7f\u7528vector, //\u4e3b\u8981\u5c31\u662f\u5728\u8fdb\u884c\u56de\u6eaf\u7684\u65f6\u5019\uff0c void DFS ( vector < int >& candidates , int target , int h , vector < vector < int >>& res , vector < int >& cur ){ if ( target == 0 ){ res . push_back ( cur ); return ; } for ( int i = h ; i < candidates . size (); i ++ ){ if ( candidates [ i ] > target ) continue ; if ( i > h && candidates [ i ] == candidates [ i - 1 ]) continue ; cur . push_back ( candidates [ i ]); DFS ( candidates , target - candidates [ i ], i + 1 , res , cur ); cur . pop_back (); } } vector < vector < int >> combinationSum2 ( vector < int >& candidates , int target ) { vector < vector < int >> res ; vector < int > cur ; sort ( candidates . begin (), candidates . end ()); DFS ( candidates , target , 0 , res , cur ); return res ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6","title":"leetcode40-\u7ec4\u5408\u603b\u548cII"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode40-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002 candidates \u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u5728\u6bcf\u4e2a\u7ec4\u5408\u4e2d\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002 \u8bf4\u660e\uff1a \u6240\u6709\u6570\u5b57\uff08\u5305\u62ec\u76ee\u6807\u6570\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002 \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \u793a\u4f8b 1: \u8f93\u5165: candidates = [10,1,2,7,6,1,5], target = 8, \u6240\u6c42\u89e3\u96c6\u4e3a: [ [1, 7], [1, 2, 5], [2, 6], [1, 1, 6] ]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode40-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII/#_2","text":"https://leetcode-cn.com/problems/combination-sum-ii","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode40-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII/#_3","text":"","title":"\u601d\u8def"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode40-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII/#_4","text":"class Solution { public : //\u9996\u5148\u6309\u7167\u6b63\u5e38\u7684\u56de\u6eaf\u6765\u505a\u7684\u8bdd\uff0c\u4f1a\u51fa\u73b0\u91cd\u590d\u7684\u7ec4\u5408\u73b0\u8c61\uff0c\u539f\u56e0\u662f\uff0c\u5728\u6392\u5e8f\u7684\u65f6\u5019\uff0c\u5982\u679c\u6709\u76f8\u540c\u7684\u6570\uff0c\u90a3\u4e48\u8fd9\u5bf9\u76f8\u540c\u7684\u6570\u5c31\u4f1a\u548c\u540e\u9762\u7684\u6570\u8fdb\u884c\u7ec4\u5408\u4ece\u800c\u5f62\u6210\u91cd\u590d\u7684vector\uff0c\u8fd9\u91cc\u6709\u6709\u4e24\u79cd\u65b9\u6cd5 // \u7b2c\u4e00\u79cd\u662f\uff1b\u5229\u7528set\u8fdb\u884c\u53bb\u91cd // \u7b2c\u4e8c\u79cd\u662f\uff1a\u901a\u8fc7\u5224\u65ad\u5f53\u524d\u904d\u5386\u7684\u6570\u662f\u5426\u4e0e\u540e\u4e00\u4e2a\u6570\u76f8\u540c\uff0c\u5982\u679c\u662f\u76f8\u540c\u7684\u90a3\u4e48\u5c31\u4e0d\u904d\u5386\uff0c\u4ece\u800c\u907f\u514d\u4e86\u91cd\u590d //\u4f7f\u7528set\u8fdb\u884c\u53bb\u91cd // void DFS(vector<int>& candidates,int target,int h,set<vector<int>>& res,vector<int>& cur){ // if(target == 0) { // res.insert(cur); // return; // } // for(int i = h;i < candidates.size();i ++){ // if(candidates[i] > target) return; // cur.push_back(candidates[i]); // DFS(candidates,target - candidates[i],i + 1,res,cur); // cur.pop_back(); // } // } // vector<vector<int>> combinationSum2(vector<int>& candidates, int target) { // set<vector<int>> res; // vector<int> cur; // sort(candidates.begin(),candidates.end()); // DFS(candidates,target,0,res,cur); // return vector<vector<int>>(res.begin(),res.end()); // } //\u4e0d\u4f7f\u7528set\uff0c\u8fd8\u662f\u4f7f\u7528vector, //\u4e3b\u8981\u5c31\u662f\u5728\u8fdb\u884c\u56de\u6eaf\u7684\u65f6\u5019\uff0c void DFS ( vector < int >& candidates , int target , int h , vector < vector < int >>& res , vector < int >& cur ){ if ( target == 0 ){ res . push_back ( cur ); return ; } for ( int i = h ; i < candidates . size (); i ++ ){ if ( candidates [ i ] > target ) continue ; if ( i > h && candidates [ i ] == candidates [ i - 1 ]) continue ; cur . push_back ( candidates [ i ]); DFS ( candidates , target - candidates [ i ], i + 1 , res , cur ); cur . pop_back (); } } vector < vector < int >> combinationSum2 ( vector < int >& candidates , int target ) { vector < vector < int >> res ; vector < int > cur ; sort ( candidates . begin (), candidates . end ()); DFS ( candidates , target , 0 , res , cur ); return res ; } };","title":"\u4ee3\u7801"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode40-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII/#_5","text":"","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode46-%E5%85%A8%E6%8E%92%E5%88%97/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a \u6ca1\u6709\u91cd\u590d \u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002 \u793a\u4f8b: \u8f93\u5165: [1,2,3] \u8f93\u51fa: [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ] \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/permutations \u601d\u8def \u00b6 \u56de\u6eaf\u6cd5+\u526a\u679d \u672c\u9898\u7684\u6761\u4ef6\u662f\u6ca1\u6709\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217 \u8fd9\u91cc\u91c7\u7528\u4e24\u4e2a\u6570\u7ec4\uff0c\u5206\u522b \u5b58\u50a8\u8def\u5f84\u548c\u53ef\u9009\u7684\u5217\u8868 \uff0c\u5373path\u548cnums\uff0cpath\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ece\u6811\u7684\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\uff0cnums\u662f\u7ed9\u5b9a\u7684\u6570\u5b57\u5e8f\u5217\u3002 \u56de\u6eaf\u4e00\u822c\u505a\u6cd5\u90fd\u662fDFS\uff0c\u8fd9\u5c31\u9700\u8981\u7528\u5230\u9012\u5f52 \u9012\u5f52\u7684\u8df3\u51fa\u6761\u4ef6\uff1a\u5f53path\u7684\u5143\u7d20\u5df2\u7ecf\u548cnums\u7684\u5143\u7d20\u4e2a\u6570\u76f8\u540c\u7684\u65f6\u5019\uff0c\u5c31\u8bf4\u660e\u6b64\u65f6\u5df2\u7ecf\u5c06\u4e00\u79cd\u6392\u5217\u60c5\u51b5\u904d\u5386\u5b8c\u6bd5\uff0c\u6b64\u65f6\u5c31\u5c06\u5f53\u524d\u7684Path\u52a0\u5165\u5230res\u7ed3\u679c\u6570\u7ec4\u4e2d\uff1b \u5426\u5219\u5c31\u7ee7\u7eed\u904d\u5386\uff0c\u5982\u4f55\u904d\u5386\u5462\uff1f \u56e0\u4e3a\u662f\u5168\u6392\u5217\uff0c\u6240\u4ee5\u5bf9\u4e8enums\u6570\u7ec4\u7684\u904d\u5386\u9700\u8981\u4ece0\u5f00\u59cb\uff0c\u4f46\u662f\u6392\u5217\u7ec4\u5408\u4e2d\u4e0d\u80fd\u6709\u91cd\u590d\u7684\u6570\u5b57\uff0c\u6240\u4ee5\u9700\u8981\u5224\u65ad\u5f53\u524d\u7684path\u6570\u7ec4\u4e2d\u662f\u5426\u5df2\u7ecf\u6709\u5143\u7d20\u5b58\u5728\u4e8enums\u4e2d\uff0c\u5982\u679c\u6709\u90a3\u4e48\u5c31\u4e0d\u5165\u5f53\u524d\u7684\u7ec4\u5408\u6570\u4e2d\uff0c\u5426\u5219\u5c31\u653e\u5165\uff0c\u540c\u65f6\u8fdb\u5165\u4e0b\u4e00\u5c42\u6df1\u641c\uff0c\u6700\u540e\u9700\u8981\u00b7\u6062\u590d\u73b0\u573a\u00b7\uff0c\u5c06\u6808\u5c3e\u51fa\u6808 \u5173\u4e8e\u6392\u5217\u7ec4\u5408\u7684\u9898\u76ee\uff0c\u57fa\u672c\u90fd\u662f\u7528\u56de\u6eaf\u6765\u505a\uff0c\u66b4\u529b\u6c42\u89e3\u7684\u540c\u65f6\uff0c\u4f7f\u7528\u526a\u679d\u51fd\u6570\u5254\u9664\u6389\u4e00\u4e9b\u4e0d\u53ef\u80fd\u7684\u60c5\u51b5\uff0c\u901a\u5e38\u91c7\u7528DFS\u6765\u505a \u4ee3\u7801 \u00b6 class Solution { private : vector < vector < int > > res ; public : //\u4f20\u5165\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u8def\u5f84\u5217\u8868\uff0c\u4e00\u4e2a\u662f\u53ef\u9009\u5217\u8868 void find ( vector < int >& path , vector < int >& nums ){ //\u904d\u5386\u5230\u53f6\u5b50\u8282\u70b9\u7684\u65f6\u5019\uff0c\u8fd4\u56de\u6392\u5217 if ( path . size () == nums . size ()){ res . push_back ( path ); return ; }; for ( int i = 0 ; i < nums . size (); i ++ ){ if ( count ( path . begin (), path . end (), nums [ i ])) continue ; path . push_back ( nums [ i ]); find ( path , nums ); path . pop_back (); } } vector < vector < int >> permute ( vector < int >& nums ) { vector < int > path ; find ( path , nums ); return res ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n*n!)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N)","title":"leetcode46-\u5168\u6392\u5217"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode46-%E5%85%A8%E6%8E%92%E5%88%97/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a \u6ca1\u6709\u91cd\u590d \u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002 \u793a\u4f8b: \u8f93\u5165: [1,2,3] \u8f93\u51fa: [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode46-%E5%85%A8%E6%8E%92%E5%88%97/#_2","text":"https://leetcode-cn.com/problems/permutations","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode46-%E5%85%A8%E6%8E%92%E5%88%97/#_3","text":"\u56de\u6eaf\u6cd5+\u526a\u679d \u672c\u9898\u7684\u6761\u4ef6\u662f\u6ca1\u6709\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217 \u8fd9\u91cc\u91c7\u7528\u4e24\u4e2a\u6570\u7ec4\uff0c\u5206\u522b \u5b58\u50a8\u8def\u5f84\u548c\u53ef\u9009\u7684\u5217\u8868 \uff0c\u5373path\u548cnums\uff0cpath\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ece\u6811\u7684\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\uff0cnums\u662f\u7ed9\u5b9a\u7684\u6570\u5b57\u5e8f\u5217\u3002 \u56de\u6eaf\u4e00\u822c\u505a\u6cd5\u90fd\u662fDFS\uff0c\u8fd9\u5c31\u9700\u8981\u7528\u5230\u9012\u5f52 \u9012\u5f52\u7684\u8df3\u51fa\u6761\u4ef6\uff1a\u5f53path\u7684\u5143\u7d20\u5df2\u7ecf\u548cnums\u7684\u5143\u7d20\u4e2a\u6570\u76f8\u540c\u7684\u65f6\u5019\uff0c\u5c31\u8bf4\u660e\u6b64\u65f6\u5df2\u7ecf\u5c06\u4e00\u79cd\u6392\u5217\u60c5\u51b5\u904d\u5386\u5b8c\u6bd5\uff0c\u6b64\u65f6\u5c31\u5c06\u5f53\u524d\u7684Path\u52a0\u5165\u5230res\u7ed3\u679c\u6570\u7ec4\u4e2d\uff1b \u5426\u5219\u5c31\u7ee7\u7eed\u904d\u5386\uff0c\u5982\u4f55\u904d\u5386\u5462\uff1f \u56e0\u4e3a\u662f\u5168\u6392\u5217\uff0c\u6240\u4ee5\u5bf9\u4e8enums\u6570\u7ec4\u7684\u904d\u5386\u9700\u8981\u4ece0\u5f00\u59cb\uff0c\u4f46\u662f\u6392\u5217\u7ec4\u5408\u4e2d\u4e0d\u80fd\u6709\u91cd\u590d\u7684\u6570\u5b57\uff0c\u6240\u4ee5\u9700\u8981\u5224\u65ad\u5f53\u524d\u7684path\u6570\u7ec4\u4e2d\u662f\u5426\u5df2\u7ecf\u6709\u5143\u7d20\u5b58\u5728\u4e8enums\u4e2d\uff0c\u5982\u679c\u6709\u90a3\u4e48\u5c31\u4e0d\u5165\u5f53\u524d\u7684\u7ec4\u5408\u6570\u4e2d\uff0c\u5426\u5219\u5c31\u653e\u5165\uff0c\u540c\u65f6\u8fdb\u5165\u4e0b\u4e00\u5c42\u6df1\u641c\uff0c\u6700\u540e\u9700\u8981\u00b7\u6062\u590d\u73b0\u573a\u00b7\uff0c\u5c06\u6808\u5c3e\u51fa\u6808 \u5173\u4e8e\u6392\u5217\u7ec4\u5408\u7684\u9898\u76ee\uff0c\u57fa\u672c\u90fd\u662f\u7528\u56de\u6eaf\u6765\u505a\uff0c\u66b4\u529b\u6c42\u89e3\u7684\u540c\u65f6\uff0c\u4f7f\u7528\u526a\u679d\u51fd\u6570\u5254\u9664\u6389\u4e00\u4e9b\u4e0d\u53ef\u80fd\u7684\u60c5\u51b5\uff0c\u901a\u5e38\u91c7\u7528DFS\u6765\u505a","title":"\u601d\u8def"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode46-%E5%85%A8%E6%8E%92%E5%88%97/#_4","text":"class Solution { private : vector < vector < int > > res ; public : //\u4f20\u5165\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u8def\u5f84\u5217\u8868\uff0c\u4e00\u4e2a\u662f\u53ef\u9009\u5217\u8868 void find ( vector < int >& path , vector < int >& nums ){ //\u904d\u5386\u5230\u53f6\u5b50\u8282\u70b9\u7684\u65f6\u5019\uff0c\u8fd4\u56de\u6392\u5217 if ( path . size () == nums . size ()){ res . push_back ( path ); return ; }; for ( int i = 0 ; i < nums . size (); i ++ ){ if ( count ( path . begin (), path . end (), nums [ i ])) continue ; path . push_back ( nums [ i ]); find ( path , nums ); path . pop_back (); } } vector < vector < int >> permute ( vector < int >& nums ) { vector < int > path ; find ( path , nums ); return res ; } };","title":"\u4ee3\u7801"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode46-%E5%85%A8%E6%8E%92%E5%88%97/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n*n!)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode47-%E5%85%A8%E6%8E%92%E5%88%97II/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u53ef\u5305\u542b\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217 nums \uff0c\u6309\u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u6240\u6709\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1anums = [1,1,2] \u8f93\u51fa\uff1a [[1,1,2], [1,2,1], [2,1,1]] \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/permutations-ii \u601d\u8def \u00b6 \u4ee3\u7801 \u00b6 class Solution { private : vector < vector < int >> result ; vector < int > path ; void backtracking ( vector < int >& nums , vector < bool >& used ) { if ( path . size () == nums . size ()) { result . push_back ( path ); return ; } for ( int i = 0 ; i < nums . size (); i ++ ) { // used[i - 1] == true\uff0c\u8bf4\u660e\u540c\u4e00\u6811\u652fnums[i - 1]\u4f7f\u7528\u8fc7 // used[i - 1] == false\uff0c\u8bf4\u660e\u540c\u4e00\u6811\u5c42nums[i - 1]\u4f7f\u7528\u8fc7 // \u5982\u679c\u540c\u4e00\u6811\u5c42nums[i - 1]\u4f7f\u7528\u8fc7\u5219\u76f4\u63a5\u8df3\u8fc7 if ( i > 0 && nums [ i ] == nums [ i - 1 ] && used [ i - 1 ] == false ) { continue ; } if ( used [ i ] == false ) { used [ i ] = true ; path . push_back ( nums [ i ]); backtracking ( nums , used ); path . pop_back (); used [ i ] = false ; } } } public : vector < vector < int >> permuteUnique ( vector < int >& nums ) { result . clear (); path . clear (); sort ( nums . begin (), nums . end ()); // \u6392\u5e8f vector < bool > used ( nums . size (), false ); backtracking ( nums , used ); return result ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6","title":"leetcode47-\u5168\u6392\u5217II"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode47-%E5%85%A8%E6%8E%92%E5%88%97II/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u5305\u542b\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217 nums \uff0c\u6309\u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u6240\u6709\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1anums = [1,1,2] \u8f93\u51fa\uff1a [[1,1,2], [1,2,1], [2,1,1]]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode47-%E5%85%A8%E6%8E%92%E5%88%97II/#_2","text":"https://leetcode-cn.com/problems/permutations-ii","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode47-%E5%85%A8%E6%8E%92%E5%88%97II/#_3","text":"","title":"\u601d\u8def"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode47-%E5%85%A8%E6%8E%92%E5%88%97II/#_4","text":"class Solution { private : vector < vector < int >> result ; vector < int > path ; void backtracking ( vector < int >& nums , vector < bool >& used ) { if ( path . size () == nums . size ()) { result . push_back ( path ); return ; } for ( int i = 0 ; i < nums . size (); i ++ ) { // used[i - 1] == true\uff0c\u8bf4\u660e\u540c\u4e00\u6811\u652fnums[i - 1]\u4f7f\u7528\u8fc7 // used[i - 1] == false\uff0c\u8bf4\u660e\u540c\u4e00\u6811\u5c42nums[i - 1]\u4f7f\u7528\u8fc7 // \u5982\u679c\u540c\u4e00\u6811\u5c42nums[i - 1]\u4f7f\u7528\u8fc7\u5219\u76f4\u63a5\u8df3\u8fc7 if ( i > 0 && nums [ i ] == nums [ i - 1 ] && used [ i - 1 ] == false ) { continue ; } if ( used [ i ] == false ) { used [ i ] = true ; path . push_back ( nums [ i ]); backtracking ( nums , used ); path . pop_back (); used [ i ] = false ; } } } public : vector < vector < int >> permuteUnique ( vector < int >& nums ) { result . clear (); path . clear (); sort ( nums . begin (), nums . end ()); // \u6392\u5e8f vector < bool > used ( nums . size (), false ); backtracking ( nums , used ); return result ; } };","title":"\u4ee3\u7801"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode47-%E5%85%A8%E6%8E%92%E5%88%97II/#_5","text":"","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode51-N%E7%9A%87%E5%90%8E/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 n \u7687\u540e\u95ee\u9898 \u7814\u7a76\u7684\u662f\u5982\u4f55\u5c06 n \u4e2a\u7687\u540e\u653e\u7f6e\u5728 n\u00d7n \u7684\u68cb\u76d8\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7687\u540e\u5f7c\u6b64\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n \uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u540c\u7684 n \u7687\u540e\u95ee\u9898 \u7684\u89e3\u51b3\u65b9\u6848\u3002 \u6bcf\u4e00\u79cd\u89e3\u6cd5\u5305\u542b\u4e00\u4e2a\u4e0d\u540c\u7684 n \u7687\u540e\u95ee\u9898 \u7684\u68cb\u5b50\u653e\u7f6e\u65b9\u6848\uff0c\u8be5\u65b9\u6848\u4e2d 'Q' \u548c '.' \u5206\u522b\u4ee3\u8868\u4e86\u7687\u540e\u548c\u7a7a\u4f4d\u3002 \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/n-queens \u601d\u8def \u00b6 \u4ee3\u7801 \u00b6 class Solution { private : vector < vector < string >> res ; public : bool IsValid ( int row , int col , vector < string >& board ){ //size\u4e3a\u884c\u6570 int size = board . size (); //\u770b\u5f53\u524d\u5217\u662f\u5426\u6709\u7687\u540e\uff0c\u5982\u679c\u6709\u7687\u540e\u5c31\u4e0d\u80fd\u653e\u7f6e for ( int i = 0 ; i < size ; i ++ ){ if ( board [ i ][ col ] == 'Q' ) return false ; } //\u770b\u5bf9\u89d2\u7ebf\u4f4d\u7f6e(\u6b63\u76f8\u5173\u65b9\u5411) for ( int i = row - 1 , j = col + 1 ; i >= 0 && j < size ; i -- , j ++ ){ if ( board [ i ][ j ] == 'Q' ) return false ; } //\u770b\u5bf9\u89d2\u7ebf\u4f4d\u7f6e(\u8d1f\u76f8\u5173\u65b9\u5411) for ( int i = row - 1 , j = col - 1 ; i >= 0 && j >= 0 ; i -- , j -- ){ if ( board [ i ][ j ] == 'Q' ) return false ; } return true ; } //\u5bfb\u627e\u7684\u65f6\u5019\u662f\u6309\u7167\u884c\u7684\u987a\u5e8f\u8fdb\u884c\u5bfb\u627e\u7684 void DFS ( vector < string >& board , int row ){ //\u5982\u679c\u904d\u5386\u7684\u884c\u6570\u7b49\u4e8e\u68cb\u76d8\u7684\u884c\u6570\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u627e\u5230\u4e86\u4e00\u4e2a\u653e\u7f6e\u65b9\u5f0f if ( row == board . size ()){ res . push_back ( board ); return ; } //\u904d\u5386\u6bcf\u4e00\u5217\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5217\u7684\u6bcf\u4e00\u884c\u548c\u5bf9\u89d2\u7ebf\u8fdb\u884c\u5224\u65ad\uff0c\u662f\u5426\u53ef\u4ee5\u9632\u6b62\u7687\u540e for ( int col = 0 ; col < board [ row ]. size (); col ++ ){ //\u526a\u679d(\u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u7b26\u5408\u7687\u540e\u7684\u653e\u7f6e\u6761\u4ef6\uff0c\u90a3\u4e48\u5c31\u8fdb\u884c\u4e0b\u4e00\u8f6e\u5faa\u73af) if ( ! IsValid ( row , col , board )) continue ; board [ row ][ col ] = 'Q' ; DFS ( board , row + 1 ); board [ row ][ col ] = '.' ; } } vector < vector < string >> solveNQueens ( int n ) { //\u521b\u5efa\u4e00\u4e2a\u8fb9\u957f\u4e3an\u7684\u68cb\u76d8\uff0c\u6bcf\u4e2a\u70b9\u90fd\u7f6e\u4e3a. vector < string > board ( n , string ( n , '.' )); DFS ( board , 0 ); return res ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6","title":"leetcode51-N\u7687\u540e"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode51-N%E7%9A%87%E5%90%8E/#_1","text":"n \u7687\u540e\u95ee\u9898 \u7814\u7a76\u7684\u662f\u5982\u4f55\u5c06 n \u4e2a\u7687\u540e\u653e\u7f6e\u5728 n\u00d7n \u7684\u68cb\u76d8\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7687\u540e\u5f7c\u6b64\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n \uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u540c\u7684 n \u7687\u540e\u95ee\u9898 \u7684\u89e3\u51b3\u65b9\u6848\u3002 \u6bcf\u4e00\u79cd\u89e3\u6cd5\u5305\u542b\u4e00\u4e2a\u4e0d\u540c\u7684 n \u7687\u540e\u95ee\u9898 \u7684\u68cb\u5b50\u653e\u7f6e\u65b9\u6848\uff0c\u8be5\u65b9\u6848\u4e2d 'Q' \u548c '.' \u5206\u522b\u4ee3\u8868\u4e86\u7687\u540e\u548c\u7a7a\u4f4d\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode51-N%E7%9A%87%E5%90%8E/#_2","text":"https://leetcode-cn.com/problems/n-queens","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode51-N%E7%9A%87%E5%90%8E/#_3","text":"","title":"\u601d\u8def"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode51-N%E7%9A%87%E5%90%8E/#_4","text":"class Solution { private : vector < vector < string >> res ; public : bool IsValid ( int row , int col , vector < string >& board ){ //size\u4e3a\u884c\u6570 int size = board . size (); //\u770b\u5f53\u524d\u5217\u662f\u5426\u6709\u7687\u540e\uff0c\u5982\u679c\u6709\u7687\u540e\u5c31\u4e0d\u80fd\u653e\u7f6e for ( int i = 0 ; i < size ; i ++ ){ if ( board [ i ][ col ] == 'Q' ) return false ; } //\u770b\u5bf9\u89d2\u7ebf\u4f4d\u7f6e(\u6b63\u76f8\u5173\u65b9\u5411) for ( int i = row - 1 , j = col + 1 ; i >= 0 && j < size ; i -- , j ++ ){ if ( board [ i ][ j ] == 'Q' ) return false ; } //\u770b\u5bf9\u89d2\u7ebf\u4f4d\u7f6e(\u8d1f\u76f8\u5173\u65b9\u5411) for ( int i = row - 1 , j = col - 1 ; i >= 0 && j >= 0 ; i -- , j -- ){ if ( board [ i ][ j ] == 'Q' ) return false ; } return true ; } //\u5bfb\u627e\u7684\u65f6\u5019\u662f\u6309\u7167\u884c\u7684\u987a\u5e8f\u8fdb\u884c\u5bfb\u627e\u7684 void DFS ( vector < string >& board , int row ){ //\u5982\u679c\u904d\u5386\u7684\u884c\u6570\u7b49\u4e8e\u68cb\u76d8\u7684\u884c\u6570\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u627e\u5230\u4e86\u4e00\u4e2a\u653e\u7f6e\u65b9\u5f0f if ( row == board . size ()){ res . push_back ( board ); return ; } //\u904d\u5386\u6bcf\u4e00\u5217\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5217\u7684\u6bcf\u4e00\u884c\u548c\u5bf9\u89d2\u7ebf\u8fdb\u884c\u5224\u65ad\uff0c\u662f\u5426\u53ef\u4ee5\u9632\u6b62\u7687\u540e for ( int col = 0 ; col < board [ row ]. size (); col ++ ){ //\u526a\u679d(\u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u7b26\u5408\u7687\u540e\u7684\u653e\u7f6e\u6761\u4ef6\uff0c\u90a3\u4e48\u5c31\u8fdb\u884c\u4e0b\u4e00\u8f6e\u5faa\u73af) if ( ! IsValid ( row , col , board )) continue ; board [ row ][ col ] = 'Q' ; DFS ( board , row + 1 ); board [ row ][ col ] = '.' ; } } vector < vector < string >> solveNQueens ( int n ) { //\u521b\u5efa\u4e00\u4e2a\u8fb9\u957f\u4e3an\u7684\u68cb\u76d8\uff0c\u6bcf\u4e2a\u70b9\u90fd\u7f6e\u4e3a. vector < string > board ( n , string ( n , '.' )); DFS ( board , 0 ); return res ; } };","title":"\u4ee3\u7801"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode51-N%E7%9A%87%E5%90%8E/#_5","text":"","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode814-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%AA%E6%9E%9D/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e8c\u53c9\u6811\u6839\u7ed3\u70b9 root \uff0c\u6b64\u5916\u6811\u7684\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u8981\u4e48\u662f 0\uff0c\u8981\u4e48\u662f 1\u3002 \u8fd4\u56de\u79fb\u9664\u4e86\u6240\u6709\u4e0d\u5305\u542b 1 \u7684\u5b50\u6811\u7684\u539f\u4e8c\u53c9\u6811\u3002 ( \u8282\u70b9 X \u7684\u5b50\u6811\u4e3a X \u672c\u8eab\uff0c\u4ee5\u53ca\u6240\u6709 X \u7684\u540e\u4ee3\u3002) \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/binary-tree-pruning/ \u601d\u8def \u00b6 \u9012\u5f52+\u526a\u679d \u5bf9\u4e8e\u6811\u7684\u95ee\u9898\u57fa\u672c\u90fd\u662f\u4f7f\u7528\u9012\u5f52\u6765\u89e3\u51b3\uff0c\u4f7f\u7528\u9012\u5f52\u7684\u65f6\u5019\u6ce8\u610f\u4f7f\u7528 \u4ea7\u54c1\u7ecf\u7406\u6cd5 \uff0c\u6211\u4eec\u5df2\u7ecf\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51fd\u6570pruneTree\u4f5c\u4e3a \u4ea7\u54c1 \u6765\u8fdb\u884c\u4e8c\u53c9\u6811\u7684\u526a\u679d\uff0c\u4e0d\u8981\u62d8\u6ce5\u4e8e\u7ec6\u8282\uff0c\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u7528\u6765\u5b8c\u6210\u6211\u4eec\u9700\u8981\u7684\u529f\u80fd\uff0c\u8c03\u7528\u5c31\u884c\u4e86\u3002\u5206\u522b\u5bf9\u5de6\u53f3\u5b50\u6811\u8fdb\u884c\u526a\u679d\u3002 \u8fd9\u91cc\u7684\u505a\u6cd5 \u526a\u679d \u7684\u8fc7\u7a0b\u5176\u5b9e \u5f88\u50cf\u6811\u7684\u540e\u5e8f\u904d\u5386 \uff0c\u6240\u4ee5\u526a\u679d\u7684\u8fc7\u7a0b\u5199\u5728\u904d\u5386\u5de6\u53f3\u5b50\u6811\u4e4b\u540e\uff0c\u6b64\u65f6\u5176\u5b9e\u5df2\u7ecf\u904d\u5386\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u5373\u5de6\u53f3\u6ca1\u6709\u5b50\u6811\u5e76\u4e14\u8282\u70b9\u672c\u8eab\u7684\u503c\u4e3a0\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u5c06\u8fd9\u4e2a\u8282\u70b9\u526a\u6389(\u7f6e\u4e3anullptr)\uff0c\u5426\u5219\u5c31\u4fdd\u7559\u3002 \u4ee3\u7801 \u00b6 class Solution { public : TreeNode * pruneTree ( TreeNode * root ) { if ( ! root ) return nullptr ; root -> left = pruneTree ( root -> left ); root -> right = pruneTree ( root -> right ); return ( root -> val == 0 && ! root -> left && ! root -> right ) ? nullptr : root ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)","title":"leetcode814-\u4e8c\u53c9\u6811\u526a\u679d"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode814-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%AA%E6%9E%9D/#_1","text":"\u7ed9\u5b9a\u4e8c\u53c9\u6811\u6839\u7ed3\u70b9 root \uff0c\u6b64\u5916\u6811\u7684\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u8981\u4e48\u662f 0\uff0c\u8981\u4e48\u662f 1\u3002 \u8fd4\u56de\u79fb\u9664\u4e86\u6240\u6709\u4e0d\u5305\u542b 1 \u7684\u5b50\u6811\u7684\u539f\u4e8c\u53c9\u6811\u3002 ( \u8282\u70b9 X \u7684\u5b50\u6811\u4e3a X \u672c\u8eab\uff0c\u4ee5\u53ca\u6240\u6709 X \u7684\u540e\u4ee3\u3002)","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode814-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%AA%E6%9E%9D/#_2","text":"https://leetcode-cn.com/problems/binary-tree-pruning/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode814-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%AA%E6%9E%9D/#_3","text":"\u9012\u5f52+\u526a\u679d \u5bf9\u4e8e\u6811\u7684\u95ee\u9898\u57fa\u672c\u90fd\u662f\u4f7f\u7528\u9012\u5f52\u6765\u89e3\u51b3\uff0c\u4f7f\u7528\u9012\u5f52\u7684\u65f6\u5019\u6ce8\u610f\u4f7f\u7528 \u4ea7\u54c1\u7ecf\u7406\u6cd5 \uff0c\u6211\u4eec\u5df2\u7ecf\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51fd\u6570pruneTree\u4f5c\u4e3a \u4ea7\u54c1 \u6765\u8fdb\u884c\u4e8c\u53c9\u6811\u7684\u526a\u679d\uff0c\u4e0d\u8981\u62d8\u6ce5\u4e8e\u7ec6\u8282\uff0c\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u7528\u6765\u5b8c\u6210\u6211\u4eec\u9700\u8981\u7684\u529f\u80fd\uff0c\u8c03\u7528\u5c31\u884c\u4e86\u3002\u5206\u522b\u5bf9\u5de6\u53f3\u5b50\u6811\u8fdb\u884c\u526a\u679d\u3002 \u8fd9\u91cc\u7684\u505a\u6cd5 \u526a\u679d \u7684\u8fc7\u7a0b\u5176\u5b9e \u5f88\u50cf\u6811\u7684\u540e\u5e8f\u904d\u5386 \uff0c\u6240\u4ee5\u526a\u679d\u7684\u8fc7\u7a0b\u5199\u5728\u904d\u5386\u5de6\u53f3\u5b50\u6811\u4e4b\u540e\uff0c\u6b64\u65f6\u5176\u5b9e\u5df2\u7ecf\u904d\u5386\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u5373\u5de6\u53f3\u6ca1\u6709\u5b50\u6811\u5e76\u4e14\u8282\u70b9\u672c\u8eab\u7684\u503c\u4e3a0\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u5c06\u8fd9\u4e2a\u8282\u70b9\u526a\u6389(\u7f6e\u4e3anullptr)\uff0c\u5426\u5219\u5c31\u4fdd\u7559\u3002","title":"\u601d\u8def"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode814-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%AA%E6%9E%9D/#_4","text":"class Solution { public : TreeNode * pruneTree ( TreeNode * root ) { if ( ! root ) return nullptr ; root -> left = pruneTree ( root -> left ); root -> right = pruneTree ( root -> right ); return ( root -> val == 0 && ! root -> left && ! root -> right ) ? nullptr : root ; } };","title":"\u4ee3\u7801"},{"location":"%E5%9B%9E%E6%BA%AF%E6%B3%95/leetcode814-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%AA%E6%9E%9D/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%A0%86/leetcode1046-%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u6709\u4e00\u5806\u77f3\u5934\uff0c\u6bcf\u5757\u77f3\u5934\u7684\u91cd\u91cf\u90fd\u662f\u6b63\u6574\u6570\u3002 \u6bcf\u4e00\u56de\u5408\uff0c\u4ece\u4e2d\u9009\u51fa\u4e24\u5757 \u6700\u91cd\u7684 \u77f3\u5934\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4e00\u8d77\u7c89\u788e\u3002\u5047\u8bbe\u77f3\u5934\u7684\u91cd\u91cf\u5206\u522b\u4e3a x \u548c y\uff0c\u4e14 x <= y\u3002\u90a3\u4e48\u7c89\u788e\u7684\u53ef\u80fd\u7ed3\u679c\u5982\u4e0b\uff1a \u5982\u679c x == y\uff0c\u90a3\u4e48\u4e24\u5757\u77f3\u5934\u90fd\u4f1a\u88ab\u5b8c\u5168\u7c89\u788e\uff1b \u5982\u679c x != y\uff0c\u90a3\u4e48\u91cd\u91cf\u4e3a x \u7684\u77f3\u5934\u5c06\u4f1a\u5b8c\u5168\u7c89\u788e\uff0c\u800c\u91cd\u91cf\u4e3a y \u7684\u77f3\u5934\u65b0\u91cd\u91cf\u4e3a y-x\u3002 \u6700\u540e\uff0c\u6700\u591a\u53ea\u4f1a\u5269\u4e0b\u4e00\u5757\u77f3\u5934\u3002\u8fd4\u56de\u6b64\u77f3\u5934\u7684\u91cd\u91cf\u3002\u5982\u679c\u6ca1\u6709\u77f3\u5934\u5269\u4e0b\uff0c\u5c31\u8fd4\u56de 0\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a[2,7,4,1,8,1] \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1a \u5148\u9009\u51fa 7 \u548c 8\uff0c\u5f97\u5230 1\uff0c\u6240\u4ee5\u6570\u7ec4\u8f6c\u6362\u4e3a [2,4,1,1,1]\uff0c \u518d\u9009\u51fa 2 \u548c 4\uff0c\u5f97\u5230 2\uff0c\u6240\u4ee5\u6570\u7ec4\u8f6c\u6362\u4e3a [2,1,1,1]\uff0c \u63a5\u7740\u662f 2 \u548c 1\uff0c\u5f97\u5230 1\uff0c\u6240\u4ee5\u6570\u7ec4\u8f6c\u6362\u4e3a [1,1,1]\uff0c \u6700\u540e\u9009\u51fa 1 \u548c 1\uff0c\u5f97\u5230 0\uff0c\u6700\u7ec8\u6570\u7ec4\u8f6c\u6362\u4e3a [1]\uff0c\u8fd9\u5c31\u662f\u6700\u540e\u5269\u4e0b\u90a3\u5757\u77f3\u5934\u7684\u91cd\u91cf\u3002 \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/last-stone-weight \u601d\u8def \u00b6 \u5efa\u7acb\u4e00\u4e2a\u5927\u9876\u5806 \u5c06\u6240\u6709\u7684\u5143\u7d20\u90fd\u653e\u5165\u5806\u4e2d\uff0c\u7136\u540e\u6309\u7167\u9898\u76ee\u7684\u610f\u601d\u53d6\u4e24\u4e2a\u5143\u7d20\uff0c\u8fdb\u884c\u6bd4\u8f83\uff0c\u518d\u9009\u62e9\u5143\u7d20\u662f\u9500\u6bc1\u8fd8\u662f\u653e\u5165\u5806\u4e2d\uff0c\u9012\u5f52\u64cd\u4f5c\u76f4\u5230\u6700\u540e\u5269\u4e0b\u4e00\u4e2a\u5143\u7d20\u6216\u8005\u6ca1\u6709\u5143\u7d20\u4e3a\u6b62 \u4ee3\u7801 \u00b6 class Solution { public : int lastStone ( priority_queue < int >& max_heap ){ if ( max_heap . size () == 0 ) return 0 ; if ( max_heap . size () == 1 ) return max_heap . top (); //\u5148\u53d6\u51fa\u5806\u9876\u7684\u4e24\u4e2a\u5143\u7d20 int x = max_heap . top (); max_heap . pop (); int y = max_heap . top (); max_heap . pop (); //\u5982\u679cx\u548cy\u76f8\u7b49\uff0c\u5c31\u76f4\u63a5\u9012\u5f52\u5f53\u524d\u7684\u5806 if ( x == y ) return lastStone ( max_heap ); if ( x < y ){ int temp = y - x ; max_heap . push ( temp ); return lastStone ( max_heap ); } else { int temp = x - y ; max_heap . push ( temp ); return lastStone ( max_heap ); } } int lastStoneWeight ( vector < int >& stones ) { //\u5efa\u7acb\u4e00\u4e2a\u5927\u9876\u5806 priority_queue < int > max_heap ; for ( int i = 0 ; i < stones . size (); i ++ ) max_heap . push ( stones [ i ]); return lastStone ( max_heap ); } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(NlogN)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N)","title":"leetcode1046-\u6700\u540e\u4e00\u5757\u77f3\u5934\u7684\u91cd\u91cf.md"},{"location":"%E5%A0%86/leetcode1046-%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F/#_1","text":"\u6709\u4e00\u5806\u77f3\u5934\uff0c\u6bcf\u5757\u77f3\u5934\u7684\u91cd\u91cf\u90fd\u662f\u6b63\u6574\u6570\u3002 \u6bcf\u4e00\u56de\u5408\uff0c\u4ece\u4e2d\u9009\u51fa\u4e24\u5757 \u6700\u91cd\u7684 \u77f3\u5934\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4e00\u8d77\u7c89\u788e\u3002\u5047\u8bbe\u77f3\u5934\u7684\u91cd\u91cf\u5206\u522b\u4e3a x \u548c y\uff0c\u4e14 x <= y\u3002\u90a3\u4e48\u7c89\u788e\u7684\u53ef\u80fd\u7ed3\u679c\u5982\u4e0b\uff1a \u5982\u679c x == y\uff0c\u90a3\u4e48\u4e24\u5757\u77f3\u5934\u90fd\u4f1a\u88ab\u5b8c\u5168\u7c89\u788e\uff1b \u5982\u679c x != y\uff0c\u90a3\u4e48\u91cd\u91cf\u4e3a x \u7684\u77f3\u5934\u5c06\u4f1a\u5b8c\u5168\u7c89\u788e\uff0c\u800c\u91cd\u91cf\u4e3a y \u7684\u77f3\u5934\u65b0\u91cd\u91cf\u4e3a y-x\u3002 \u6700\u540e\uff0c\u6700\u591a\u53ea\u4f1a\u5269\u4e0b\u4e00\u5757\u77f3\u5934\u3002\u8fd4\u56de\u6b64\u77f3\u5934\u7684\u91cd\u91cf\u3002\u5982\u679c\u6ca1\u6709\u77f3\u5934\u5269\u4e0b\uff0c\u5c31\u8fd4\u56de 0\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a[2,7,4,1,8,1] \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1a \u5148\u9009\u51fa 7 \u548c 8\uff0c\u5f97\u5230 1\uff0c\u6240\u4ee5\u6570\u7ec4\u8f6c\u6362\u4e3a [2,4,1,1,1]\uff0c \u518d\u9009\u51fa 2 \u548c 4\uff0c\u5f97\u5230 2\uff0c\u6240\u4ee5\u6570\u7ec4\u8f6c\u6362\u4e3a [2,1,1,1]\uff0c \u63a5\u7740\u662f 2 \u548c 1\uff0c\u5f97\u5230 1\uff0c\u6240\u4ee5\u6570\u7ec4\u8f6c\u6362\u4e3a [1,1,1]\uff0c \u6700\u540e\u9009\u51fa 1 \u548c 1\uff0c\u5f97\u5230 0\uff0c\u6700\u7ec8\u6570\u7ec4\u8f6c\u6362\u4e3a [1]\uff0c\u8fd9\u5c31\u662f\u6700\u540e\u5269\u4e0b\u90a3\u5757\u77f3\u5934\u7684\u91cd\u91cf\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%A0%86/leetcode1046-%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F/#_2","text":"https://leetcode-cn.com/problems/last-stone-weight","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%A0%86/leetcode1046-%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F/#_3","text":"\u5efa\u7acb\u4e00\u4e2a\u5927\u9876\u5806 \u5c06\u6240\u6709\u7684\u5143\u7d20\u90fd\u653e\u5165\u5806\u4e2d\uff0c\u7136\u540e\u6309\u7167\u9898\u76ee\u7684\u610f\u601d\u53d6\u4e24\u4e2a\u5143\u7d20\uff0c\u8fdb\u884c\u6bd4\u8f83\uff0c\u518d\u9009\u62e9\u5143\u7d20\u662f\u9500\u6bc1\u8fd8\u662f\u653e\u5165\u5806\u4e2d\uff0c\u9012\u5f52\u64cd\u4f5c\u76f4\u5230\u6700\u540e\u5269\u4e0b\u4e00\u4e2a\u5143\u7d20\u6216\u8005\u6ca1\u6709\u5143\u7d20\u4e3a\u6b62","title":"\u601d\u8def"},{"location":"%E5%A0%86/leetcode1046-%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F/#_4","text":"class Solution { public : int lastStone ( priority_queue < int >& max_heap ){ if ( max_heap . size () == 0 ) return 0 ; if ( max_heap . size () == 1 ) return max_heap . top (); //\u5148\u53d6\u51fa\u5806\u9876\u7684\u4e24\u4e2a\u5143\u7d20 int x = max_heap . top (); max_heap . pop (); int y = max_heap . top (); max_heap . pop (); //\u5982\u679cx\u548cy\u76f8\u7b49\uff0c\u5c31\u76f4\u63a5\u9012\u5f52\u5f53\u524d\u7684\u5806 if ( x == y ) return lastStone ( max_heap ); if ( x < y ){ int temp = y - x ; max_heap . push ( temp ); return lastStone ( max_heap ); } else { int temp = x - y ; max_heap . push ( temp ); return lastStone ( max_heap ); } } int lastStoneWeight ( vector < int >& stones ) { //\u5efa\u7acb\u4e00\u4e2a\u5927\u9876\u5806 priority_queue < int > max_heap ; for ( int i = 0 ; i < stones . size (); i ++ ) max_heap . push ( stones [ i ]); return lastStone ( max_heap ); } };","title":"\u4ee3\u7801"},{"location":"%E5%A0%86/leetcode1046-%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(NlogN)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%A0%86/leetcode21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u5c06\u4e24\u4e2a\u5347\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684 \u5347\u5e8f \u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002 \u8f93\u5165\uff1al1 = [1,2,4], l2 = [1,3,4] \u8f93\u51fa\uff1a[1,1,2,3,4,4] \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/merge-two-sorted-lists/ \u601d\u8def \u00b6 \u8fed\u4ee3 \u7528\u4e00\u4e2a\u65b0\u7684\u7a7a\u6307\u9488\u6765\u8bb0\u5f55\u4e24\u4e2a\u94fe\u8868\u4e2d\u8f83\u5c0f\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u601d\u8def\u548c\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u662f\u4e00\u6837\u7684 \u9012\u5f52 \u4ea7\u54c1\u7ecf\u7406\u6cd5\uff0c\u6bd4\u8f83\u4e24\u4e2a\u94fe\u8868\u5143\u7d20\uff0c\u54ea\u4e2a\u5c0f\uff0c\u5c31\u5c06\u5269\u4e0b\u7684\u548c\u53e6\u4e00\u4e2a\u94fe\u8868\u8fdb\u884c\u9012\u5f52\u64cd\u4f5c\uff0c\u8fd4\u56de\u5f53\u524d\u94fe\u8868 \u8fed\u4ee3\u4ee3\u7801 \u00b6 class Solution { public : ListNode * mergeTwoLists ( ListNode * l1 , ListNode * l2 ) { ListNode * dumpy = new ListNode ( 0 ); ListNode * tail = dumpy ; while ( l1 && l2 ){ if ( l1 -> val <= l2 -> val ){ tail -> next = l1 ; l1 = l1 -> next ; } else { tail -> next = l2 ; l2 = l2 -> next ; } //\u6ce8\u610f\u8fd9\u91cc\u63d2\u5165\u4e4b\u540e\u9700\u8981\u6307\u5411\u4e0b\u4e00\u4e2a tail = tail -> next ; } if ( l1 ) tail -> next = l1 ; if ( l2 ) tail -> next = l2 ; return dumpy -> next ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(min(m,n))\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n + m) \u9012\u5f52\u4ee3\u7801 \u00b6 class Solution { public : ListNode * mergeTwoLists ( ListNode * l1 , ListNode * l2 ) { if ( ! l1 || ! l2 ) return l1 ? l1 : l2 ; if ( l1 -> val < l2 -> val ){ l1 -> next = mergeTwoLists ( l1 -> next , l2 ); return l1 ; } else { l2 -> next = mergeTwoLists ( l2 -> next , l1 ); return l2 ; } } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logn)","title":"leetcode21-\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868.md"},{"location":"%E5%A0%86/leetcode21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/#_1","text":"\u5c06\u4e24\u4e2a\u5347\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684 \u5347\u5e8f \u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002 \u8f93\u5165\uff1al1 = [1,2,4], l2 = [1,3,4] \u8f93\u51fa\uff1a[1,1,2,3,4,4]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%A0%86/leetcode21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/#_2","text":"https://leetcode-cn.com/problems/merge-two-sorted-lists/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%A0%86/leetcode21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/#_3","text":"\u8fed\u4ee3 \u7528\u4e00\u4e2a\u65b0\u7684\u7a7a\u6307\u9488\u6765\u8bb0\u5f55\u4e24\u4e2a\u94fe\u8868\u4e2d\u8f83\u5c0f\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u601d\u8def\u548c\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u662f\u4e00\u6837\u7684 \u9012\u5f52 \u4ea7\u54c1\u7ecf\u7406\u6cd5\uff0c\u6bd4\u8f83\u4e24\u4e2a\u94fe\u8868\u5143\u7d20\uff0c\u54ea\u4e2a\u5c0f\uff0c\u5c31\u5c06\u5269\u4e0b\u7684\u548c\u53e6\u4e00\u4e2a\u94fe\u8868\u8fdb\u884c\u9012\u5f52\u64cd\u4f5c\uff0c\u8fd4\u56de\u5f53\u524d\u94fe\u8868","title":"\u601d\u8def"},{"location":"%E5%A0%86/leetcode21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/#_4","text":"class Solution { public : ListNode * mergeTwoLists ( ListNode * l1 , ListNode * l2 ) { ListNode * dumpy = new ListNode ( 0 ); ListNode * tail = dumpy ; while ( l1 && l2 ){ if ( l1 -> val <= l2 -> val ){ tail -> next = l1 ; l1 = l1 -> next ; } else { tail -> next = l2 ; l2 = l2 -> next ; } //\u6ce8\u610f\u8fd9\u91cc\u63d2\u5165\u4e4b\u540e\u9700\u8981\u6307\u5411\u4e0b\u4e00\u4e2a tail = tail -> next ; } if ( l1 ) tail -> next = l1 ; if ( l2 ) tail -> next = l2 ; return dumpy -> next ; } };","title":"\u8fed\u4ee3\u4ee3\u7801"},{"location":"%E5%A0%86/leetcode21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(min(m,n))\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n + m)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%A0%86/leetcode21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/#_6","text":"class Solution { public : ListNode * mergeTwoLists ( ListNode * l1 , ListNode * l2 ) { if ( ! l1 || ! l2 ) return l1 ? l1 : l2 ; if ( l1 -> val < l2 -> val ){ l1 -> next = mergeTwoLists ( l1 -> next , l2 ); return l1 ; } else { l2 -> next = mergeTwoLists ( l2 -> next , l1 ); return l2 ; } } };","title":"\u9012\u5f52\u4ee3\u7801"},{"location":"%E5%A0%86/leetcode21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/#_7","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logn)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%A0%86/leetcode215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u5728\u672a\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\u627e\u5230\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u627e\u7684\u662f\u6570\u7ec4\u6392\u5e8f\u540e\u7684\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c k \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: [3,2,1,5,6,4] \u548c k = 2 \u8f93\u51fa: 5 \u793a\u4f8b 2: \u8f93\u5165: [3,2,3,1,2,4,5,5,6] \u548c k = 4 \u8f93\u51fa: 4 \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/kth-largest-element-in-an-array \u601d\u8def\u4e00 \u00b6 \u5feb\u901f\u9009\u62e9 \u8fd9\u91cc\u662f\u9009\u62e9\u7b2cK\u4e2a\u5927\u7684\u6570\uff0c\u5176\u5b9e\u548c\u9009\u62e9\u7b2ck\u4e2a\u6570\u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u91cc\u53ea\u662f\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u9009\u62e9\u7b2ck\u4e2a\u6570\u5373\u53ef\u5f97\u5230\u7b2ck\u5927\u7684\u6570 \u4ee3\u7801 \u00b6 class Solution { public : int quick_select ( vector < int >& nums , int k , int l , int r ){ if ( l >= r ) return nums [ l ]; //\u8bbe\u7f6e\u904d\u5386\u7684\u53cc\u6307\u9488 int i = l - 1 , j = r + 1 , x = nums [( l + r ) >> 1 ]; while ( i < j ){ //\u4ece\u5927\u5230\u5c0f\u6392\u5e8f while ( nums [ ++ i ] > x ); while ( nums [ -- j ] < x ); if ( i < j ) swap ( nums [ i ], nums [ j ]); } int s = j - l + 1 ; if ( k <= s ) return quick_select ( nums , k , l , j ); else return quick_select ( nums , k - s , j + 1 , r ); } int findKthLargest ( vector < int >& nums , int k ) { //\u5feb\u901f\u9009\u62e9\u6392\u5e8f\uff0c\u8fd9\u91cc\u662f\u627e\u7b2cK\u5927\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u4f7f\u7528\u5feb\u6392\u7684\u65b9\u5f0f\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u9009\u62e9\u7b2cK\u4e2a\u5143\u7d20\u5373\u53ef return quick_select ( nums , k , 0 , nums . size () - 1 );; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logN) \u601d\u8def\u4e8c \u00b6 \u5806 \u5efa\u7acb\u4e00\u4e2a\u5c0f\u9876\u5806\uff0c\u5806\u7684\u5927\u5c0f\u4e3aK\uff0c\u5148\u5c06\u6570\u7ec4nums\u4e2d\u7684\u5143\u7d20\u653e\u5165\u5806\u4e2d\uff0c\u6b64\u65f6\uff0c\u7136\u540e\u5c06\u5269\u4f59\u7684n-k\u4e2a\u5143\u7d20\u4e0e\u5806\u9876\u4f9d\u6b21\u6bd4\u8f83\uff0c\u5982\u679c\u6bd4\u5806\u9876\u5143\u7d20\u5927\uff0c\u90a3\u4e48\u5c31\u5c06\u5806\u9876\u5143\u7d20\u5f39\u51fa\uff0c\u5c06\u5f53\u524dnums\u7684\u5143\u7d20\u653e\u5982\u5806\u4e2d\uff0c\u5806\u81ea\u884c\u8c03\u6574\u5806\u9876......\u5c31\u8fd9\u6837\u5c06\u5269\u4f59\u7684\u5143\u7d20\u653e\u5165\u5806\u4e2d\uff0c\u6700\u540e\u5f62\u6210\u7684\u5806\u7684\u5806\u9876\u5143\u7d20\u5c31\u662f\u8fd9\u4e2a\u6570\u7ec4\u7684\u7b2cK\u5927\u4e2a\u5143\u7d20\uff08\u56e0\u4e3a\u7b2cK\u5927\u4e2a\u5143\u7d20\u662f\u6570\u7ec4\u6392\u5e8f\u4e4b\u540e\uff0c\u6700\u540en-k\u4e2a\u5143\u7d20\u4e2d\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u800c\u6700\u540en-k\u4e2a\u5143\u7d20\u5df2\u7ecf\u5f62\u6210\u4e86\u5c0f\u9876\u5806\u4e86\uff0c\u76f4\u63a5\u8f93\u51fa\u5806\u9876\u5373\u53ef\u5f97\u5230\uff09 \u4ee3\u7801 \u00b6 class Solution { public : int findKthLargest ( vector < int >& nums , int k ) { priority_queue < int , vector < int > , greater < int >> min_heap ; for ( int i = 0 ; i < k ; i ++ ){ min_heap . push ( nums [ i ]); } for ( int i = k ; i < nums . size (); i ++ ){ if ( nums [ i ] > min_heap . top ()){ min_heap . pop (); min_heap . push ( nums [ i ]); } } return min_heap . top (); } }; \u00b6 \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(nlogk)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)","title":"leetcode215-\u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20.md"},{"location":"%E5%A0%86/leetcode215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/#_1","text":"\u5728\u672a\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\u627e\u5230\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u627e\u7684\u662f\u6570\u7ec4\u6392\u5e8f\u540e\u7684\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c k \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: [3,2,1,5,6,4] \u548c k = 2 \u8f93\u51fa: 5 \u793a\u4f8b 2: \u8f93\u5165: [3,2,3,1,2,4,5,5,6] \u548c k = 4 \u8f93\u51fa: 4","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%A0%86/leetcode215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/#_2","text":"https://leetcode-cn.com/problems/kth-largest-element-in-an-array","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%A0%86/leetcode215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/#_3","text":"\u5feb\u901f\u9009\u62e9 \u8fd9\u91cc\u662f\u9009\u62e9\u7b2cK\u4e2a\u5927\u7684\u6570\uff0c\u5176\u5b9e\u548c\u9009\u62e9\u7b2ck\u4e2a\u6570\u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u91cc\u53ea\u662f\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u9009\u62e9\u7b2ck\u4e2a\u6570\u5373\u53ef\u5f97\u5230\u7b2ck\u5927\u7684\u6570","title":"\u601d\u8def\u4e00"},{"location":"%E5%A0%86/leetcode215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/#_4","text":"class Solution { public : int quick_select ( vector < int >& nums , int k , int l , int r ){ if ( l >= r ) return nums [ l ]; //\u8bbe\u7f6e\u904d\u5386\u7684\u53cc\u6307\u9488 int i = l - 1 , j = r + 1 , x = nums [( l + r ) >> 1 ]; while ( i < j ){ //\u4ece\u5927\u5230\u5c0f\u6392\u5e8f while ( nums [ ++ i ] > x ); while ( nums [ -- j ] < x ); if ( i < j ) swap ( nums [ i ], nums [ j ]); } int s = j - l + 1 ; if ( k <= s ) return quick_select ( nums , k , l , j ); else return quick_select ( nums , k - s , j + 1 , r ); } int findKthLargest ( vector < int >& nums , int k ) { //\u5feb\u901f\u9009\u62e9\u6392\u5e8f\uff0c\u8fd9\u91cc\u662f\u627e\u7b2cK\u5927\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u4f7f\u7528\u5feb\u6392\u7684\u65b9\u5f0f\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u9009\u62e9\u7b2cK\u4e2a\u5143\u7d20\u5373\u53ef return quick_select ( nums , k , 0 , nums . size () - 1 );; } };","title":"\u4ee3\u7801"},{"location":"%E5%A0%86/leetcode215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%A0%86/leetcode215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/#_6","text":"\u5806 \u5efa\u7acb\u4e00\u4e2a\u5c0f\u9876\u5806\uff0c\u5806\u7684\u5927\u5c0f\u4e3aK\uff0c\u5148\u5c06\u6570\u7ec4nums\u4e2d\u7684\u5143\u7d20\u653e\u5165\u5806\u4e2d\uff0c\u6b64\u65f6\uff0c\u7136\u540e\u5c06\u5269\u4f59\u7684n-k\u4e2a\u5143\u7d20\u4e0e\u5806\u9876\u4f9d\u6b21\u6bd4\u8f83\uff0c\u5982\u679c\u6bd4\u5806\u9876\u5143\u7d20\u5927\uff0c\u90a3\u4e48\u5c31\u5c06\u5806\u9876\u5143\u7d20\u5f39\u51fa\uff0c\u5c06\u5f53\u524dnums\u7684\u5143\u7d20\u653e\u5982\u5806\u4e2d\uff0c\u5806\u81ea\u884c\u8c03\u6574\u5806\u9876......\u5c31\u8fd9\u6837\u5c06\u5269\u4f59\u7684\u5143\u7d20\u653e\u5165\u5806\u4e2d\uff0c\u6700\u540e\u5f62\u6210\u7684\u5806\u7684\u5806\u9876\u5143\u7d20\u5c31\u662f\u8fd9\u4e2a\u6570\u7ec4\u7684\u7b2cK\u5927\u4e2a\u5143\u7d20\uff08\u56e0\u4e3a\u7b2cK\u5927\u4e2a\u5143\u7d20\u662f\u6570\u7ec4\u6392\u5e8f\u4e4b\u540e\uff0c\u6700\u540en-k\u4e2a\u5143\u7d20\u4e2d\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u800c\u6700\u540en-k\u4e2a\u5143\u7d20\u5df2\u7ecf\u5f62\u6210\u4e86\u5c0f\u9876\u5806\u4e86\uff0c\u76f4\u63a5\u8f93\u51fa\u5806\u9876\u5373\u53ef\u5f97\u5230\uff09","title":"\u601d\u8def\u4e8c"},{"location":"%E5%A0%86/leetcode215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/#_7","text":"class Solution { public : int findKthLargest ( vector < int >& nums , int k ) { priority_queue < int , vector < int > , greater < int >> min_heap ; for ( int i = 0 ; i < k ; i ++ ){ min_heap . push ( nums [ i ]); } for ( int i = k ; i < nums . size (); i ++ ){ if ( nums [ i ] > min_heap . top ()){ min_heap . pop (); min_heap . push ( nums [ i ]); } } return min_heap . top (); } };","title":"\u4ee3\u7801"},{"location":"%E5%A0%86/leetcode215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/#_8","text":"","title":""},{"location":"%E5%A0%86/leetcode215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/#_9","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(nlogk)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%A0%86/leetcode23-%E5%90%88%E5%B9%B6K%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u6570\u7ec4\uff0c\u6bcf\u4e2a\u94fe\u8868\u90fd\u5df2\u7ecf\u6309\u5347\u5e8f\u6392\u5217\u3002 \u8bf7\u4f60\u5c06\u6240\u6709\u94fe\u8868\u5408\u5e76\u5230\u4e00\u4e2a\u5347\u5e8f\u94fe\u8868\u4e2d\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u94fe\u8868\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1alists = [[1,4,5],[1,3,4],[2,6]] \u8f93\u51fa\uff1a[1,1,2,3,4,4,5,6] \u89e3\u91ca\uff1a\u94fe\u8868\u6570\u7ec4\u5982\u4e0b\uff1a [ 1->4->5, 1->3->4, 2->6 ] \u5c06\u5b83\u4eec\u5408\u5e76\u5230\u4e00\u4e2a\u6709\u5e8f\u94fe\u8868\u4e2d\u5f97\u5230\u3002 1->1->2->3->4->4->5->6 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1alists = [] \u8f93\u51fa\uff1a[] \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1alists = [[]] \u8f93\u51fa\uff1a[] \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/merge-k-sorted-lists \u601d\u8def \u00b6 \u4f18\u5148\u7ea7\u961f\u5217\uff08\u5806\uff09 \u5efa\u7acb\u4e00\u4e2a\u6700\u5c0f\u5806\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u90fd\u5c06\u5176\u8ffd\u52a0\u5230\u5806\u4e2d\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u5806\u9876\u5143\u7d20\uff0c\u5373\u6700\u5c0f\u503c(\u56e0\u4e3a\u6bcf\u4e2a\u94fe\u8868\u90fd\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u5bf9\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6bd4\u8f83\u6765\u5b9e\u73b0\u5168\u5c40\u7684\u6709\u5e8f)\uff0c\u5bf9\u4e8e\u5df2\u7ecf\u9009\u51fa\u7684\u94fe\u8868\u8282\u70b9\uff0c\u5982\u679c\u5b83\u540e\u5e8f\u8fd8\u6709\u8282\u70b9\u5143\u7d20\uff0c\u90a3\u4e48\u5c06\u5b83\u540e\u9762\u7684\u8282\u70b9\u8ffd\u52a0\u5230\u5806\u4e2d\uff0c\u6309\u7167\u8fd9\u4e2a\u6b65\u9aa4\u4e00\u76f4\u7ee7\u7eed\u4e0b\u53bb\uff0c\u76f4\u81f3\u5806\u4e2d\u5143\u7d20\u88ab\u53d6\u7a7a\u4e3a\u6b62 \u4ee3\u7801 \u00b6 class Solution { public : ListNode * mergeKLists ( vector < ListNode *>& lists ) { struct cmp { bool operator ()( ListNode * a , ListNode * b ){ return a -> val > b -> val ; } }; ListNode * dumpy = new ListNode ( 0 ); ListNode * tail = dumpy ; //\u521b\u5efa\u4e00\u4e2a\u5c0f\u6839\u5806 priority_queue < ListNode * , vector < ListNode *> , cmp > min_heap ; //\u5c06\u6bcf\u4e2a\u94fe\u8868\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u90fd\u52a0\u5165\u5230\u5806\u4e2d for ( auto listnode : lists ) { if ( listnode ) min_heap . push ( listnode ); } //\u9009\u51fa\u6700\u5c0f\u7684\u5143\u7d20(\u5806\u9876\u5143\u7d20),\u653e\u5230\u65b0\u7684\u94fe\u8868\u4e2d,\u76f4\u5230\u5806\u4e3a\u7a7a while ( ! min_heap . empty ()){ tail -> next = min_heap . top (); min_heap . pop (); tail = tail -> next ; if ( tail -> next ) min_heap . push ( tail -> next ); } return dumpy -> next ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(kn*logK)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)","title":"leetcode23-\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868.md"},{"location":"%E5%A0%86/leetcode23-%E5%90%88%E5%B9%B6K%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8/#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u6570\u7ec4\uff0c\u6bcf\u4e2a\u94fe\u8868\u90fd\u5df2\u7ecf\u6309\u5347\u5e8f\u6392\u5217\u3002 \u8bf7\u4f60\u5c06\u6240\u6709\u94fe\u8868\u5408\u5e76\u5230\u4e00\u4e2a\u5347\u5e8f\u94fe\u8868\u4e2d\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u94fe\u8868\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1alists = [[1,4,5],[1,3,4],[2,6]] \u8f93\u51fa\uff1a[1,1,2,3,4,4,5,6] \u89e3\u91ca\uff1a\u94fe\u8868\u6570\u7ec4\u5982\u4e0b\uff1a [ 1->4->5, 1->3->4, 2->6 ] \u5c06\u5b83\u4eec\u5408\u5e76\u5230\u4e00\u4e2a\u6709\u5e8f\u94fe\u8868\u4e2d\u5f97\u5230\u3002 1->1->2->3->4->4->5->6 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1alists = [] \u8f93\u51fa\uff1a[] \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1alists = [[]] \u8f93\u51fa\uff1a[]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%A0%86/leetcode23-%E5%90%88%E5%B9%B6K%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8/#_2","text":"https://leetcode-cn.com/problems/merge-k-sorted-lists","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%A0%86/leetcode23-%E5%90%88%E5%B9%B6K%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8/#_3","text":"\u4f18\u5148\u7ea7\u961f\u5217\uff08\u5806\uff09 \u5efa\u7acb\u4e00\u4e2a\u6700\u5c0f\u5806\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u90fd\u5c06\u5176\u8ffd\u52a0\u5230\u5806\u4e2d\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u5806\u9876\u5143\u7d20\uff0c\u5373\u6700\u5c0f\u503c(\u56e0\u4e3a\u6bcf\u4e2a\u94fe\u8868\u90fd\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u5bf9\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6bd4\u8f83\u6765\u5b9e\u73b0\u5168\u5c40\u7684\u6709\u5e8f)\uff0c\u5bf9\u4e8e\u5df2\u7ecf\u9009\u51fa\u7684\u94fe\u8868\u8282\u70b9\uff0c\u5982\u679c\u5b83\u540e\u5e8f\u8fd8\u6709\u8282\u70b9\u5143\u7d20\uff0c\u90a3\u4e48\u5c06\u5b83\u540e\u9762\u7684\u8282\u70b9\u8ffd\u52a0\u5230\u5806\u4e2d\uff0c\u6309\u7167\u8fd9\u4e2a\u6b65\u9aa4\u4e00\u76f4\u7ee7\u7eed\u4e0b\u53bb\uff0c\u76f4\u81f3\u5806\u4e2d\u5143\u7d20\u88ab\u53d6\u7a7a\u4e3a\u6b62","title":"\u601d\u8def"},{"location":"%E5%A0%86/leetcode23-%E5%90%88%E5%B9%B6K%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8/#_4","text":"class Solution { public : ListNode * mergeKLists ( vector < ListNode *>& lists ) { struct cmp { bool operator ()( ListNode * a , ListNode * b ){ return a -> val > b -> val ; } }; ListNode * dumpy = new ListNode ( 0 ); ListNode * tail = dumpy ; //\u521b\u5efa\u4e00\u4e2a\u5c0f\u6839\u5806 priority_queue < ListNode * , vector < ListNode *> , cmp > min_heap ; //\u5c06\u6bcf\u4e2a\u94fe\u8868\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u90fd\u52a0\u5165\u5230\u5806\u4e2d for ( auto listnode : lists ) { if ( listnode ) min_heap . push ( listnode ); } //\u9009\u51fa\u6700\u5c0f\u7684\u5143\u7d20(\u5806\u9876\u5143\u7d20),\u653e\u5230\u65b0\u7684\u94fe\u8868\u4e2d,\u76f4\u5230\u5806\u4e3a\u7a7a while ( ! min_heap . empty ()){ tail -> next = min_heap . top (); min_heap . pop (); tail = tail -> next ; if ( tail -> next ) min_heap . push ( tail -> next ); } return dumpy -> next ; } };","title":"\u4ee3\u7801"},{"location":"%E5%A0%86/leetcode23-%E5%90%88%E5%B9%B6K%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(kn*logK)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%A0%86/leetcode88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4f60\u4e24\u4e2a\u6709\u5e8f\u6574\u6570\u6570\u7ec4 nums1 \u548c nums2\uff0c\u8bf7\u4f60\u5c06 nums2 \u5408\u5e76\u5230 nums1 \u4e2d\uff0c\u4f7f nums1 \u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002 \u521d\u59cb\u5316 nums1 \u548c nums2 \u7684\u5143\u7d20\u6570\u91cf\u5206\u522b\u4e3a m \u548c n \u3002\u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u7684\u7a7a\u95f4\u5927\u5c0f\u7b49\u4e8e m + n\uff0c\u8fd9\u6837\u5b83\u5c31\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u4fdd\u5b58\u6765\u81ea nums2 \u7684\u5143\u7d20\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1anums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 \u8f93\u51fa\uff1a[1,2,2,3,5,6] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1anums1 = [1], m = 1, nums2 = [], n = 0 \u8f93\u51fa\uff1a[1] \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/merge-sorted-array \u601d\u8def \u00b6 !!! \"\u53cc\u6307\u9488\uff0c\u5f52\u5e76\" \u8fd9\u4e2a\u505a\u6cd5\u5c31\u662f\u5f52\u5e76\u6392\u5e8f\u4e2d\u5bf9\u6bcf\u4e00\u4e2a\u5c0f\u6bb5\u8fdb\u884c\u5408\u5e76\u7684\u64cd\u4f5c \u8bbe\u7f6e\u4e24\u4e2a\u6307\u9488\u5206\u522b\u4e3a\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u9996\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386 \u4ee3\u7801 \u00b6 class Solution { public : void merge ( vector < int >& nums1 , int m , vector < int >& nums2 , int n ) { //\u53cc\u6307\u9488 int i = 0 , j = 0 , k = 0 ; int res [ m + n ]; while ( i < m && j < n ){ if ( nums1 [ i ] <= nums2 [ j ]) res [ k ++ ] = nums1 [ i ++ ]; else res [ k ++ ] = nums2 [ j ++ ]; } while ( i < m ) res [ k ++ ] = nums1 [ i ++ ]; while ( j < n ) res [ k ++ ] = nums2 [ j ++ ]; for ( int i = 0 ; i < m + n ; i ++ ){ nums1 [ i ] = res [ i ]; } } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N+M)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n + m)","title":"leetcode88-\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4.md"},{"location":"%E5%A0%86/leetcode88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/#_1","text":"\u7ed9\u4f60\u4e24\u4e2a\u6709\u5e8f\u6574\u6570\u6570\u7ec4 nums1 \u548c nums2\uff0c\u8bf7\u4f60\u5c06 nums2 \u5408\u5e76\u5230 nums1 \u4e2d\uff0c\u4f7f nums1 \u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002 \u521d\u59cb\u5316 nums1 \u548c nums2 \u7684\u5143\u7d20\u6570\u91cf\u5206\u522b\u4e3a m \u548c n \u3002\u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u7684\u7a7a\u95f4\u5927\u5c0f\u7b49\u4e8e m + n\uff0c\u8fd9\u6837\u5b83\u5c31\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u4fdd\u5b58\u6765\u81ea nums2 \u7684\u5143\u7d20\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1anums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 \u8f93\u51fa\uff1a[1,2,2,3,5,6] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1anums1 = [1], m = 1, nums2 = [], n = 0 \u8f93\u51fa\uff1a[1]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%A0%86/leetcode88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/#_2","text":"https://leetcode-cn.com/problems/merge-sorted-array","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%A0%86/leetcode88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/#_3","text":"!!! \"\u53cc\u6307\u9488\uff0c\u5f52\u5e76\" \u8fd9\u4e2a\u505a\u6cd5\u5c31\u662f\u5f52\u5e76\u6392\u5e8f\u4e2d\u5bf9\u6bcf\u4e00\u4e2a\u5c0f\u6bb5\u8fdb\u884c\u5408\u5e76\u7684\u64cd\u4f5c \u8bbe\u7f6e\u4e24\u4e2a\u6307\u9488\u5206\u522b\u4e3a\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u9996\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386","title":"\u601d\u8def"},{"location":"%E5%A0%86/leetcode88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/#_4","text":"class Solution { public : void merge ( vector < int >& nums1 , int m , vector < int >& nums2 , int n ) { //\u53cc\u6307\u9488 int i = 0 , j = 0 , k = 0 ; int res [ m + n ]; while ( i < m && j < n ){ if ( nums1 [ i ] <= nums2 [ j ]) res [ k ++ ] = nums1 [ i ++ ]; else res [ k ++ ] = nums2 [ j ++ ]; } while ( i < m ) res [ k ++ ] = nums1 [ i ++ ]; while ( j < n ) res [ k ++ ] = nums2 [ j ++ ]; for ( int i = 0 ; i < m + n ; i ++ ){ nums1 [ i ] = res [ i ]; } } };","title":"\u4ee3\u7801"},{"location":"%E5%A0%86/leetcode88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N+M)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n + m)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/leetcode28-%E5%AE%9E%E7%8E%B0strStr%28%29/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u5b9e\u73b0 strStr() \u51fd\u6570\u3002 \u7ed9\u5b9a\u4e00\u4e2a haystack \u5b57\u7b26\u4e32\u548c\u4e00\u4e2a needle \u5b57\u7b26\u4e32\uff0c\u5728 haystack \u5b57\u7b26\u4e32\u4e2d\u627e\u51fa needle \u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e (\u4ece0\u5f00\u59cb)\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de -1\u3002 \u793a\u4f8b 1: \u8f93\u5165: haystack = \"hello\", needle = \"ll\" \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: haystack = \"aaaaa\", needle = \"bba\" \u8f93\u51fa: -1 \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/implement-strstr \u601d\u8def \u00b6 \u66b4\u529b\u6c42\u89e3 \u6839\u636e\u5b50\u4e32\u6765\u904d\u5386\u957f\u4e32\u4e2d\u622a\u53d6\u7684\u90e8\u5206\u5b57\u7b26\u4e32 \u5728\u904d\u5386\u957f\u4e32\u7684\u65f6\u5019\uff0c\u8fb9\u754c\u503c\u662f\u53ef\u4ee5\u53d6\u5230\u6b63\u597d\u7b49\u4e8es-t\u7684\uff0c\u56e0\u4e3a\u8003\u8651\u5230\u5b50\u4e32\u548c\u957f\u4e32\u957f\u5ea6\u90fd\u4e3a1\u65f6\uff1b\u8fd8\u6709\u5f53\u5b50\u4e32\u4e3a\u7a7a\u4e32\u7684\u65f6\u5019\uff0c\u5e94\u8be5\u8fd4\u56de0 \u8fd8\u53ef\u4ee5\u4f7f\u7528RK\u548c\uff2b\uff2d\uff30\u8fdb\u884c\u4f18\u5316\uff0c\u8fd9\u4e2a\u540e\u9762\u8865\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e \u4ee3\u7801 \u00b6 class Solution { public : int strStr ( string haystack , string needle ) { int i = 0 ; int s = haystack . size (); int t = needle . size (); if ( ! t ) return 0 ; //\u6ce8\u610f\u8fd9\u91cc\u8fb9\u754c\u60c5\u51b5\uff0c\u5f53\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u7b49\u7684\u65f6\u5019\uff0c\u8fd9\u91cc\u662f\u9700\u8981\u904d\u5386\u5230s-t\u7684 for ( i = 0 ; i <= s - t ; i ++ ){ if ( haystack . substr ( i , t ) == needle ) return i ; } return -1 ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u66b4\u529b\u6c42\u89e3\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(m*n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"leetcode28-\u5b9e\u73b0strStr()"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/leetcode28-%E5%AE%9E%E7%8E%B0strStr%28%29/#_1","text":"\u5b9e\u73b0 strStr() \u51fd\u6570\u3002 \u7ed9\u5b9a\u4e00\u4e2a haystack \u5b57\u7b26\u4e32\u548c\u4e00\u4e2a needle \u5b57\u7b26\u4e32\uff0c\u5728 haystack \u5b57\u7b26\u4e32\u4e2d\u627e\u51fa needle \u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e (\u4ece0\u5f00\u59cb)\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de -1\u3002 \u793a\u4f8b 1: \u8f93\u5165: haystack = \"hello\", needle = \"ll\" \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: haystack = \"aaaaa\", needle = \"bba\" \u8f93\u51fa: -1","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/leetcode28-%E5%AE%9E%E7%8E%B0strStr%28%29/#_2","text":"https://leetcode-cn.com/problems/implement-strstr","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/leetcode28-%E5%AE%9E%E7%8E%B0strStr%28%29/#_3","text":"\u66b4\u529b\u6c42\u89e3 \u6839\u636e\u5b50\u4e32\u6765\u904d\u5386\u957f\u4e32\u4e2d\u622a\u53d6\u7684\u90e8\u5206\u5b57\u7b26\u4e32 \u5728\u904d\u5386\u957f\u4e32\u7684\u65f6\u5019\uff0c\u8fb9\u754c\u503c\u662f\u53ef\u4ee5\u53d6\u5230\u6b63\u597d\u7b49\u4e8es-t\u7684\uff0c\u56e0\u4e3a\u8003\u8651\u5230\u5b50\u4e32\u548c\u957f\u4e32\u957f\u5ea6\u90fd\u4e3a1\u65f6\uff1b\u8fd8\u6709\u5f53\u5b50\u4e32\u4e3a\u7a7a\u4e32\u7684\u65f6\u5019\uff0c\u5e94\u8be5\u8fd4\u56de0 \u8fd8\u53ef\u4ee5\u4f7f\u7528RK\u548c\uff2b\uff2d\uff30\u8fdb\u884c\u4f18\u5316\uff0c\u8fd9\u4e2a\u540e\u9762\u8865\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e","title":"\u601d\u8def"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/leetcode28-%E5%AE%9E%E7%8E%B0strStr%28%29/#_4","text":"class Solution { public : int strStr ( string haystack , string needle ) { int i = 0 ; int s = haystack . size (); int t = needle . size (); if ( ! t ) return 0 ; //\u6ce8\u610f\u8fd9\u91cc\u8fb9\u754c\u60c5\u51b5\uff0c\u5f53\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u7b49\u7684\u65f6\u5019\uff0c\u8fd9\u91cc\u662f\u9700\u8981\u904d\u5386\u5230s-t\u7684 for ( i = 0 ; i <= s - t ; i ++ ){ if ( haystack . substr ( i , t ) == needle ) return i ; } return -1 ; } };","title":"\u4ee3\u7801"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/leetcode28-%E5%AE%9E%E7%8E%B0strStr%28%29/#_5","text":"\u66b4\u529b\u6c42\u89e3\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(m*n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode1381-%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E5%A2%9E%E9%87%8F%E6%93%8D%E4%BD%9C%E7%9A%84%E6%A0%88/","text":"\u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/design-a-stack-with-increment-operation/ \u601d\u8def\uff1a \u00b6 \u91c7\u7528\u6570\u7ec4\u8fdb\u884c\u6a21\u62df \u4ee3\u7801(cpp) \u00b6 class CustomStack { public : int top ; vector < int > simu_stack ; //\u7528\u6570\u7ec4\u6765\u6a21\u62df\u6808 CustomStack ( int maxSize ) { simu_stack . resize ( maxSize ); top = -1 ; } void push ( int x ) { if ( top != simu_stack . size () - 1 ){ top ++ ; simu_stack [ top ] = x ; } } int pop () { if ( top != -1 ){ //\u5148top-- top -- ; //\u7136\u540e\u8fd4\u56de\u6808\u9876\uff0c\u6240\u4ee5\u6808\u9876\u5e94\u8be5\u662f\u6ca1\u6709--\u65f6\u7684\uff0c\u6240\u4ee5\u9700\u8981+1 return simu_stack [ top + 1 ]; } return -1 ; } void increment ( int k , int val ) { int num = min ( k , top + 1 ); //top + 1\u662f\u56e0\u4e3atop\u662f\u6570\u7ec4\u4e0b\u6807 for ( int i = 0 ; i < num ; ++ i ){ simu_stack [ i ] += val ; } } }; \u590d\u6742\u5ea6\u5206\u6790\uff1a \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5165\u6808\u548c\u51fa\u6808\u90fd\u662fO(1)\uff0c\u589e\u52a0\u5143\u7d20\u503c\u7684\u64cd\u4f5c\u590d\u6742\u5ea6\u4e3aO(n)\uff1b\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n) \u4e0a\u9762\u8fd9\u79cd\u505a\u6cd5\u6709\u4e00\u70b9\u4e0d\u592a\u597d\u7684\u5c31\u662f\u589e\u52a0\u5176\u4e2d\u6808\u9876\u67d0\u4e9b\u5143\u7d20\u503c\u7684\u65f6\u5019\u590d\u6742\u5ea6\u6bd4\u8f83\u9ad8 \u4f18\u5316\uff08\u5229\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\uff09 \u00b6 \u4f18\u5316\u7684\u601d\u8def\u4e3b\u8981\u662f\u51fa\u4e8e\uff0c\u672c\u9898\u7684\u8981\u6c42\u662f\u589e\u52a0\u7684\u662f\u6808\u5e95\u8fde\u7eed\u51e0\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u9047\u5230\u8fd9\u79cd\u95ee\u9898\uff0c\u5e94\u8be5\u60f3\u5230\u524d\u7f00\u548c\uff0c\u901a\u8fc7\u4e00\u4e2a\u503c\u4e0d\u65ad\u7d2f\u52a0\uff0c\u6240\u4ee5\u5bf9\u4e8e\u589e\u52a0\u6808\u5e95\u7684\u51e0\u4e2a\u5143\u7d20\u503c\u65f6\uff0c\u53ef\u4ee5\u4e0d\u7528\u5faa\u73af\uff0c\u800c\u662f\u65b0\u5f00\u8f9f\u4e00\u4e2a\u6570\u7ec4inc\uff0c\u7528\u6765\u8bb0\u5f55\u589e\u52a0\u503c\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\uff1a increament(2,3) \u5373\u5c06\u6808\u5e95\u7684\u4e24\u4e2a\u5143\u7d20\u90fd\u589e\u52a03\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06inc[2] = 3\uff0cinc\u4e2d\u7684\u7d22\u5f15\u8bb0\u5f55\u7684\u662f\u589e\u52a0\u7684\u6808\u5e95\u5143\u7d20\u4e2a\u6570\uff0c\u503c\u4e3a\u589e\u52a0\u7684\u503c\u3002\u8fd9\u6837\u6211\u4eec\u5c06\u8981\u589e\u52a0\u7684\u503c\u653e\u5728inc\u6570\u7ec4\u4e2d\uff0c\u7b49\u5230\u8981pop\u53d6\u7684\u65f6\u5019\u6211\u4eec\u518d\u8ba1\u7b97\u6808\u9876\u5143\u7d20\u7684\u503c\uff0c\u5373 simu_stack[top] + inc[top] \uff0c\u7136\u540e\u5c06 inc[top] \u7684\u503c\u4f20\u9012\u5230\u4e0b\u4e00\u4e2a\u5143\u7d20 inc[top - 1] \uff0c\u7136\u540e\u5c06 inc[top] = 0 \uff08\u4e0b\u4e00\u6b21\u518d\u91cd\u65b0\u8d4b\u503c\uff09\uff0c\u7b49\u5f85\u4e0b\u4e00\u6b21\u53d6\u7684\u65f6\u5019\u518d simu_stack[top] + inc[top] ,\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u4e00\u6bb5\u8fde\u7eed\u5143\u7d20\u90fd\u589e\u52a0\u7684\u64cd\u4f5c \u5bf9\u4e8epush\u64cd\u4f5c\u4e0d\u53d8\uff0cpop \u4ee3\u7801\uff1a \u00b6 class CustomStack { public : int top ; vector < int > simu_stack ; //\u7528\u6570\u7ec4\u6765\u6a21\u62df\u6808 vector < int > inc ; //\u8bb0\u5f55\u589e\u52a0\u7684\u503c CustomStack ( int maxSize ) { simu_stack . resize ( maxSize ); inc . resize ( maxSize ); top = -1 ; } void push ( int x ) { if ( top != simu_stack . size () - 1 ){ top ++ ; simu_stack [ top ] = x ; } } int pop () { if ( top == -1 ){ return -1 ; } int res = simu_stack [ top ] + inc [ top ]; if ( top != 0 ){ inc [ top - 1 ] += inc [ top ]; } inc [ top ] = 0 ; top -- ; return res ; } void increment ( int k , int val ) { int num = min ( k -1 , top ); //k-1\u662f\u56e0\u4e3ainc\u6570\u7ec4\u662f\u4ee5\u4e0b\u68070\u5f00\u59cb\u7684 if ( num >= 0 ){ inc [ num ] += val ; } } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u662fO(1)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)","title":"leetcode1381-\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u589e\u91cf\u64cd\u4f5c\u7684\u6808"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode1381-%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E5%A2%9E%E9%87%8F%E6%93%8D%E4%BD%9C%E7%9A%84%E6%A0%88/#_1","text":"https://leetcode-cn.com/problems/design-a-stack-with-increment-operation/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode1381-%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E5%A2%9E%E9%87%8F%E6%93%8D%E4%BD%9C%E7%9A%84%E6%A0%88/#_2","text":"\u91c7\u7528\u6570\u7ec4\u8fdb\u884c\u6a21\u62df","title":"\u601d\u8def\uff1a"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode1381-%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E5%A2%9E%E9%87%8F%E6%93%8D%E4%BD%9C%E7%9A%84%E6%A0%88/#cpp","text":"class CustomStack { public : int top ; vector < int > simu_stack ; //\u7528\u6570\u7ec4\u6765\u6a21\u62df\u6808 CustomStack ( int maxSize ) { simu_stack . resize ( maxSize ); top = -1 ; } void push ( int x ) { if ( top != simu_stack . size () - 1 ){ top ++ ; simu_stack [ top ] = x ; } } int pop () { if ( top != -1 ){ //\u5148top-- top -- ; //\u7136\u540e\u8fd4\u56de\u6808\u9876\uff0c\u6240\u4ee5\u6808\u9876\u5e94\u8be5\u662f\u6ca1\u6709--\u65f6\u7684\uff0c\u6240\u4ee5\u9700\u8981+1 return simu_stack [ top + 1 ]; } return -1 ; } void increment ( int k , int val ) { int num = min ( k , top + 1 ); //top + 1\u662f\u56e0\u4e3atop\u662f\u6570\u7ec4\u4e0b\u6807 for ( int i = 0 ; i < num ; ++ i ){ simu_stack [ i ] += val ; } } };","title":"\u4ee3\u7801(cpp)"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode1381-%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E5%A2%9E%E9%87%8F%E6%93%8D%E4%BD%9C%E7%9A%84%E6%A0%88/#_3","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5165\u6808\u548c\u51fa\u6808\u90fd\u662fO(1)\uff0c\u589e\u52a0\u5143\u7d20\u503c\u7684\u64cd\u4f5c\u590d\u6742\u5ea6\u4e3aO(n)\uff1b\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n) \u4e0a\u9762\u8fd9\u79cd\u505a\u6cd5\u6709\u4e00\u70b9\u4e0d\u592a\u597d\u7684\u5c31\u662f\u589e\u52a0\u5176\u4e2d\u6808\u9876\u67d0\u4e9b\u5143\u7d20\u503c\u7684\u65f6\u5019\u590d\u6742\u5ea6\u6bd4\u8f83\u9ad8","title":"\u590d\u6742\u5ea6\u5206\u6790\uff1a"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode1381-%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E5%A2%9E%E9%87%8F%E6%93%8D%E4%BD%9C%E7%9A%84%E6%A0%88/#_4","text":"\u4f18\u5316\u7684\u601d\u8def\u4e3b\u8981\u662f\u51fa\u4e8e\uff0c\u672c\u9898\u7684\u8981\u6c42\u662f\u589e\u52a0\u7684\u662f\u6808\u5e95\u8fde\u7eed\u51e0\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u9047\u5230\u8fd9\u79cd\u95ee\u9898\uff0c\u5e94\u8be5\u60f3\u5230\u524d\u7f00\u548c\uff0c\u901a\u8fc7\u4e00\u4e2a\u503c\u4e0d\u65ad\u7d2f\u52a0\uff0c\u6240\u4ee5\u5bf9\u4e8e\u589e\u52a0\u6808\u5e95\u7684\u51e0\u4e2a\u5143\u7d20\u503c\u65f6\uff0c\u53ef\u4ee5\u4e0d\u7528\u5faa\u73af\uff0c\u800c\u662f\u65b0\u5f00\u8f9f\u4e00\u4e2a\u6570\u7ec4inc\uff0c\u7528\u6765\u8bb0\u5f55\u589e\u52a0\u503c\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\uff1a increament(2,3) \u5373\u5c06\u6808\u5e95\u7684\u4e24\u4e2a\u5143\u7d20\u90fd\u589e\u52a03\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06inc[2] = 3\uff0cinc\u4e2d\u7684\u7d22\u5f15\u8bb0\u5f55\u7684\u662f\u589e\u52a0\u7684\u6808\u5e95\u5143\u7d20\u4e2a\u6570\uff0c\u503c\u4e3a\u589e\u52a0\u7684\u503c\u3002\u8fd9\u6837\u6211\u4eec\u5c06\u8981\u589e\u52a0\u7684\u503c\u653e\u5728inc\u6570\u7ec4\u4e2d\uff0c\u7b49\u5230\u8981pop\u53d6\u7684\u65f6\u5019\u6211\u4eec\u518d\u8ba1\u7b97\u6808\u9876\u5143\u7d20\u7684\u503c\uff0c\u5373 simu_stack[top] + inc[top] \uff0c\u7136\u540e\u5c06 inc[top] \u7684\u503c\u4f20\u9012\u5230\u4e0b\u4e00\u4e2a\u5143\u7d20 inc[top - 1] \uff0c\u7136\u540e\u5c06 inc[top] = 0 \uff08\u4e0b\u4e00\u6b21\u518d\u91cd\u65b0\u8d4b\u503c\uff09\uff0c\u7b49\u5f85\u4e0b\u4e00\u6b21\u53d6\u7684\u65f6\u5019\u518d simu_stack[top] + inc[top] ,\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u4e00\u6bb5\u8fde\u7eed\u5143\u7d20\u90fd\u589e\u52a0\u7684\u64cd\u4f5c \u5bf9\u4e8epush\u64cd\u4f5c\u4e0d\u53d8\uff0cpop","title":"\u4f18\u5316\uff08\u5229\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\uff09"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode1381-%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E5%A2%9E%E9%87%8F%E6%93%8D%E4%BD%9C%E7%9A%84%E6%A0%88/#_5","text":"class CustomStack { public : int top ; vector < int > simu_stack ; //\u7528\u6570\u7ec4\u6765\u6a21\u62df\u6808 vector < int > inc ; //\u8bb0\u5f55\u589e\u52a0\u7684\u503c CustomStack ( int maxSize ) { simu_stack . resize ( maxSize ); inc . resize ( maxSize ); top = -1 ; } void push ( int x ) { if ( top != simu_stack . size () - 1 ){ top ++ ; simu_stack [ top ] = x ; } } int pop () { if ( top == -1 ){ return -1 ; } int res = simu_stack [ top ] + inc [ top ]; if ( top != 0 ){ inc [ top - 1 ] += inc [ top ]; } inc [ top ] = 0 ; top -- ; return res ; } void increment ( int k , int val ) { int num = min ( k -1 , top ); //k-1\u662f\u56e0\u4e3ainc\u6570\u7ec4\u662f\u4ee5\u4e0b\u68070\u5f00\u59cb\u7684 if ( num >= 0 ){ inc [ num ] += val ; } } };","title":"\u4ee3\u7801\uff1a"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode1381-%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E5%A2%9E%E9%87%8F%E6%93%8D%E4%BD%9C%E7%9A%84%E6%A0%88/#_6","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u662fO(1)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec '('\uff0c')'\uff0c'{'\uff0c'}'\uff0c'['\uff0c']' \u7684\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002 \u6709\u6548\u5b57\u7b26\u4e32\u9700\u6ee1\u8db3\uff1a \u5de6\u62ec\u53f7\u5fc5\u987b\u7528\u76f8\u540c\u7c7b\u578b\u7684\u53f3\u62ec\u53f7\u95ed\u5408\u3002 \u5de6\u62ec\u53f7\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u95ed\u5408\u3002 \u6ce8\u610f\u7a7a\u5b57\u7b26\u4e32\u53ef\u88ab\u8ba4\u4e3a\u662f\u6709\u6548\u5b57\u7b26\u4e32\u3002 \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/valid-parentheses \u601d\u8def \u00b6 \u6808+hash\u8868 \u4e00\u822c\u9047\u5230 \u62ec\u53f7\u7684\u95ee\u9898 \u90fd\u662f\u91c7\u7528 \u6808 \u6765\u8fdb\u884c\u89e3\u51b3\uff1b\u904d\u5386\u5b57\u7b26\u4e32 \u5f53\u904d\u5386\u9047\u5230\u6240\u6709 \u5de6\u62ec\u53f7 \u65f6 \u5165\u6808 \u5f53\u904d\u5386\u9047\u5230 \u53f3\u62ec\u53f7 \u7684\u65f6\u5019\uff08\u9996\u5148\u5224\u65ad\u6808\u662f\u5426\u4e3a\u7a7a\uff0c\u56e0\u4e3a\u5982\u679c\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e3a\"}\"\uff0c\u90a3\u4e48\u9996\u5148\u5c31\u662f\u4e0d\u7b26\u5408\uff0c\u76f4\u63a5\u8fd4\u56defalse\uff09 \u5f39\u51fa\u6808\u9876 \u5143\u7d20\uff0c\u7136\u540e\u53bbhash\u8868\u4e2d\u67e5\u627e\u662f\u5426\u5f53\u524d\u5f39\u51fa\u7684\u5143\u7d20\u4e0e\u8be5\u53f3\u62ec\u53f7\u5728hash\u8868\u4e2d\u5bf9\u5e94\u7684\u5b57\u7b26\u662f\u5426\u76f8\u7b49\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\u90a3\u4e48\u8fd4\u56defalse\u3002 \u5982\u679c \u904d\u5386\u5b8c\u5b57\u7b26\u4e32 \u540e\uff0c \u6808\u91cc\u9762\u8fd8\u6709\u5143\u7d20 \uff0c\u90a3\u4e48\u8bf4\u660e \u5b58\u5728\u8fd8\u6ca1\u6709\u5339\u914d\u7684\u5de6\u62ec\u53f7 \uff0c\u8fd4\u56defalse\uff0c\u5426\u5219\u5c31\u8fd4\u56detrue\uff0c\u8868\u793a\u6b63\u597d\u5168\u90e8\u5339\u914d \u4ee3\u7801 \u00b6 class Solution { public : bool isValid ( string s ) { stack < char > stk ; unordered_map < char , char > strMap ; strMap [ ')' ] = '(' ; strMap [ ']' ] = '[' ; strMap [ '}' ] = '{' ; for ( int i = 0 ; i < s . size (); i ++ ){ if ( s [ i ] == '(' || s [ i ] == '[' || s [ i ] == '{' ) stk . push ( s [ i ]); N else if ( s [ i ] == ')' || s [ i ] == ']' || s [ i ] == '}' ){ if ( stk . empty ()) return false ; int tempstr = stk . top (); stk . pop (); if ( tempstr != strMap [ s [ i ]]) return false ; } } if ( ! stk . empty ()) return false ; return true ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N)","title":"leetcode20-\u6709\u6548\u7684\u62ec\u53f7"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec '('\uff0c')'\uff0c'{'\uff0c'}'\uff0c'['\uff0c']' \u7684\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002 \u6709\u6548\u5b57\u7b26\u4e32\u9700\u6ee1\u8db3\uff1a \u5de6\u62ec\u53f7\u5fc5\u987b\u7528\u76f8\u540c\u7c7b\u578b\u7684\u53f3\u62ec\u53f7\u95ed\u5408\u3002 \u5de6\u62ec\u53f7\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u95ed\u5408\u3002 \u6ce8\u610f\u7a7a\u5b57\u7b26\u4e32\u53ef\u88ab\u8ba4\u4e3a\u662f\u6709\u6548\u5b57\u7b26\u4e32\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/#_2","text":"https://leetcode-cn.com/problems/valid-parentheses","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/#_3","text":"\u6808+hash\u8868 \u4e00\u822c\u9047\u5230 \u62ec\u53f7\u7684\u95ee\u9898 \u90fd\u662f\u91c7\u7528 \u6808 \u6765\u8fdb\u884c\u89e3\u51b3\uff1b\u904d\u5386\u5b57\u7b26\u4e32 \u5f53\u904d\u5386\u9047\u5230\u6240\u6709 \u5de6\u62ec\u53f7 \u65f6 \u5165\u6808 \u5f53\u904d\u5386\u9047\u5230 \u53f3\u62ec\u53f7 \u7684\u65f6\u5019\uff08\u9996\u5148\u5224\u65ad\u6808\u662f\u5426\u4e3a\u7a7a\uff0c\u56e0\u4e3a\u5982\u679c\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e3a\"}\"\uff0c\u90a3\u4e48\u9996\u5148\u5c31\u662f\u4e0d\u7b26\u5408\uff0c\u76f4\u63a5\u8fd4\u56defalse\uff09 \u5f39\u51fa\u6808\u9876 \u5143\u7d20\uff0c\u7136\u540e\u53bbhash\u8868\u4e2d\u67e5\u627e\u662f\u5426\u5f53\u524d\u5f39\u51fa\u7684\u5143\u7d20\u4e0e\u8be5\u53f3\u62ec\u53f7\u5728hash\u8868\u4e2d\u5bf9\u5e94\u7684\u5b57\u7b26\u662f\u5426\u76f8\u7b49\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\u90a3\u4e48\u8fd4\u56defalse\u3002 \u5982\u679c \u904d\u5386\u5b8c\u5b57\u7b26\u4e32 \u540e\uff0c \u6808\u91cc\u9762\u8fd8\u6709\u5143\u7d20 \uff0c\u90a3\u4e48\u8bf4\u660e \u5b58\u5728\u8fd8\u6ca1\u6709\u5339\u914d\u7684\u5de6\u62ec\u53f7 \uff0c\u8fd4\u56defalse\uff0c\u5426\u5219\u5c31\u8fd4\u56detrue\uff0c\u8868\u793a\u6b63\u597d\u5168\u90e8\u5339\u914d","title":"\u601d\u8def"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/#_4","text":"class Solution { public : bool isValid ( string s ) { stack < char > stk ; unordered_map < char , char > strMap ; strMap [ ')' ] = '(' ; strMap [ ']' ] = '[' ; strMap [ '}' ] = '{' ; for ( int i = 0 ; i < s . size (); i ++ ){ if ( s [ i ] == '(' || s [ i ] == '[' || s [ i ] == '{' ) stk . push ( s [ i ]); N else if ( s [ i ] == ')' || s [ i ] == ']' || s [ i ] == '}' ){ if ( stk . empty ()) return false ; int tempstr = stk . top (); stk . pop (); if ( tempstr != strMap [ s [ i ]]) return false ; } } if ( ! stk . empty ()) return false ; return true ; } };","title":"\u4ee3\u7801"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/","text":"\u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/shortest-distance-to-a-character/ \u89e3\u9898\u601d\u8def \u00b6 \u5de6\u53f3\u4e24\u8fb9\u8fdb\u884c\u904d\u5386\uff0c\u5206\u522b\u627e\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u8ddd\u79bb\u5de6\u8fb9C\u6700\u8fd1\u7684\u8ddd\u79bb\u548c\u8ddd\u79bb\u53f3\u8fb9C\u6700\u8fd1\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u53d6\u4e24\u8005\u4e2d\u7684\u8f83\u5c0f\u8005 \u4ee3\u7801 \u00b6 class Solution { public : vector < int > shortestToChar ( string S , char C ) { vector < int > distance ( S . size (), 0 ); //pivot\u53d6\u5f97\u662f\u5f88\u5c0f\u7684\u503c\uff0c\u56e0\u4e3a\u662f\u88ab\u51cf\u7684\uff0c\u5982\u679c\u6ca1\u627e\u5230\uff0c\u8ddd\u79bb\u5c31\u4f1a\u5f88\u5927 int pivot = INT_MIN / 2 ; //INT_MIN\u662f\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u6570 //\u4ece\u5de6\u5411\u53f3\u904d\u5386\uff0c\u5bfb\u627eS\u4e2d\u6bcf\u4e00\u4e2a\u5b57\u7b26\u5de6\u8fb9\u8ddd\u79bbC\u7684\u6700\u8fd1\u8ddd\u79bb\uff0c\u5373i - pivot for ( int i = 0 ; i < S . size (); i ++ ){ if ( S [ i ] == C ) pivot = i ; //\u5982\u679c\u6ca1\u627e\u5230C\uff0c\u8ddd\u79bb\u5c31\u5f88\u5927 distance [ i ] = i - pivot ; } //\u4ece\u53f3\u5f80\u5de6\u904d\u5386\uff0c\u5bfb\u627eS\u4e2d\u6bcf\u4e00\u4e2a\u5b57\u7b26\u53f3\u8fb9\u8ddd\u79bbC\u7684\u6700\u8fd1\u8ddd\u79bb\uff0c\u5373pivot - i //pivot\u53d6\u5f97\u662f\u6700\u5927\u503c\uff0c\u56e0\u4e3a\u540e\u9762\u662fpivot - i\uff0c\u5982\u679c\u6ca1\u627e\u5230\u8ddd\u79bb\u5c31\u7279\u522b\u5927 pivot = INT_MAX / 2 ; //INT_MAX\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6570 for ( int i = S . size () - 1 ; i >= 0 ; i -- ){ if ( S [ i ] == C ) pivot = i ; //\u53d6\u4e24\u8fb9\u8ddd\u79bb\u7684\u8f83\u5c0f\u8005 distance [ i ] = min ( distance [ i ], pivot - i ); } return distance ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n),\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n) \u6267\u884c\u7528\u65f6\uff1a0 ms, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237 \u5185\u5b58\u6d88\u8017\uff1a7.3 MB, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237","title":"leetcode232-\u7528\u6808\u5b9e\u73b0\u961f\u5217"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/#_1","text":"https://leetcode-cn.com/problems/shortest-distance-to-a-character/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/#_2","text":"\u5de6\u53f3\u4e24\u8fb9\u8fdb\u884c\u904d\u5386\uff0c\u5206\u522b\u627e\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u8ddd\u79bb\u5de6\u8fb9C\u6700\u8fd1\u7684\u8ddd\u79bb\u548c\u8ddd\u79bb\u53f3\u8fb9C\u6700\u8fd1\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u53d6\u4e24\u8005\u4e2d\u7684\u8f83\u5c0f\u8005","title":"\u89e3\u9898\u601d\u8def"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/#_3","text":"class Solution { public : vector < int > shortestToChar ( string S , char C ) { vector < int > distance ( S . size (), 0 ); //pivot\u53d6\u5f97\u662f\u5f88\u5c0f\u7684\u503c\uff0c\u56e0\u4e3a\u662f\u88ab\u51cf\u7684\uff0c\u5982\u679c\u6ca1\u627e\u5230\uff0c\u8ddd\u79bb\u5c31\u4f1a\u5f88\u5927 int pivot = INT_MIN / 2 ; //INT_MIN\u662f\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u6570 //\u4ece\u5de6\u5411\u53f3\u904d\u5386\uff0c\u5bfb\u627eS\u4e2d\u6bcf\u4e00\u4e2a\u5b57\u7b26\u5de6\u8fb9\u8ddd\u79bbC\u7684\u6700\u8fd1\u8ddd\u79bb\uff0c\u5373i - pivot for ( int i = 0 ; i < S . size (); i ++ ){ if ( S [ i ] == C ) pivot = i ; //\u5982\u679c\u6ca1\u627e\u5230C\uff0c\u8ddd\u79bb\u5c31\u5f88\u5927 distance [ i ] = i - pivot ; } //\u4ece\u53f3\u5f80\u5de6\u904d\u5386\uff0c\u5bfb\u627eS\u4e2d\u6bcf\u4e00\u4e2a\u5b57\u7b26\u53f3\u8fb9\u8ddd\u79bbC\u7684\u6700\u8fd1\u8ddd\u79bb\uff0c\u5373pivot - i //pivot\u53d6\u5f97\u662f\u6700\u5927\u503c\uff0c\u56e0\u4e3a\u540e\u9762\u662fpivot - i\uff0c\u5982\u679c\u6ca1\u627e\u5230\u8ddd\u79bb\u5c31\u7279\u522b\u5927 pivot = INT_MAX / 2 ; //INT_MAX\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6570 for ( int i = S . size () - 1 ; i >= 0 ; i -- ){ if ( S [ i ] == C ) pivot = i ; //\u53d6\u4e24\u8fb9\u8ddd\u79bb\u7684\u8f83\u5c0f\u8005 distance [ i ] = min ( distance [ i ], pivot - i ); } return distance ; } };","title":"\u4ee3\u7801"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/#_4","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n),\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n) \u6267\u884c\u7528\u65f6\uff1a0 ms, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237 \u5185\u5b58\u6d88\u8017\uff1a7.3 MB, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode32-%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b '(' \u548c ')' \u7684\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u6700\u957f\u7684\u5305\u542b\u6709\u6548\u62ec\u53f7\u7684\u5b50\u4e32\u7684\u957f\u5ea6\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"(()\" \u8f93\u51fa: 2 \u89e3\u91ca: \u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u4e3a \"()\" \u793a\u4f8b2 : \u8f93\u5165: \")()())\" \u8f93\u51fa: 4 \u89e3\u91ca: \u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u4e3a \"()()\" \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/longest-valid-parentheses \u601d\u8def \u00b6 \u6808 \u89c2\u5bdf\u9898\u76ee\u8bf4\u7684\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u53ef\u4ee5\u5c06\u6808\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u6807\u53f7\uff0c\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u6ee1\u8db3\u6700\u957f\u7684\u62ec\u53f7\u5bf9\uff0c\u90a3\u4e48\u8fd9\u4e9b\u62ec\u53f7\u5bf9\u6709\u4e0b\u6807\u7684\u8bdd\uff0c\u5b83\u4eec\u80af\u5b9a\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5.......................\u8fd9\u91cc\u8fd8\u9700\u8981\u7406\u89e3\uff01\uff01\uff01\u8fd8\u4e0d\u662f\u7279\u522b\u6e05\u6670 \u4ee3\u7801 \u00b6 class Solution { public : int longestValidParentheses ( string s ) { if ( ! s . size ()) return 0 ; int res = 0 ; stack < int > stk ; //\u8fd9\u91cc\u5fc5\u987b\u8981\u5411\u6808\u4e2d\u538b\u5165-1,\u56e0\u4e3a\u5f53\u4e3a()\u65f6\uff0c\u9047\u5230\")\"\u4f1a\u5c06\u6808\u9876\u5f39\u51fa\uff0c\u7136\u540e\u6b64\u65f6\u4e0b\u6807\u4e3a1\uff0c\u957f\u5ea6\u4e3a1-(-1)=2 stk . push ( -1 ); for ( int i = 0 ; i < s . size (); i ++ ){ if ( s [ i ] == '(' ) stk . push ( i ); else { stk . pop (); if ( stk . empty ()) stk . push ( i ); res = max ( res , i - stk . top ()); } } return res ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)","title":"leetcode32-\u6700\u957f\u6709\u6548\u62ec\u53f7"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode32-%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b '(' \u548c ')' \u7684\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u6700\u957f\u7684\u5305\u542b\u6709\u6548\u62ec\u53f7\u7684\u5b50\u4e32\u7684\u957f\u5ea6\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"(()\" \u8f93\u51fa: 2 \u89e3\u91ca: \u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u4e3a \"()\" \u793a\u4f8b2 : \u8f93\u5165: \")()())\" \u8f93\u51fa: 4 \u89e3\u91ca: \u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u4e3a \"()()\"","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode32-%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/#_2","text":"https://leetcode-cn.com/problems/longest-valid-parentheses","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode32-%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/#_3","text":"\u6808 \u89c2\u5bdf\u9898\u76ee\u8bf4\u7684\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u53ef\u4ee5\u5c06\u6808\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u6807\u53f7\uff0c\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u6ee1\u8db3\u6700\u957f\u7684\u62ec\u53f7\u5bf9\uff0c\u90a3\u4e48\u8fd9\u4e9b\u62ec\u53f7\u5bf9\u6709\u4e0b\u6807\u7684\u8bdd\uff0c\u5b83\u4eec\u80af\u5b9a\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5.......................\u8fd9\u91cc\u8fd8\u9700\u8981\u7406\u89e3\uff01\uff01\uff01\u8fd8\u4e0d\u662f\u7279\u522b\u6e05\u6670","title":"\u601d\u8def"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode32-%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/#_4","text":"class Solution { public : int longestValidParentheses ( string s ) { if ( ! s . size ()) return 0 ; int res = 0 ; stack < int > stk ; //\u8fd9\u91cc\u5fc5\u987b\u8981\u5411\u6808\u4e2d\u538b\u5165-1,\u56e0\u4e3a\u5f53\u4e3a()\u65f6\uff0c\u9047\u5230\")\"\u4f1a\u5c06\u6808\u9876\u5f39\u51fa\uff0c\u7136\u540e\u6b64\u65f6\u4e0b\u6807\u4e3a1\uff0c\u957f\u5ea6\u4e3a1-(-1)=2 stk . push ( -1 ); for ( int i = 0 ; i < s . size (); i ++ ){ if ( s [ i ] == '(' ) stk . push ( i ); else { stk . pop (); if ( stk . empty ()) stk . push ( i ); res = max ( res , i - stk . top ()); } } return res ; } };","title":"\u4ee3\u7801"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode32-%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode394-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81/","text":"\u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/decode-string/ \u601d\u8def \u00b6 \u672c\u9898\u662f\u62ec\u53f7\u5339\u914d\u7684\u95ee\u9898\uff0c\u5bf9\u4e8e\u6570\u5b57\u548c\u5b57\u7b26\u90fd\u5206\u522b\u7528\u4e00\u4e2a\u6808\u6765\u5b58\u653e\uff0c\u5f53\u9047\u5230 [ \u65f6\uff0c\u5c31\u5c06\u6570\u5b57\u548c\u5b57\u7b26\u4e32\u5206\u522b\u5165\u6808\uff0c\u9047\u5230 ] \u65f6\u5c31\u5c06\u6570\u5b57\u548c\u5b57\u7b26\u4e32\u51fa\u6808\uff0c\u5e76\u4e14\u5bf9\u4e8e\u6b64\u65f6\u7684\u5b57\u7b26\u4e32\u6808\u7684\u6808\u9876\u5143\u7d20\u8981\u5faa\u73af\u52a0\u4e0a\u6b64\u65f6\u4fdd\u5b58\u7684\u5b57\u7b26\u4e32\uff0c\u5faa\u73af\u6b21\u6570\u4e3a\u6570\u5b57\u6808\u7684\u6808\u9876\u5143\u7d20\u5927\u5c0f \u4ee3\u7801 \u00b6 class Solution { public : string decodeString ( string s ) { stack < int > nums ; stack < string > strs ; int num = 0 ; string ret = \"\" ; for ( int i = 0 ; i < s . size (); i ++ ){ if ( s [ i ] >= '0' && s [ i ] <= '9' ){ num = num * 10 + s [ i ] - '0' ; } else if (( s [ i ] >= 'a' && s [ i ] <= 'z' ) || ( s [ i ] >= 'A' && s [ i ] <= 'Z' )){ ret += s [ i ]; } else if ( s [ i ] == '[' ){ nums . push ( num ); num = 0 ; strs . push ( ret ); ret = \"\" ; } else if ( s [ i ] == ']' ){ int times = nums . top (); nums . pop (); for ( int i = 0 ; i < times ; i ++ ){ strs . top () += ret ; } ret = strs . top (); strs . pop (); } } return ret ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1aO(n) \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)","title":"leetcode394-\u5b57\u7b26\u4e32\u89e3\u7801"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode394-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81/#_1","text":"https://leetcode-cn.com/problems/decode-string/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode394-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81/#_2","text":"\u672c\u9898\u662f\u62ec\u53f7\u5339\u914d\u7684\u95ee\u9898\uff0c\u5bf9\u4e8e\u6570\u5b57\u548c\u5b57\u7b26\u90fd\u5206\u522b\u7528\u4e00\u4e2a\u6808\u6765\u5b58\u653e\uff0c\u5f53\u9047\u5230 [ \u65f6\uff0c\u5c31\u5c06\u6570\u5b57\u548c\u5b57\u7b26\u4e32\u5206\u522b\u5165\u6808\uff0c\u9047\u5230 ] \u65f6\u5c31\u5c06\u6570\u5b57\u548c\u5b57\u7b26\u4e32\u51fa\u6808\uff0c\u5e76\u4e14\u5bf9\u4e8e\u6b64\u65f6\u7684\u5b57\u7b26\u4e32\u6808\u7684\u6808\u9876\u5143\u7d20\u8981\u5faa\u73af\u52a0\u4e0a\u6b64\u65f6\u4fdd\u5b58\u7684\u5b57\u7b26\u4e32\uff0c\u5faa\u73af\u6b21\u6570\u4e3a\u6570\u5b57\u6808\u7684\u6808\u9876\u5143\u7d20\u5927\u5c0f","title":"\u601d\u8def"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode394-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81/#_3","text":"class Solution { public : string decodeString ( string s ) { stack < int > nums ; stack < string > strs ; int num = 0 ; string ret = \"\" ; for ( int i = 0 ; i < s . size (); i ++ ){ if ( s [ i ] >= '0' && s [ i ] <= '9' ){ num = num * 10 + s [ i ] - '0' ; } else if (( s [ i ] >= 'a' && s [ i ] <= 'z' ) || ( s [ i ] >= 'A' && s [ i ] <= 'Z' )){ ret += s [ i ]; } else if ( s [ i ] == '[' ){ nums . push ( num ); num = 0 ; strs . push ( ret ); ret = \"\" ; } else if ( s [ i ] == ']' ){ int times = nums . top (); nums . pop (); for ( int i = 0 ; i < times ; i ++ ){ strs . top () += ret ; } ret = strs . top (); strs . pop (); } } return ret ; } };","title":"\u4ee3\u7801"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode394-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81/#_4","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1aO(n) \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode66-%E5%8A%A0%E4%B8%80/","text":"\u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/plus-one/ \u9898\u76ee\u63cf\u8ff0\uff1a \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u7531\u6574\u6570\u7ec4\u6210\u7684\u975e\u7a7a\u6570\u7ec4\u6240\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570\uff0c\u5728\u8be5\u6570\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\u3002 \u6700\u9ad8\u4f4d\u6570\u5b57\u5b58\u653e\u5728\u6570\u7ec4\u7684\u9996\u4f4d\uff0c \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6574\u6570 0 \u4e4b\u5916\uff0c\u8fd9\u4e2a\u6574\u6570\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,2,3] \u8f93\u51fa: [1,2,4] \u89e3\u91ca: \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 123\u3002 \u793a\u4f8b 2: \u8f93\u5165: [4,3,2,1] \u8f93\u51fa: [4,3,2,2] \u89e3\u91ca: \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 4321\u3002 lucifer \u63d0\u793a\uff1a \u4e0d\u8981\u52a0\u76f4\u63a5\u6570\u7ec4\u8f6c\u5316\u4e3a\u6570\u5b57\u505a\u52a0\u6cd5\u518d\u8f6c\u56de\u6765\u3002 \u89e3\u9898\u601d\u8def\u4e00 \uff1a \u00b6 \u8fd9\u9898\u662f\u5c06\u4e00\u4e2a\u6570\u7ec4\u8868\u793a\u7684\u6570\u52a0\u4e0a1\uff0c\u7136\u540e\u5c31\u60f3\u5230\u4e4b\u524d\u505a\u8fc7\u7684\u5927\u6574\u6570\u52a0\u6cd5\u8fd0\u7b97\uff0c\u56e0\u4e3a\u662f\u6570\u7ec4\u5b58\u653e\uff0c\u5e76\u4e14\u662f\u52a0\u6cd5\u8fd0\u7b97\uff0c\u53ef\u80fd\u8ba1\u7b97\u5230\u6700\u9ad8\u4f4d\u7684\u65f6\u5019\u4f1a\u4ea7\u751f\u8fdb\u4f4d\uff0c\u6240\u4ee5\u5bf9\u4e8e\u7ed3\u679c\u6570\u7ec4\u4e2d\u7684\u6570\uff0c\u5728\u6570\u7ec4\u7d22\u5f15\u7684\u4f4e\u4f4d\u5b58\u653e\u6570\u7684\u4f4e\u4f4d\uff0c\u5982\u679c\u6709\u8fdb\u4f4d\uff0c\u8fdb\u4f4d\u653e\u5728\u7d22\u5f15\u9ad8\u4f4d\uff0c\u7136\u540e\u5bf9\u7ed3\u679c\u6570\u7ec4\u8fdb\u884c\u53cd\u8f6c\u5373\u53ef\u5f97\u5230\u6700\u540e\u7684\u503c \u5728\u4ee3\u7801\u4e2d\u5b9a\u4e49\u4e00\u4e2at\uff0c\u7528\u6765\u5b58\u653e\u8fdb\u4f4d\uff0c\u521d\u59cb\u4e3a1\uff0c\u5373\u672c\u9898\u7684+1 \u4ee3\u7801(C++) \uff1a \u00b6 public : vector < int > plusOne ( vector < int >& digits ) { vector < int > res ; //\u5b9a\u4e49\u7ed3\u679c\u6570\u7ec4 int t = 1 ; //t\u4e3a\u8fdb\u4f4d for ( int i = digits . size () - 1 ; i >= 0 ; i -- ){ t += digits [ i ]; res . push_back ( t % 10 ); t /= 10 ; } if ( t ) res . push_back ( t ); reverse ( res . begin (), res . end ()); return res ; } }; \u590d\u6742\u5ea6\u5206\u6790 : \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4f4dO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n), \u8fd9\u91cc\u5f00\u8f9f\u4e86\u4e00\u4e2avector\u7528\u6765\u5b58\u653e\u7ed3\u679c\u6570\u7ec4 \u6267\u884c\u7528\u65f6\uff1a4 ms, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8659.64%\u7684\u7528\u6237 \u5185\u5b58\u6d88\u8017\uff1a9.1 MB, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.06%\u7684\u7528\u6237 \u89e3\u9898\u601d\u8def\u4e8c\uff1a \u00b6 \u56e0\u4e3a\u672c\u9898\u53ea\u662f\u7b80\u5355\u7684\u52a0\u4e00\uff0c\u6240\u4ee5\u5bf9\u4e8e\u8fdb\u4f4d\u800c\u8a00\u53ea\u6709\u8fdb\u4f4d\u4e3a0\u548c\u8fdb\u4f4d\u4e3a1\u4e24\u79cd\u60c5\u51b5\uff0c\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u8fc7\u7a0b\u7406\u89e3\u4e3a\u7b80\u5355\u7684\u52a0\u6cd5\u8fd0\u7b97\uff0c\u4ece\u540e\u5f80\u524d\u52a0\uff0c\u53ef\u80fd\u51fa\u73b0\u7684\u7ed3\u679c\u60c5\u51b5\u6709\u4e09\u79cd\uff1a \u4e2a\u4f4d\u52a0\u7684\u65f6\u5019\u6ca1\u6709\u8fdb\u4f4d\uff0c\u5373\u7ed3\u679c<9 \u4e2a\u4f4d\u52a0\u7684\u65f6\u5019\u4ea7\u751f\u4e86\u8fdb\u4f4d\uff0c\u4f46\u662f\u5e76\u4e0d\u4f1a\u4ea7\u751f\u6700\u9ad8\u4f4d\u8fdb\u4f4d \u4e2a\u4f4d\u52a0\u7684\u65f6\u5019\u4ea7\u751f\u4e86\u8fdb\u4f4d\uff0c\u5e76\u4e14\u8fd8\u4ea7\u751f\u4e86\u6700\u9ad8\u4f4d\u8fdb\u4f4d\uff0c\u5373\u5bfc\u81f4\u4e86\u6570\u7ec4\u589e\u5927\uff0ceg\uff1a999 + 1 = 1000 \u6240\u4ee5\u5728\u505a\u7684\u65f6\u5019\u5c31\u9700\u8981\u8003\u8651\u5982\u679c\u5728\u52a0\u7684\u65f6\u5019\u4ea7\u751f\u8fdb\u4f4d\u7684\u8fc7\u7a0b\u4e2d\u6709\u8fdb\u4f4d\uff0c\u5728\u67d0\u4e2a\u4f4d\u4e2d\u6b62\u4e4b\u540e\u5c31\u9700\u8981\u9000\u51fa\u5faa\u73af\uff0c\u800c\u5982\u679c\u4ea7\u751f\u4e86\u8fdb\u4f4d\u5230\u4e86\u6700\u9ad8\u4f4d\u8fd8\u5b58\u5728\u8fdb\u4f4d\uff0c\u5c31\u5c06\u7ed3\u679c\u7684\u6570\u7ec4\u5934\u90e8\u52a0\u4e00\uff08\u7b2c\u4e00\u79cd\u548c\u7b2c\u4e8c\u79cd\u53ef\u4ee5\u5f52\u4e3a\u4e00\u79cd\u60c5\u51b5\uff09 \u4ee3\u7801\uff1a \u00b6 class Solution { public : vector < int > plusOne ( vector < int >& digits ) { int t = 1 ; int sum ; for ( int i = digits . size () - 1 ; i >= 0 ; i -- ){ if ( t ){ sum = t + digits [ i ]; digits [ i ] = sum % 10 ; t = sum > 9 ? 1 : 0 ; } } if ( t ) digits . insert ( digits . begin (), 1 ); return digits ; } }; \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1) \u6267\u884c\u7528\u65f6\uff1a0 ms, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237 \u5185\u5b58\u6d88\u8017\uff1a9.1 MB, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.27%\u7684\u7528\u6237 \u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u89e3\u6cd5\uff0c\u4e0d\u7ba1\u662f\u90a3\u79cd\u8fdb\u4f4d\u60c5\u51b5\uff0c\u90fd\u8981\u5c06\u6574\u4e2a\u5faa\u73af\u8dd1\u5b8c\uff0c\u800c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f\u53ca\u65f6\u4e2d\u6b62\uff0c\u56e0\u4e3a\u5982\u679c\u4e2d\u95f4\u6709\u67d0\u4e2a\u4f4d\u6ca1\u6709\u8fdb\u4f4d\uff0c\u5269\u4e0b\u7684\u64cd\u4f5c\u5c31\u6ca1\u4ec0\u4e48\u610f\u4e49\uff0c\u76f4\u63a5\u9000\u51fa\u5373\u53ef\uff1b\u8fd8\u6709\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u662f\u65b0\u5f00\u8bbe\u4e86\u5730\u5740\u7a7a\u95f4\u8fdb\u884c\u5b58\u50a8\uff0c\u800c\u7b2c\u4e8c\u79cd\u5e76\u6ca1\u6709\u5f00\u8bbe\u7a7a\u95f4\u5b58\u50a8\uff0c\u5e76\u4e14\u5982\u679c\u6ca1\u6709\u6700\u9ad8\u4f4d\u8fdb\u4f4d\uff0c\u5c31\u4e0d\u9700\u8981\u8fdb\u884c\u6700\u9ad8\u4f4d\u63d2\u51651\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u5927\u964d\u4f4e\u3002","title":"leetcode66-\u52a0\u4e00"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode66-%E5%8A%A0%E4%B8%80/#_1","text":"https://leetcode-cn.com/problems/plus-one/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode66-%E5%8A%A0%E4%B8%80/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6574\u6570\u7ec4\u6210\u7684\u975e\u7a7a\u6570\u7ec4\u6240\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570\uff0c\u5728\u8be5\u6570\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\u3002 \u6700\u9ad8\u4f4d\u6570\u5b57\u5b58\u653e\u5728\u6570\u7ec4\u7684\u9996\u4f4d\uff0c \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6574\u6570 0 \u4e4b\u5916\uff0c\u8fd9\u4e2a\u6574\u6570\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,2,3] \u8f93\u51fa: [1,2,4] \u89e3\u91ca: \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 123\u3002 \u793a\u4f8b 2: \u8f93\u5165: [4,3,2,1] \u8f93\u51fa: [4,3,2,2] \u89e3\u91ca: \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 4321\u3002 lucifer \u63d0\u793a\uff1a \u4e0d\u8981\u52a0\u76f4\u63a5\u6570\u7ec4\u8f6c\u5316\u4e3a\u6570\u5b57\u505a\u52a0\u6cd5\u518d\u8f6c\u56de\u6765\u3002","title":"\u9898\u76ee\u63cf\u8ff0\uff1a"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode66-%E5%8A%A0%E4%B8%80/#_3","text":"\u8fd9\u9898\u662f\u5c06\u4e00\u4e2a\u6570\u7ec4\u8868\u793a\u7684\u6570\u52a0\u4e0a1\uff0c\u7136\u540e\u5c31\u60f3\u5230\u4e4b\u524d\u505a\u8fc7\u7684\u5927\u6574\u6570\u52a0\u6cd5\u8fd0\u7b97\uff0c\u56e0\u4e3a\u662f\u6570\u7ec4\u5b58\u653e\uff0c\u5e76\u4e14\u662f\u52a0\u6cd5\u8fd0\u7b97\uff0c\u53ef\u80fd\u8ba1\u7b97\u5230\u6700\u9ad8\u4f4d\u7684\u65f6\u5019\u4f1a\u4ea7\u751f\u8fdb\u4f4d\uff0c\u6240\u4ee5\u5bf9\u4e8e\u7ed3\u679c\u6570\u7ec4\u4e2d\u7684\u6570\uff0c\u5728\u6570\u7ec4\u7d22\u5f15\u7684\u4f4e\u4f4d\u5b58\u653e\u6570\u7684\u4f4e\u4f4d\uff0c\u5982\u679c\u6709\u8fdb\u4f4d\uff0c\u8fdb\u4f4d\u653e\u5728\u7d22\u5f15\u9ad8\u4f4d\uff0c\u7136\u540e\u5bf9\u7ed3\u679c\u6570\u7ec4\u8fdb\u884c\u53cd\u8f6c\u5373\u53ef\u5f97\u5230\u6700\u540e\u7684\u503c \u5728\u4ee3\u7801\u4e2d\u5b9a\u4e49\u4e00\u4e2at\uff0c\u7528\u6765\u5b58\u653e\u8fdb\u4f4d\uff0c\u521d\u59cb\u4e3a1\uff0c\u5373\u672c\u9898\u7684+1","title":"\u89e3\u9898\u601d\u8def\u4e00\uff1a"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode66-%E5%8A%A0%E4%B8%80/#c","text":"public : vector < int > plusOne ( vector < int >& digits ) { vector < int > res ; //\u5b9a\u4e49\u7ed3\u679c\u6570\u7ec4 int t = 1 ; //t\u4e3a\u8fdb\u4f4d for ( int i = digits . size () - 1 ; i >= 0 ; i -- ){ t += digits [ i ]; res . push_back ( t % 10 ); t /= 10 ; } if ( t ) res . push_back ( t ); reverse ( res . begin (), res . end ()); return res ; } };","title":"\u4ee3\u7801(C++)\uff1a"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode66-%E5%8A%A0%E4%B8%80/#_4","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4f4dO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n), \u8fd9\u91cc\u5f00\u8f9f\u4e86\u4e00\u4e2avector\u7528\u6765\u5b58\u653e\u7ed3\u679c\u6570\u7ec4 \u6267\u884c\u7528\u65f6\uff1a4 ms, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8659.64%\u7684\u7528\u6237 \u5185\u5b58\u6d88\u8017\uff1a9.1 MB, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.06%\u7684\u7528\u6237","title":"\u590d\u6742\u5ea6\u5206\u6790:"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode66-%E5%8A%A0%E4%B8%80/#_5","text":"\u56e0\u4e3a\u672c\u9898\u53ea\u662f\u7b80\u5355\u7684\u52a0\u4e00\uff0c\u6240\u4ee5\u5bf9\u4e8e\u8fdb\u4f4d\u800c\u8a00\u53ea\u6709\u8fdb\u4f4d\u4e3a0\u548c\u8fdb\u4f4d\u4e3a1\u4e24\u79cd\u60c5\u51b5\uff0c\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u8fc7\u7a0b\u7406\u89e3\u4e3a\u7b80\u5355\u7684\u52a0\u6cd5\u8fd0\u7b97\uff0c\u4ece\u540e\u5f80\u524d\u52a0\uff0c\u53ef\u80fd\u51fa\u73b0\u7684\u7ed3\u679c\u60c5\u51b5\u6709\u4e09\u79cd\uff1a \u4e2a\u4f4d\u52a0\u7684\u65f6\u5019\u6ca1\u6709\u8fdb\u4f4d\uff0c\u5373\u7ed3\u679c<9 \u4e2a\u4f4d\u52a0\u7684\u65f6\u5019\u4ea7\u751f\u4e86\u8fdb\u4f4d\uff0c\u4f46\u662f\u5e76\u4e0d\u4f1a\u4ea7\u751f\u6700\u9ad8\u4f4d\u8fdb\u4f4d \u4e2a\u4f4d\u52a0\u7684\u65f6\u5019\u4ea7\u751f\u4e86\u8fdb\u4f4d\uff0c\u5e76\u4e14\u8fd8\u4ea7\u751f\u4e86\u6700\u9ad8\u4f4d\u8fdb\u4f4d\uff0c\u5373\u5bfc\u81f4\u4e86\u6570\u7ec4\u589e\u5927\uff0ceg\uff1a999 + 1 = 1000 \u6240\u4ee5\u5728\u505a\u7684\u65f6\u5019\u5c31\u9700\u8981\u8003\u8651\u5982\u679c\u5728\u52a0\u7684\u65f6\u5019\u4ea7\u751f\u8fdb\u4f4d\u7684\u8fc7\u7a0b\u4e2d\u6709\u8fdb\u4f4d\uff0c\u5728\u67d0\u4e2a\u4f4d\u4e2d\u6b62\u4e4b\u540e\u5c31\u9700\u8981\u9000\u51fa\u5faa\u73af\uff0c\u800c\u5982\u679c\u4ea7\u751f\u4e86\u8fdb\u4f4d\u5230\u4e86\u6700\u9ad8\u4f4d\u8fd8\u5b58\u5728\u8fdb\u4f4d\uff0c\u5c31\u5c06\u7ed3\u679c\u7684\u6570\u7ec4\u5934\u90e8\u52a0\u4e00\uff08\u7b2c\u4e00\u79cd\u548c\u7b2c\u4e8c\u79cd\u53ef\u4ee5\u5f52\u4e3a\u4e00\u79cd\u60c5\u51b5\uff09","title":"\u89e3\u9898\u601d\u8def\u4e8c\uff1a"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode66-%E5%8A%A0%E4%B8%80/#_6","text":"class Solution { public : vector < int > plusOne ( vector < int >& digits ) { int t = 1 ; int sum ; for ( int i = digits . size () - 1 ; i >= 0 ; i -- ){ if ( t ){ sum = t + digits [ i ]; digits [ i ] = sum % 10 ; t = sum > 9 ? 1 : 0 ; } } if ( t ) digits . insert ( digits . begin (), 1 ); return digits ; } }; \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1) \u6267\u884c\u7528\u65f6\uff1a0 ms, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237 \u5185\u5b58\u6d88\u8017\uff1a9.1 MB, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.27%\u7684\u7528\u6237 \u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u89e3\u6cd5\uff0c\u4e0d\u7ba1\u662f\u90a3\u79cd\u8fdb\u4f4d\u60c5\u51b5\uff0c\u90fd\u8981\u5c06\u6574\u4e2a\u5faa\u73af\u8dd1\u5b8c\uff0c\u800c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f\u53ca\u65f6\u4e2d\u6b62\uff0c\u56e0\u4e3a\u5982\u679c\u4e2d\u95f4\u6709\u67d0\u4e2a\u4f4d\u6ca1\u6709\u8fdb\u4f4d\uff0c\u5269\u4e0b\u7684\u64cd\u4f5c\u5c31\u6ca1\u4ec0\u4e48\u610f\u4e49\uff0c\u76f4\u63a5\u9000\u51fa\u5373\u53ef\uff1b\u8fd8\u6709\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u662f\u65b0\u5f00\u8bbe\u4e86\u5730\u5740\u7a7a\u95f4\u8fdb\u884c\u5b58\u50a8\uff0c\u800c\u7b2c\u4e8c\u79cd\u5e76\u6ca1\u6709\u5f00\u8bbe\u7a7a\u95f4\u5b58\u50a8\uff0c\u5e76\u4e14\u5982\u679c\u6ca1\u6709\u6700\u9ad8\u4f4d\u8fdb\u4f4d\uff0c\u5c31\u4e0d\u9700\u8981\u8fdb\u884c\u6700\u9ad8\u4f4d\u63d2\u51651\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u5927\u964d\u4f4e\u3002","title":"\u4ee3\u7801\uff1a"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode768-%E6%9C%80%E5%A4%9A%E8%83%BD%E5%AE%8C%E6%88%90%E6%8E%92%E5%BA%8F%E7%9A%84%E5%9D%97II/","text":"\u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/max-chunks-to-make-sorted-ii/ \u601d\u8def \u00b6 \u9898\u76ee\u8981\u6c42\u6700\u5927\u7684\u5206\u5757\u6570\u76ee\uff0c\u672c\u8eab\u9898\u76ee\u9690\u542b\u7684\u610f\u601d\u5c31\u662f\u5757\u5185\u662f\u53ef\u4ee5\u662f\u65e0\u5e8f\u7684\uff0c\u4f46\u662f\u6bcf\u4e2a\u5757\u6574\u4f53\u4e0a\u662f\u9012\u589e\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e2a\u5757\u4e2d\u7684\u6700\u5927\u503c\u662f\u9012\u589e\u7684\uff0c\u4e00\u4e2a\u5757\u4e2d\u6709\u4e00\u4e2a\u6700\u5927\u503c\uff0c\u5373\u6709\u51e0\u4e2a\u6781\u5927\u503c\uff0c\u5c31\u6709\u51e0\u4e2a\u5757\uff0c\u4e5f\u5c31\u662f\u6700\u7ec8\u6c42\u6709\u591a\u5c11\u4e2a\u8fd9\u6837\u7684\u6781\u5927\u503c\u3002\u53ef\u4ee5\u4f7f\u7528\u5355\u8c03\u6808\u6765\u89e3\uff0c\u6267\u884c\u6d41\u7a0b\u4e3a\uff1a\u5f53\u6808\u4e3a\u7a7a\u6216\u8005\u6808\u5b9a\u5143\u7d20\u5c0f\u4e8e\u5373\u5c06\u5165\u6808\u7684\u5143\u7d20\u65f6\uff0c\u5c06\u8be5\u5143\u7d20\u5165\u6808\uff1b\u5426\u5219\u5c31\u5c06\u6808\u4e2d\u5143\u7d20\u4e00\u4e00\u51fa\u6808\u4e0e\u8be5\u5143\u7d20\u6bd4\u8f83\uff0c\u5982\u679c\u9664\u4e86\u6808\u9876\uff0c\u6709\u6808\u4e2d\u5143\u7d20\u5927\u4e8e\u5373\u5c06\u5165\u6808\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u5c31\u5c06\u6808\u4e2d\u5143\u7d20\u51fa\u6808\uff0c\u56e0\u4e3a\u5373\u5c06\u8fdb\u6808\u7684\u5143\u7d20\u6bd4\u8f83\u5c0f\uff0c\u5fc5\u987b\u8981\u5c06\u5176\u4f5c\u4e3a\u6808\u9876\u5143\u7d20\u6240\u5728\u5757\u7684\u5143\u7d20\u624d\u884c\uff0c\u5426\u5219\u4e0d\u6ee1\u8db3\u5757\u7684\u6574\u4f53\u5347\u5e8f\uff0c\u5373\u6700\u7ec8\u7ed3\u679c\u662f\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u6808 \u4ee3\u7801 \u00b6 class Solution { public : int maxChunksToSorted ( vector < int >& arr ) { stack < int > stk ; for ( int i = 0 ; i < arr . size (); i ++ ){ if ( stk . empty () || stk . top () <= arr [ i ]){ stk . push ( arr [ i ]); } else { int temp = stk . top (); while ( ! stk . empty () && stk . top () > arr [ i ]) { stk . pop (); } stk . push ( temp ); } } return stk . size (); } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)","title":"leetcode768-\u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757II"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode768-%E6%9C%80%E5%A4%9A%E8%83%BD%E5%AE%8C%E6%88%90%E6%8E%92%E5%BA%8F%E7%9A%84%E5%9D%97II/#_1","text":"https://leetcode-cn.com/problems/max-chunks-to-make-sorted-ii/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode768-%E6%9C%80%E5%A4%9A%E8%83%BD%E5%AE%8C%E6%88%90%E6%8E%92%E5%BA%8F%E7%9A%84%E5%9D%97II/#_2","text":"\u9898\u76ee\u8981\u6c42\u6700\u5927\u7684\u5206\u5757\u6570\u76ee\uff0c\u672c\u8eab\u9898\u76ee\u9690\u542b\u7684\u610f\u601d\u5c31\u662f\u5757\u5185\u662f\u53ef\u4ee5\u662f\u65e0\u5e8f\u7684\uff0c\u4f46\u662f\u6bcf\u4e2a\u5757\u6574\u4f53\u4e0a\u662f\u9012\u589e\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e2a\u5757\u4e2d\u7684\u6700\u5927\u503c\u662f\u9012\u589e\u7684\uff0c\u4e00\u4e2a\u5757\u4e2d\u6709\u4e00\u4e2a\u6700\u5927\u503c\uff0c\u5373\u6709\u51e0\u4e2a\u6781\u5927\u503c\uff0c\u5c31\u6709\u51e0\u4e2a\u5757\uff0c\u4e5f\u5c31\u662f\u6700\u7ec8\u6c42\u6709\u591a\u5c11\u4e2a\u8fd9\u6837\u7684\u6781\u5927\u503c\u3002\u53ef\u4ee5\u4f7f\u7528\u5355\u8c03\u6808\u6765\u89e3\uff0c\u6267\u884c\u6d41\u7a0b\u4e3a\uff1a\u5f53\u6808\u4e3a\u7a7a\u6216\u8005\u6808\u5b9a\u5143\u7d20\u5c0f\u4e8e\u5373\u5c06\u5165\u6808\u7684\u5143\u7d20\u65f6\uff0c\u5c06\u8be5\u5143\u7d20\u5165\u6808\uff1b\u5426\u5219\u5c31\u5c06\u6808\u4e2d\u5143\u7d20\u4e00\u4e00\u51fa\u6808\u4e0e\u8be5\u5143\u7d20\u6bd4\u8f83\uff0c\u5982\u679c\u9664\u4e86\u6808\u9876\uff0c\u6709\u6808\u4e2d\u5143\u7d20\u5927\u4e8e\u5373\u5c06\u5165\u6808\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u5c31\u5c06\u6808\u4e2d\u5143\u7d20\u51fa\u6808\uff0c\u56e0\u4e3a\u5373\u5c06\u8fdb\u6808\u7684\u5143\u7d20\u6bd4\u8f83\u5c0f\uff0c\u5fc5\u987b\u8981\u5c06\u5176\u4f5c\u4e3a\u6808\u9876\u5143\u7d20\u6240\u5728\u5757\u7684\u5143\u7d20\u624d\u884c\uff0c\u5426\u5219\u4e0d\u6ee1\u8db3\u5757\u7684\u6574\u4f53\u5347\u5e8f\uff0c\u5373\u6700\u7ec8\u7ed3\u679c\u662f\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u6808","title":"\u601d\u8def"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode768-%E6%9C%80%E5%A4%9A%E8%83%BD%E5%AE%8C%E6%88%90%E6%8E%92%E5%BA%8F%E7%9A%84%E5%9D%97II/#_3","text":"class Solution { public : int maxChunksToSorted ( vector < int >& arr ) { stack < int > stk ; for ( int i = 0 ; i < arr . size (); i ++ ){ if ( stk . empty () || stk . top () <= arr [ i ]){ stk . push ( arr [ i ]); } else { int temp = stk . top (); while ( ! stk . empty () && stk . top () > arr [ i ]) { stk . pop (); } stk . push ( temp ); } } return stk . size (); } };","title":"\u4ee3\u7801"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode768-%E6%9C%80%E5%A4%9A%E8%83%BD%E5%AE%8C%E6%88%90%E6%8E%92%E5%BA%8F%E7%9A%84%E5%9D%97II/#_4","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode821-%E5%AD%97%E7%AC%A6%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB/","text":"\u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/shortest-distance-to-a-character/ \u601d\u8def \u00b6 \u5de6\u53f3\u4e24\u8fb9\u8fdb\u884c\u904d\u5386\uff0c\u5206\u522b\u627e\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u8ddd\u79bb\u5de6\u8fb9C\u6700\u8fd1\u7684\u8ddd\u79bb\u548c\u8ddd\u79bb\u53f3\u8fb9C\u6700\u8fd1\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u53d6\u4e24\u8005\u4e2d\u7684\u8f83\u5c0f\u8005 \u4ee3\u7801 \u00b6 class Solution { public : vector < int > shortestToChar ( string S , char C ) { vector < int > distance ( S . size (), 0 ); //pivot\u53d6\u5f97\u662f\u5f88\u5c0f\u7684\u503c\uff0c\u56e0\u4e3a\u662f\u88ab\u51cf\u7684\uff0c\u5982\u679c\u6ca1\u627e\u5230\uff0c\u8ddd\u79bb\u5c31\u4f1a\u5f88\u5927 int pivot = INT_MIN / 2 ; //INT_MIN\u662f\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u6570 //\u4ece\u5de6\u5411\u53f3\u904d\u5386\uff0c\u5bfb\u627eS\u4e2d\u6bcf\u4e00\u4e2a\u5b57\u7b26\u5de6\u8fb9\u8ddd\u79bbC\u7684\u6700\u8fd1\u8ddd\u79bb\uff0c\u5373i - pivot for ( int i = 0 ; i < S . size (); i ++ ){ if ( S [ i ] == C ) pivot = i ; //\u5982\u679c\u6ca1\u627e\u5230C\uff0c\u8ddd\u79bb\u5c31\u5f88\u5927 distance [ i ] = i - pivot ; } //\u4ece\u53f3\u5f80\u5de6\u904d\u5386\uff0c\u5bfb\u627eS\u4e2d\u6bcf\u4e00\u4e2a\u5b57\u7b26\u53f3\u8fb9\u8ddd\u79bbC\u7684\u6700\u8fd1\u8ddd\u79bb\uff0c\u5373pivot - i //pivot\u53d6\u5f97\u662f\u6700\u5927\u503c\uff0c\u56e0\u4e3a\u540e\u9762\u662fpivot - i\uff0c\u5982\u679c\u6ca1\u627e\u5230\u8ddd\u79bb\u5c31\u7279\u522b\u5927 pivot = INT_MAX / 2 ; //INT_MAX\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6570 for ( int i = S . size () - 1 ; i >= 0 ; i -- ){ if ( S [ i ] == C ) pivot = i ; //\u53d6\u4e24\u8fb9\u8ddd\u79bb\u7684\u8f83\u5c0f\u8005 distance [ i ] = min ( distance [ i ], pivot - i ); } return distance ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n),\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n) \u6267\u884c\u7528\u65f6\uff1a0 ms, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237 \u5185\u5b58\u6d88\u8017\uff1a7.3 MB, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237","title":"leetcode821-\u5b57\u7b26\u6700\u77ed\u8ddd\u79bb"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode821-%E5%AD%97%E7%AC%A6%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB/#_1","text":"https://leetcode-cn.com/problems/shortest-distance-to-a-character/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode821-%E5%AD%97%E7%AC%A6%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB/#_2","text":"\u5de6\u53f3\u4e24\u8fb9\u8fdb\u884c\u904d\u5386\uff0c\u5206\u522b\u627e\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u8ddd\u79bb\u5de6\u8fb9C\u6700\u8fd1\u7684\u8ddd\u79bb\u548c\u8ddd\u79bb\u53f3\u8fb9C\u6700\u8fd1\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u53d6\u4e24\u8005\u4e2d\u7684\u8f83\u5c0f\u8005","title":"\u601d\u8def"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode821-%E5%AD%97%E7%AC%A6%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB/#_3","text":"class Solution { public : vector < int > shortestToChar ( string S , char C ) { vector < int > distance ( S . size (), 0 ); //pivot\u53d6\u5f97\u662f\u5f88\u5c0f\u7684\u503c\uff0c\u56e0\u4e3a\u662f\u88ab\u51cf\u7684\uff0c\u5982\u679c\u6ca1\u627e\u5230\uff0c\u8ddd\u79bb\u5c31\u4f1a\u5f88\u5927 int pivot = INT_MIN / 2 ; //INT_MIN\u662f\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u6570 //\u4ece\u5de6\u5411\u53f3\u904d\u5386\uff0c\u5bfb\u627eS\u4e2d\u6bcf\u4e00\u4e2a\u5b57\u7b26\u5de6\u8fb9\u8ddd\u79bbC\u7684\u6700\u8fd1\u8ddd\u79bb\uff0c\u5373i - pivot for ( int i = 0 ; i < S . size (); i ++ ){ if ( S [ i ] == C ) pivot = i ; //\u5982\u679c\u6ca1\u627e\u5230C\uff0c\u8ddd\u79bb\u5c31\u5f88\u5927 distance [ i ] = i - pivot ; } //\u4ece\u53f3\u5f80\u5de6\u904d\u5386\uff0c\u5bfb\u627eS\u4e2d\u6bcf\u4e00\u4e2a\u5b57\u7b26\u53f3\u8fb9\u8ddd\u79bbC\u7684\u6700\u8fd1\u8ddd\u79bb\uff0c\u5373pivot - i //pivot\u53d6\u5f97\u662f\u6700\u5927\u503c\uff0c\u56e0\u4e3a\u540e\u9762\u662fpivot - i\uff0c\u5982\u679c\u6ca1\u627e\u5230\u8ddd\u79bb\u5c31\u7279\u522b\u5927 pivot = INT_MAX / 2 ; //INT_MAX\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6570 for ( int i = S . size () - 1 ; i >= 0 ; i -- ){ if ( S [ i ] == C ) pivot = i ; //\u53d6\u4e24\u8fb9\u8ddd\u79bb\u7684\u8f83\u5c0f\u8005 distance [ i ] = min ( distance [ i ], pivot - i ); } return distance ; } };","title":"\u4ee3\u7801"},{"location":"%E6%95%B0%E7%BB%84%E6%A0%88%E9%98%9F%E5%88%97/leetcode821-%E5%AD%97%E7%AC%A6%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB/#_4","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n),\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n) \u6267\u884c\u7528\u65f6\uff1a0 ms, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237 \u5185\u5b58\u6d88\u8017\uff1a7.3 MB, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%A0%91/leetcode-513%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5728\u6811\u7684\u6700\u540e\u4e00\u884c\u627e\u5230\u6700\u5de6\u8fb9\u7684\u503c\u3002\uff08\u8fd9\u91cc\u8bf4\u7684\u662f\u6700\u540e\u4e00\u5c42\u7684\u6700\u5de6\u8fb9\u7684\u503c\uff0c\u5e76\u4e0d\u662f\u76f4\u89c2\u4e0a\u7684\u6700\u5de6\u4e0b\u89d2\u7684\u8282\u70b9\u54e6\uff09 \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/find-bottom-left-tree-value/ \u601d\u8def\u4e00(BFS) \u00b6 BFS \uff1a\u901a\u5e38\u6211\u4eec\u5199\u7684BFS\u662f \u4ece\u4e0a\u5f80\u4e0b\uff0c\u4ece\u5de6\u5f80\u53f3\u904d\u5386 \uff0c\u8fd9\u6837\u904d\u5386\uff0c\u6700\u540e\u4e00\u4e2a\u904d\u5386\u7684\u8282\u70b9\u4e3a\u6700\u53f3\u4e0b\u89d2\u7684\u8282\u70b9\uff1b\u4f46\u662f\u672c\u9898\u9700\u8981\u6c42\u6700\u5de6\u4e0b\u89d2\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u53d8\u6362\u4e00\u4e0b\u601d\u8def\uff0c\u5c06BFS\u7684\u904d\u5386\u987a\u5e8f\u6539\u4e3a \u4ece\u4e0a\u5f80\u4e0b\uff0c\u4ece\u53f3\u81f3\u5de6 \u904d\u5386\uff0c\u8fd9\u6837\u5230\u6700\u540e\u4e00\u4e2a\u51fa\u961f\u7684\u5c31\u662f\u6700\u5de6\u4e0b\u89d2\u7684\u8282\u70b9\uff08\u601d\u8def\u68d2\u6781\u4e86\uff0c\u4e00\u5f00\u59cb\u548b\u6ca1\u60f3\u5230\u5462\uff0c\u8fd8\u662f\u770b\u4e86leetcode\u5927\u4f6c\u7684\u89e3\u6cd5\u624d\u77e5\u9053\u7684\uff0c\u987f\u65f6\u89c9\u5f97\u7b97\u6cd5\u771f\u7684\u662f\u592a\u7cbe\u5999\u4e86\uff0c\u6709\u8da3 \uff09 BFS\u4ee3\u7801(\u4e00) \u00b6 class Solution { public : int findBottomLeftValue ( TreeNode * root ) { //\u5c42\u6b21\u904d\u5386(\u7edd\u5999\u7684\u601d\u8def\uff0c\u4ece\u53f3\u5f80\u5de6\u5165\u961f\u5217) queue < TreeNode *> q ; TreeNode * cur_front = new TreeNode ( 0 ); q . push ( root ); while ( ! q . empty ()){ cur_front = q . front (); q . pop (); if ( cur_front -> right != nullptr ){ q . push ( cur_front -> right ); } if ( cur_front -> left != nullptr ){ q . push ( cur_front -> left ); } } return cur_front -> val ; } }; BFS\u4ee3\u7801(\u4e8c) \u00b6 \u8fd9\u79cd\u5199\u6cd5\u4e5f\u662fBFS\uff0c\u4f46\u662f\u662f\u8fd8\u662f\u4ee5\u524d\u7684\u505a\u6cd5\uff0c \u4ece\u4e0a\u5f80\u4e0b\uff0c\u4ece\u5de6\u5f80\u53f3 \uff0c\u8fd9\u91cc\u4e3b\u8981\u662f\u5f15\u5165\u4e86 \u4e24\u4e2a\u6307\u9488\u8282\u70b9 \uff0c temp \u6307\u9488\u7528\u6765 \u8bb0\u5f55\u6bcf\u4e00\u5c42\u904d\u5386\u7684\u65f6\u5019\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9 \uff0c\u6700\u540e\u901a\u8fc7\u5b83\u6765\u83b7\u53d6\u6700\u540e\u4e00\u5c42\u7684\u6700\u5de6\u4fa7\u8282\u70b9\uff1b\u800c node \u867d\u7136\u4e5f\u662f\u540c\u6837\u7684\u529f\u80fd\uff0c\u4f46\u662f\u5b83\u662f\u7528\u6765\u5c06\u5de6\u53f3\u8282\u70b9\u5165\u961f\u5217\u7684\uff0c\u662f\u5728\u5faa\u73af\u4f53\u5185\u7684\u3002 class Solution { public : int findBottomLeftValue ( TreeNode * root ) { queue < TreeNode *> q ; TreeNode * temp = new TreeNode ( 0 ); q . push ( root ); while ( ! q . empty ()){ temp = q . front (); int size = q . size (); while ( size -- ){ TreeNode * node = q . front (); q . pop (); if ( node -> left ){ q . push ( node -> left ); } if ( node -> right ){ q . push ( node -> right ); } } } return temp -> val ; } }; \u601d\u8def\u4e8c \u00b6 DFS \uff0c\u7eb5\u6df1\u5730\u904d\u5386\uff0c\u7528\u4e00\u4e2a\u53d8\u91cf deep_max \u8bb0\u5f55\u6811\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u4e00\u4e2a\u53d8\u91cf res \u8bb0\u5f55 \u6700\u5de6\u4e0b\u89d2\u7684\u8282\u70b9 \u6ce8\u610f\uff1a\u6211\u4eec\u9700\u8981\u627e\u7684\u662f\u6700\u5de6\u4e0b\u89d2\u7684\u8282\u70b9\uff0c\u6240\u4ee5DFS\u4e2d\u5e94\u8be5 \u5148\u904d\u5386\u5de6\u5b69\u5b50 DFS\u5148\u904d\u5386\u5de6\u5b69\u5b50\u5c31\u80fd\u5148\u5728\u6700\u5de6\u4e0b\u89d2\u66f4\u65b0\u6700\u5927\u6df1\u5ea6\uff0c\u540c\u65f6\u5c06\u6700\u5de6\u4e0b\u89d2\u7684\u8282\u70b9\u503c\u66f4\u65b0\u5230res \u904d\u5386\u5230\u6700\u5de6\u4e0b\u89d2\u7684\u8282\u70b9\u521a\u597d\u5728\u4e3a\u6700\u5927\u6df1\u5ea6\uff0c\u5219\u540e\u9762\u7684\u8282\u70b9(\u5373\u4f7f\u5904\u4e8e\u6700\u5927\u6df1\u5ea6\u5904)\u4e5f\u4e0d\u80fd\u66f4\u65b0res\u7684\u503c\uff0c\u8fd9\u6837\u6700\u7ec8\u8fd4\u56de\u7684\u5c31\u662f\u6700\u5de6\u4e0b\u8282\u70b9\u4e86\uff1b\u800c\u5982\u679c\u5f53\u524d\u8282\u70b9\u4e0d\u5728\u6700\u5927\u6df1\u5ea6\uff0c\u4e5f\u6ca1\u5173\u7cfb\uff0c\u7ee7\u7eed\u904d\u5386\u5457\uff0c\u56de\u6eaf\uff0c\u518d\u6df1\u5730\u8d70\uff0c\u8d70\u5230\u6700\u6df1\u5904\u518d\u66f4\u65b0res\u5373\u53ef \u6240\u4ee5\u8bf4\u6765\u8bf4\u53bb\uff0c\u5148\u904d\u5386\u5de6\u5b50\u6811\u5c31\u662f\u56e0\u4e3a\uff0c\u5904\u4e8e\u6700\u5927\u6df1\u5ea6\u7684\u8282\u70b9\u5f88\u591a(\u5927\u5bb6\u90fd\u6709\u80fd\u529b)\uff0c\u800cres\u8fd9\u4e2a\u5b9d\u5ea7\u8c01\u90fd\u60f3\u5750\uff0c\u90a3\u600e\u4e48\u4fdd\u8bc1\u6700\u5de6\u4e0b\u8282\u70b9\u80fd\u7a33\u5c45\u5b9d\u5ea7\u5462\uff1f\u90a3\u5c31\u662f\u5148\u8ba9\u4ed6\u4e0a\u54af\uff0c\u5148\u5230\u5148\u5f97\u561b\uff01\u5982\u679c\u540e\u9762\u786e\u5b9e\u8fd8\u6709\u5b9e\u529b\u66f4 \u6df1 \u7684\uff0c\u54b1\u518d\u8ba9\u4f4d\u5457\uff0c\u603b\u4e4b\u54b1\u5c31\u5f97\u7b2c\u4e00\u4e2a\u6765\uff01\uff01\uff01 \u56fe\u4e00\uff1a\u6700\u5927\u6df1\u5ea6 deep_max \u548c res \uff0c\u53ea\u4f1a\u5728\u8282\u70b9 4\uff0c2\uff0c1 \u8fdb\u884c\u66f4\u65b0 \u56fe\u4e8c\uff1a\u6700\u5927\u6df1\u5ea6 deep_max \u548c res \uff0c\u4e00\u5f00\u59cb\u904d\u5386\u5de6\u5b50\u6811\u4f1a\u5728\u8282\u70b9 4\uff0c2\uff0c1 \u8fdb\u884c\u66f4\u65b0\uff0c\u4f46\u662f\u540e\u9762\u8282\u70b9 3 \u7684\u6df1\u5ea6\u66f4\u6df1\uff0c\u6240\u4ee5\u6700\u7ec8\u5728\u8282\u70b93\u66f4\u65b0 \u6700\u5927\u6df1\u5ea6 \u548c res . DFS\u4ee3\u7801 \u00b6 class Solution { private : //\u8bb0\u5f55\u6700\u5927\u7684\u6df1\u5ea6\u548c\u6b64\u65f6\u7684\u8282\u70b9\u503c int deep_max = -1 , res ; public : void DFS ( TreeNode * root , int deep ){ if ( root == nullptr ) return ; //\u5f53\u904d\u5386\u5230\u6700\u5927\u6df1\u5ea6\u540e\uff0c\u540e\u9762\u6bd4\u8fd9\u4e2a\u6df1\u5ea6\u5c0f\u7684\u5c42\u90fd\u4e0d\u4f1a\u6267\u884c\u66f4\u65b0 if ( deep_max < deep ){ deep_max = deep ; res = root -> val ; } DFS ( root -> left , deep + 1 ); DFS ( root -> right , deep + 1 ); } int findBottomLeftValue ( TreeNode * root ) { DFS ( root , 0 ); return res ; } }; \u590d\u6742\u5ea6\u5206\u6790 BFS\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff1b DFS\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)\uff0c\u6700\u574f\u7684\u60c5\u51b5\u662f\u4e3a\u6ee1\u4e8c\u53c9\u6811\u7684\u65f6\u5019\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N)","title":"leetcode-513\u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c"},{"location":"%E6%A0%91/leetcode-513%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5728\u6811\u7684\u6700\u540e\u4e00\u884c\u627e\u5230\u6700\u5de6\u8fb9\u7684\u503c\u3002\uff08\u8fd9\u91cc\u8bf4\u7684\u662f\u6700\u540e\u4e00\u5c42\u7684\u6700\u5de6\u8fb9\u7684\u503c\uff0c\u5e76\u4e0d\u662f\u76f4\u89c2\u4e0a\u7684\u6700\u5de6\u4e0b\u89d2\u7684\u8282\u70b9\u54e6\uff09","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E6%A0%91/leetcode-513%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC/#_2","text":"https://leetcode-cn.com/problems/find-bottom-left-tree-value/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E6%A0%91/leetcode-513%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC/#bfs","text":"BFS \uff1a\u901a\u5e38\u6211\u4eec\u5199\u7684BFS\u662f \u4ece\u4e0a\u5f80\u4e0b\uff0c\u4ece\u5de6\u5f80\u53f3\u904d\u5386 \uff0c\u8fd9\u6837\u904d\u5386\uff0c\u6700\u540e\u4e00\u4e2a\u904d\u5386\u7684\u8282\u70b9\u4e3a\u6700\u53f3\u4e0b\u89d2\u7684\u8282\u70b9\uff1b\u4f46\u662f\u672c\u9898\u9700\u8981\u6c42\u6700\u5de6\u4e0b\u89d2\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u53d8\u6362\u4e00\u4e0b\u601d\u8def\uff0c\u5c06BFS\u7684\u904d\u5386\u987a\u5e8f\u6539\u4e3a \u4ece\u4e0a\u5f80\u4e0b\uff0c\u4ece\u53f3\u81f3\u5de6 \u904d\u5386\uff0c\u8fd9\u6837\u5230\u6700\u540e\u4e00\u4e2a\u51fa\u961f\u7684\u5c31\u662f\u6700\u5de6\u4e0b\u89d2\u7684\u8282\u70b9\uff08\u601d\u8def\u68d2\u6781\u4e86\uff0c\u4e00\u5f00\u59cb\u548b\u6ca1\u60f3\u5230\u5462\uff0c\u8fd8\u662f\u770b\u4e86leetcode\u5927\u4f6c\u7684\u89e3\u6cd5\u624d\u77e5\u9053\u7684\uff0c\u987f\u65f6\u89c9\u5f97\u7b97\u6cd5\u771f\u7684\u662f\u592a\u7cbe\u5999\u4e86\uff0c\u6709\u8da3 \uff09","title":"\u601d\u8def\u4e00(BFS)"},{"location":"%E6%A0%91/leetcode-513%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC/#bfs_1","text":"class Solution { public : int findBottomLeftValue ( TreeNode * root ) { //\u5c42\u6b21\u904d\u5386(\u7edd\u5999\u7684\u601d\u8def\uff0c\u4ece\u53f3\u5f80\u5de6\u5165\u961f\u5217) queue < TreeNode *> q ; TreeNode * cur_front = new TreeNode ( 0 ); q . push ( root ); while ( ! q . empty ()){ cur_front = q . front (); q . pop (); if ( cur_front -> right != nullptr ){ q . push ( cur_front -> right ); } if ( cur_front -> left != nullptr ){ q . push ( cur_front -> left ); } } return cur_front -> val ; } };","title":"BFS\u4ee3\u7801(\u4e00)"},{"location":"%E6%A0%91/leetcode-513%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC/#bfs_2","text":"\u8fd9\u79cd\u5199\u6cd5\u4e5f\u662fBFS\uff0c\u4f46\u662f\u662f\u8fd8\u662f\u4ee5\u524d\u7684\u505a\u6cd5\uff0c \u4ece\u4e0a\u5f80\u4e0b\uff0c\u4ece\u5de6\u5f80\u53f3 \uff0c\u8fd9\u91cc\u4e3b\u8981\u662f\u5f15\u5165\u4e86 \u4e24\u4e2a\u6307\u9488\u8282\u70b9 \uff0c temp \u6307\u9488\u7528\u6765 \u8bb0\u5f55\u6bcf\u4e00\u5c42\u904d\u5386\u7684\u65f6\u5019\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9 \uff0c\u6700\u540e\u901a\u8fc7\u5b83\u6765\u83b7\u53d6\u6700\u540e\u4e00\u5c42\u7684\u6700\u5de6\u4fa7\u8282\u70b9\uff1b\u800c node \u867d\u7136\u4e5f\u662f\u540c\u6837\u7684\u529f\u80fd\uff0c\u4f46\u662f\u5b83\u662f\u7528\u6765\u5c06\u5de6\u53f3\u8282\u70b9\u5165\u961f\u5217\u7684\uff0c\u662f\u5728\u5faa\u73af\u4f53\u5185\u7684\u3002 class Solution { public : int findBottomLeftValue ( TreeNode * root ) { queue < TreeNode *> q ; TreeNode * temp = new TreeNode ( 0 ); q . push ( root ); while ( ! q . empty ()){ temp = q . front (); int size = q . size (); while ( size -- ){ TreeNode * node = q . front (); q . pop (); if ( node -> left ){ q . push ( node -> left ); } if ( node -> right ){ q . push ( node -> right ); } } } return temp -> val ; } };","title":"BFS\u4ee3\u7801(\u4e8c)"},{"location":"%E6%A0%91/leetcode-513%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC/#_3","text":"DFS \uff0c\u7eb5\u6df1\u5730\u904d\u5386\uff0c\u7528\u4e00\u4e2a\u53d8\u91cf deep_max \u8bb0\u5f55\u6811\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u4e00\u4e2a\u53d8\u91cf res \u8bb0\u5f55 \u6700\u5de6\u4e0b\u89d2\u7684\u8282\u70b9 \u6ce8\u610f\uff1a\u6211\u4eec\u9700\u8981\u627e\u7684\u662f\u6700\u5de6\u4e0b\u89d2\u7684\u8282\u70b9\uff0c\u6240\u4ee5DFS\u4e2d\u5e94\u8be5 \u5148\u904d\u5386\u5de6\u5b69\u5b50 DFS\u5148\u904d\u5386\u5de6\u5b69\u5b50\u5c31\u80fd\u5148\u5728\u6700\u5de6\u4e0b\u89d2\u66f4\u65b0\u6700\u5927\u6df1\u5ea6\uff0c\u540c\u65f6\u5c06\u6700\u5de6\u4e0b\u89d2\u7684\u8282\u70b9\u503c\u66f4\u65b0\u5230res \u904d\u5386\u5230\u6700\u5de6\u4e0b\u89d2\u7684\u8282\u70b9\u521a\u597d\u5728\u4e3a\u6700\u5927\u6df1\u5ea6\uff0c\u5219\u540e\u9762\u7684\u8282\u70b9(\u5373\u4f7f\u5904\u4e8e\u6700\u5927\u6df1\u5ea6\u5904)\u4e5f\u4e0d\u80fd\u66f4\u65b0res\u7684\u503c\uff0c\u8fd9\u6837\u6700\u7ec8\u8fd4\u56de\u7684\u5c31\u662f\u6700\u5de6\u4e0b\u8282\u70b9\u4e86\uff1b\u800c\u5982\u679c\u5f53\u524d\u8282\u70b9\u4e0d\u5728\u6700\u5927\u6df1\u5ea6\uff0c\u4e5f\u6ca1\u5173\u7cfb\uff0c\u7ee7\u7eed\u904d\u5386\u5457\uff0c\u56de\u6eaf\uff0c\u518d\u6df1\u5730\u8d70\uff0c\u8d70\u5230\u6700\u6df1\u5904\u518d\u66f4\u65b0res\u5373\u53ef \u6240\u4ee5\u8bf4\u6765\u8bf4\u53bb\uff0c\u5148\u904d\u5386\u5de6\u5b50\u6811\u5c31\u662f\u56e0\u4e3a\uff0c\u5904\u4e8e\u6700\u5927\u6df1\u5ea6\u7684\u8282\u70b9\u5f88\u591a(\u5927\u5bb6\u90fd\u6709\u80fd\u529b)\uff0c\u800cres\u8fd9\u4e2a\u5b9d\u5ea7\u8c01\u90fd\u60f3\u5750\uff0c\u90a3\u600e\u4e48\u4fdd\u8bc1\u6700\u5de6\u4e0b\u8282\u70b9\u80fd\u7a33\u5c45\u5b9d\u5ea7\u5462\uff1f\u90a3\u5c31\u662f\u5148\u8ba9\u4ed6\u4e0a\u54af\uff0c\u5148\u5230\u5148\u5f97\u561b\uff01\u5982\u679c\u540e\u9762\u786e\u5b9e\u8fd8\u6709\u5b9e\u529b\u66f4 \u6df1 \u7684\uff0c\u54b1\u518d\u8ba9\u4f4d\u5457\uff0c\u603b\u4e4b\u54b1\u5c31\u5f97\u7b2c\u4e00\u4e2a\u6765\uff01\uff01\uff01 \u56fe\u4e00\uff1a\u6700\u5927\u6df1\u5ea6 deep_max \u548c res \uff0c\u53ea\u4f1a\u5728\u8282\u70b9 4\uff0c2\uff0c1 \u8fdb\u884c\u66f4\u65b0 \u56fe\u4e8c\uff1a\u6700\u5927\u6df1\u5ea6 deep_max \u548c res \uff0c\u4e00\u5f00\u59cb\u904d\u5386\u5de6\u5b50\u6811\u4f1a\u5728\u8282\u70b9 4\uff0c2\uff0c1 \u8fdb\u884c\u66f4\u65b0\uff0c\u4f46\u662f\u540e\u9762\u8282\u70b9 3 \u7684\u6df1\u5ea6\u66f4\u6df1\uff0c\u6240\u4ee5\u6700\u7ec8\u5728\u8282\u70b93\u66f4\u65b0 \u6700\u5927\u6df1\u5ea6 \u548c res .","title":"\u601d\u8def\u4e8c"},{"location":"%E6%A0%91/leetcode-513%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC/#dfs","text":"class Solution { private : //\u8bb0\u5f55\u6700\u5927\u7684\u6df1\u5ea6\u548c\u6b64\u65f6\u7684\u8282\u70b9\u503c int deep_max = -1 , res ; public : void DFS ( TreeNode * root , int deep ){ if ( root == nullptr ) return ; //\u5f53\u904d\u5386\u5230\u6700\u5927\u6df1\u5ea6\u540e\uff0c\u540e\u9762\u6bd4\u8fd9\u4e2a\u6df1\u5ea6\u5c0f\u7684\u5c42\u90fd\u4e0d\u4f1a\u6267\u884c\u66f4\u65b0 if ( deep_max < deep ){ deep_max = deep ; res = root -> val ; } DFS ( root -> left , deep + 1 ); DFS ( root -> right , deep + 1 ); } int findBottomLeftValue ( TreeNode * root ) { DFS ( root , 0 ); return res ; } }; \u590d\u6742\u5ea6\u5206\u6790 BFS\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff1b DFS\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)\uff0c\u6700\u574f\u7684\u60c5\u51b5\u662f\u4e3a\u6ee1\u4e8c\u53c9\u6811\u7684\u65f6\u5019\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N)","title":"DFS\u4ee3\u7801"},{"location":"%E6%A0%91/leetcode100-%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u53c9\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u5b83\u4eec\u662f\u5426\u76f8\u540c\u3002 \u5982\u679c\u4e24\u4e2a\u6811\u5728\u7ed3\u6784\u4e0a\u76f8\u540c\uff0c\u5e76\u4e14\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684\u3002 \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/same-tree/ \u601d\u8def \u00b6 \u9898\u76ee\u4e2d\u8bf4 \u7ed3\u6784 \u548c \u503c \u76f8\u540c\u624d\u662f\u76f8\u540c\u7684\u6811\uff0c\u6240\u4ee5\u6709\u4e00\u4e0b\u6b65\u9aa4\uff1a \u6240\u4ee5\u5148\u5bf9\u6811\u7684 \u7ed3\u6784 \u8fdb\u884c\u5224\u65ad\uff1b \u5f53\u90fd\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u7ed3\u6784\u76f8\u540c\uff0c\u9012\u5f52\u51fa\u53e3\uff0c\u8fd4\u56detrue \u4e00\u4e2a\u4e3a\u7a7a\uff0c\u4e00\u4e2a\u4e0d\u4e3a\u7a7a\uff0c\u7ed3\u6784\u4e0d\u540c\uff0c\u5219\u9012\u5f52\u51fa\u53e3\uff0c\u8fd4\u56defalse \u7ed3\u6784\u76f8\u540c\u65f6\uff0c\u518d\u5bf9 \u503c \u8fdb\u884c\u5224\u65ad\uff0c\u5982\u679c\u503c\u4e0d\u540c\uff0c\u5219\u9012\u5f52\u51fa\u53e3\uff0c\u8fd4\u56defalse \u503c\u76f8\u540c\u518d \u9012\u5f52\u904d\u5386\u5de6\u53f3\u5b50\u6811 \u6240\u4ee5\uff0c\u9012\u5f52\u7684\u5199\u6cd5\uff0c\u53ef\u4ee5**\u5148\u8003\u8651\u6240\u6709\u7684\u9012\u5f52\u51fa\u53e3**\uff0c\u7136\u540e\u518d\u5199\u9012\u5f52\u5177\u4f53\u7684\u6d41\u7a0b\u548c\u8fd4\u56de\u503c \u4ee3\u7801 \u00b6 class Solution { public : bool isSameTree ( TreeNode * p , TreeNode * q ) { //\u9996\u5148\u5224\u65ad\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u662f\u5426\u76f8\u540c\uff0c\u5982\u679c\u7ed3\u6784\u90fd\u4e0d\u6ee1\u8db3\uff0c\u76f4\u63a5\u9012\u5f52\u51fa\u53e3 if ( p == nullptr && q == nullptr ) return true ; //\u9012\u5f52\u51fa\u53e3 \u90fd\u4e3a\u7a7a\uff0c\u76f8\u7b49 if ( p == nullptr || q == nullptr ) return false ; //\u9012\u5f52\u51fa\u53e3 \u5176\u4e2d\u4e00\u4e2a\u4e3a\u7a7a\uff0c\u6240\u4ee5\u4e0d\u7b49 //\u518d\u5bf9\u503c\u8fdb\u884c\u5224\u65ad\uff0c\u503c\u4e0d\u76f8\u540c\u5c31\u662f\u9012\u5f52\u51fa\u53e3 if ( p -> val != q -> val ) return false ; //\u503c\u76f8\u540c\u9012\u5f52 return ( isSameTree ( p -> left , q -> left ) && isSameTree ( p -> right , q -> right )); } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logN)","title":"leetcode100-\u76f8\u540c\u7684\u6811"},{"location":"%E6%A0%91/leetcode100-%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#_1","text":"\u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u53c9\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u5b83\u4eec\u662f\u5426\u76f8\u540c\u3002 \u5982\u679c\u4e24\u4e2a\u6811\u5728\u7ed3\u6784\u4e0a\u76f8\u540c\uff0c\u5e76\u4e14\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E6%A0%91/leetcode100-%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#_2","text":"https://leetcode-cn.com/problems/same-tree/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E6%A0%91/leetcode100-%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#_3","text":"\u9898\u76ee\u4e2d\u8bf4 \u7ed3\u6784 \u548c \u503c \u76f8\u540c\u624d\u662f\u76f8\u540c\u7684\u6811\uff0c\u6240\u4ee5\u6709\u4e00\u4e0b\u6b65\u9aa4\uff1a \u6240\u4ee5\u5148\u5bf9\u6811\u7684 \u7ed3\u6784 \u8fdb\u884c\u5224\u65ad\uff1b \u5f53\u90fd\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u7ed3\u6784\u76f8\u540c\uff0c\u9012\u5f52\u51fa\u53e3\uff0c\u8fd4\u56detrue \u4e00\u4e2a\u4e3a\u7a7a\uff0c\u4e00\u4e2a\u4e0d\u4e3a\u7a7a\uff0c\u7ed3\u6784\u4e0d\u540c\uff0c\u5219\u9012\u5f52\u51fa\u53e3\uff0c\u8fd4\u56defalse \u7ed3\u6784\u76f8\u540c\u65f6\uff0c\u518d\u5bf9 \u503c \u8fdb\u884c\u5224\u65ad\uff0c\u5982\u679c\u503c\u4e0d\u540c\uff0c\u5219\u9012\u5f52\u51fa\u53e3\uff0c\u8fd4\u56defalse \u503c\u76f8\u540c\u518d \u9012\u5f52\u904d\u5386\u5de6\u53f3\u5b50\u6811 \u6240\u4ee5\uff0c\u9012\u5f52\u7684\u5199\u6cd5\uff0c\u53ef\u4ee5**\u5148\u8003\u8651\u6240\u6709\u7684\u9012\u5f52\u51fa\u53e3**\uff0c\u7136\u540e\u518d\u5199\u9012\u5f52\u5177\u4f53\u7684\u6d41\u7a0b\u548c\u8fd4\u56de\u503c","title":"\u601d\u8def"},{"location":"%E6%A0%91/leetcode100-%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#_4","text":"class Solution { public : bool isSameTree ( TreeNode * p , TreeNode * q ) { //\u9996\u5148\u5224\u65ad\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u662f\u5426\u76f8\u540c\uff0c\u5982\u679c\u7ed3\u6784\u90fd\u4e0d\u6ee1\u8db3\uff0c\u76f4\u63a5\u9012\u5f52\u51fa\u53e3 if ( p == nullptr && q == nullptr ) return true ; //\u9012\u5f52\u51fa\u53e3 \u90fd\u4e3a\u7a7a\uff0c\u76f8\u7b49 if ( p == nullptr || q == nullptr ) return false ; //\u9012\u5f52\u51fa\u53e3 \u5176\u4e2d\u4e00\u4e2a\u4e3a\u7a7a\uff0c\u6240\u4ee5\u4e0d\u7b49 //\u518d\u5bf9\u503c\u8fdb\u884c\u5224\u65ad\uff0c\u503c\u4e0d\u76f8\u540c\u5c31\u662f\u9012\u5f52\u51fa\u53e3 if ( p -> val != q -> val ) return false ; //\u503c\u76f8\u540c\u9012\u5f52 return ( isSameTree ( p -> left , q -> left ) && isSameTree ( p -> right , q -> right )); } };","title":"\u4ee3\u7801"},{"location":"%E6%A0%91/leetcode100-%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logN)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%A0%91/leetcode104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5927\u6df1\u5ea6\u3002 \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3a\u6839\u8282\u70b9\u5230\u6700\u8fdc\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u3002 \u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a\u4e8c\u53c9\u6811 [3,9,20,null,null,15,7]\uff0c \u8fd4\u56de\u5b83\u7684\u6700\u5927\u6df1\u5ea6 3 \u3002 \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/ \u601d\u8def \u00b6 \u6811\u7684\u6700\u5927\u6df1\u5ea6\u4e3a\u5de6\u53f3\u5b50\u6811\u7684\u6700\u5927\u6df1\u5ea6+1\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8ba1\u7b97\u51fa\u5de6\u53f3\u5b50\u6811\u7684\u6df1\u5ea6\uff0c\u7136\u540e\u9009\u51fa\u6700\u5927\u8005+1\u5373\u53ef\u3002\u4e8c\u53c9\u6811\u7684\u904d\u5386\u6bd4\u8f83\u9002\u5408 \u9012\u5f52 \u4ee3\u7801 \u00b6 class Solution { public : int maxDepth ( TreeNode * root ) { if ( root == nullptr ) return 0 ; return max ( maxDepth ( root -> left ), maxDepth ( root -> right )) + 1 ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n) \u56e0\u4e3a\u4f7f\u7528\u7684\u662f\u9012\u5f52\uff0c\u6240\u4ee5\u9690\u5f0f\u5730\u4f7f\u7528\u4e86\u51fd\u6570\u8c03\u7528\u6808\uff0c\u6808\u7684\u6df1\u5ea6\u4e3a\u6811\u9ad8\uff0c\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)\uff0c","title":"leetcode104-\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6"},{"location":"%E6%A0%91/leetcode104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5927\u6df1\u5ea6\u3002 \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3a\u6839\u8282\u70b9\u5230\u6700\u8fdc\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u3002 \u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a\u4e8c\u53c9\u6811 [3,9,20,null,null,15,7]\uff0c \u8fd4\u56de\u5b83\u7684\u6700\u5927\u6df1\u5ea6 3 \u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E6%A0%91/leetcode104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/#_2","text":"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E6%A0%91/leetcode104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/#_3","text":"\u6811\u7684\u6700\u5927\u6df1\u5ea6\u4e3a\u5de6\u53f3\u5b50\u6811\u7684\u6700\u5927\u6df1\u5ea6+1\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8ba1\u7b97\u51fa\u5de6\u53f3\u5b50\u6811\u7684\u6df1\u5ea6\uff0c\u7136\u540e\u9009\u51fa\u6700\u5927\u8005+1\u5373\u53ef\u3002\u4e8c\u53c9\u6811\u7684\u904d\u5386\u6bd4\u8f83\u9002\u5408 \u9012\u5f52","title":"\u601d\u8def"},{"location":"%E6%A0%91/leetcode104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/#_4","text":"class Solution { public : int maxDepth ( TreeNode * root ) { if ( root == nullptr ) return 0 ; return max ( maxDepth ( root -> left ), maxDepth ( root -> right )) + 1 ; } };","title":"\u4ee3\u7801"},{"location":"%E6%A0%91/leetcode104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n) \u56e0\u4e3a\u4f7f\u7528\u7684\u662f\u9012\u5f52\uff0c\u6240\u4ee5\u9690\u5f0f\u5730\u4f7f\u7528\u4e86\u51fd\u6570\u8c03\u7528\u6808\uff0c\u6808\u7684\u6df1\u5ea6\u4e3a\u6811\u9ad8\uff0c\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)\uff0c","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%A0%91/leetcode105-%E4%BB%8E%E5%89%8D%E5%BA%8F%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u6839\u636e\u4e00\u68f5\u6811\u7684\u524d\u5e8f\u904d\u5386\u4e0e\u4e2d\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002 \u6ce8\u610f: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20 \u4f8b\u5982\uff0c\u7ed9\u51fa \u524d\u5e8f\u904d\u5386 preorder = [3,9,20,15,7] \u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7] \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal \u601d\u8def \u00b6 \u9996\u5148\u53ef\u4ee5\u660e\u786e\u4e00\u70b9\u7684\u5c31\u662f\u5148\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u53ef\u4ee5\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u3002\u7136\u540e\u6839\u636e\u4e24\u4e2a\u5e8f\u5217\u7684\u786e\u5b9a\u8fc7\u7a0b\u6765\u601d\u8003\u5982\u4f55\u8fdb\u884c\u6784\u9020\u3002 \u5148\u5e8f\u904d\u5386\u53ef\u4ee5\u786e\u5b9a\u6839\u8282\u70b9 \u4e2d\u5e8f\u904d\u5386\u53ef\u4ee5\u901a\u8fc7\u6839\u8282\u70b9\u8fdb\u884c\u5de6\u53f3\u5b50\u6811\u7684\u5212\u5206\uff0c\u518d\u786e\u5b9a\u5de6\u53f3\u5b50\u6811\u7684\u6839\u8282\u70b9\uff0c\u4ece\u800c\u6784\u9020\u5de6\u53f3\u5b50\u6811 \u6240\u4ee5\u660e\u786e\u4e86\u8fc7\u7a0b\uff0c\u5c31\u77e5\u9053\u8981\u5e72\u4ec0\u4e48\u4e86\uff0c\u6211\u4eec\u7684\u76ee\u7684\u5c31\u662f\u627e \u6839\u8282\u70b9 \uff0c\u7136\u540e\u8be5\u600e\u4e48\u5212\u5206\u5462\uff1f\u5c31\u662f\u901a\u8fc7 \u4e0b\u6807 \u6839\u8282\u70b9\uff1a\u901a\u8fc7 \u5148\u5e8f\u904d\u5386\u7684\u5de6\u8fb9\u754c\u4e0b\u6807 \u5373\u53ef\u627e\u5230 \u786e\u5b9a\u5212\u5206\u7684\u8fb9\u754c\uff1a\u901a\u8fc7 \u4e2d\u5e8f\u904d\u5386 \uff0c\u56e0\u4e3a\u4e00\u65e6\u627e\u5230\u6839\u8282\u70b9\uff0c\u5c31\u80fd\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u786e\u5b9a\u6839\u8282\u70b9\u5728\u4e2d\u5e8f\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\uff0c\u800c\u4e2d\u5e8f\u904d\u5386\u4e2d\u5de6\u8fb9\u533a\u95f4\u4e3a\u5de6\u5b50\u6811\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u786e\u5b9a\u5de6\u5b50\u6811\u7684\u4e2a\u6570\uff0c\u8fd9\u6837\u5728\u4e2d\u5e8f\u5e8f\u5217\u4e2d\u4e5f\u80fd\u786e\u5b9a\u5de6\u5b50\u6811\u533a\u95f4\uff1b\u540c\u6837\u53f3\u5b50\u6811\u533a\u95f4\u4e5f\u80fd\u786e\u5b9a\u4e86 \u6700\u540e\u518d\u5206\u522b\u5bf9\u5148\u5e8f\u548c\u4e2d\u5e8f\u7684\u5de6\u53f3\u533a\u95f4\u5206\u522b\u8fdb\u884c\u9012\u5f52\uff0c\u6784\u9020\u5de6\u53f3\u5b50\u6811 \u4e0b\u9762\u662f\u4e00\u4e2a**\u793a\u4f8b**\uff1a \u5148\u5728\u4e2d\u5e8f\u5e8f\u5217\u4e2d\u627e\u5230 \u6839\u8282\u70b9 \u4e3a3\uff0c\u7136\u540e\u5230\u4e2d\u5e8f\u5e8f\u5217\u4e2d\u627e\u548c\u6839\u8282\u70b9\u76f8\u540c\u7684\u5143\u7d20\uff0c\u627e\u5230\u5176\u4e0b\u6807index\u4e3a1\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u786e\u5b9a\u5728index\u4e3a1\u5143\u7d20\u7684\u5de6\u4fa7\u6240\u6709\u5143\u7d20\u90fd\u662f\u4ee53\u4e3a\u6839\u8282\u70b9\u7684\u6811\u7684\u5de6\u5b50\u6811\uff0c\u6240\u4ee5\u53ef\u4ee5\u786e\u5b9a\u5de6\u5b50\u6811\u7684\u4e2a\u6570\u4e3a index - lin \uff0c\u6b64\u5904\u7684\u5de6\u5b50\u6811\u8282\u70b9\u4e2a\u6570\u4e3a1 \u6240\u4ee5\u5bf9\u4e8e\u5148\u5e8f\u904d\u5386\u6765\u8bb2\uff0c\u5176\u5de6\u5b50\u6811\u7684\u533a\u95f4\u4e3a [lpre + 1,lpre + index -lin] \uff0c\u8fd9\u6837\u53f3\u5b50\u6811\u7684\u533a\u95f4\u4e5f\u5c31\u786e\u5b9a\u4e86\uff0c\u5373\u4e3a [lpre + index - lin + 1,rpre] \u5bf9\u4e8e\u4e2d\u5e8f\u904d\u5386\u6765\u8bb2\uff0c\u5de6\u5b50\u6811\u533a\u95f4\u4e3a [lin,index - 1] \uff0c\u53f3\u5b50\u6811\u533a\u95f4\u4e3a [index + 1,rin] \u8fd9\u6837\u518d\u9012\u5f52\u904d\u5386\u5373\u53ef \u4ee3\u7801 \u00b6 class Solution { public : TreeNode * build ( vector < int >& preorder , int lpre , int rpre , vector < int >& inorder , int lin , int rin ){ if ( lpre > rpre ) return nullptr ; int index = -1 ; int rootval = preorder [ lpre ]; for ( int i = lin ; i < inorder . size (); i ++ ){ if ( inorder [ i ] == rootval ){ index = i ; break ; } } //\u901a\u8fc7\u4e2d\u5e8f\u904d\u5386\u548c\u6839\u8282\u70b9\u7684\u4f4d\u7f6e\u8ba1\u7b97\u51fa\u6811\u7684\u5de6\u5b50\u6811\u4e2d\u8282\u70b9\u4e2a\u6570 int preleft = index - lin ; TreeNode * root = new TreeNode ( rootval ); root -> left = build ( preorder , lpre + 1 , lpre + preleft , inorder , lin , index - 1 ); root -> right = build ( preorder , lpre + preleft + 1 , rpre , inorder , index + 1 , rin ); return root ; } TreeNode * buildTree ( vector < int >& preorder , vector < int >& inorder ) { return build ( preorder , 0 , preorder . size () - 1 , inorder , 0 , inorder . size () - 1 ); } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)","title":"leetcode105-\u4ece\u524d\u5e8f\u548c\u4e2d\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811"},{"location":"%E6%A0%91/leetcode105-%E4%BB%8E%E5%89%8D%E5%BA%8F%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/#_1","text":"\u6839\u636e\u4e00\u68f5\u6811\u7684\u524d\u5e8f\u904d\u5386\u4e0e\u4e2d\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002 \u6ce8\u610f: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20 \u4f8b\u5982\uff0c\u7ed9\u51fa \u524d\u5e8f\u904d\u5386 preorder = [3,9,20,15,7] \u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E6%A0%91/leetcode105-%E4%BB%8E%E5%89%8D%E5%BA%8F%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/#_2","text":"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E6%A0%91/leetcode105-%E4%BB%8E%E5%89%8D%E5%BA%8F%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/#_3","text":"\u9996\u5148\u53ef\u4ee5\u660e\u786e\u4e00\u70b9\u7684\u5c31\u662f\u5148\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u53ef\u4ee5\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u3002\u7136\u540e\u6839\u636e\u4e24\u4e2a\u5e8f\u5217\u7684\u786e\u5b9a\u8fc7\u7a0b\u6765\u601d\u8003\u5982\u4f55\u8fdb\u884c\u6784\u9020\u3002 \u5148\u5e8f\u904d\u5386\u53ef\u4ee5\u786e\u5b9a\u6839\u8282\u70b9 \u4e2d\u5e8f\u904d\u5386\u53ef\u4ee5\u901a\u8fc7\u6839\u8282\u70b9\u8fdb\u884c\u5de6\u53f3\u5b50\u6811\u7684\u5212\u5206\uff0c\u518d\u786e\u5b9a\u5de6\u53f3\u5b50\u6811\u7684\u6839\u8282\u70b9\uff0c\u4ece\u800c\u6784\u9020\u5de6\u53f3\u5b50\u6811 \u6240\u4ee5\u660e\u786e\u4e86\u8fc7\u7a0b\uff0c\u5c31\u77e5\u9053\u8981\u5e72\u4ec0\u4e48\u4e86\uff0c\u6211\u4eec\u7684\u76ee\u7684\u5c31\u662f\u627e \u6839\u8282\u70b9 \uff0c\u7136\u540e\u8be5\u600e\u4e48\u5212\u5206\u5462\uff1f\u5c31\u662f\u901a\u8fc7 \u4e0b\u6807 \u6839\u8282\u70b9\uff1a\u901a\u8fc7 \u5148\u5e8f\u904d\u5386\u7684\u5de6\u8fb9\u754c\u4e0b\u6807 \u5373\u53ef\u627e\u5230 \u786e\u5b9a\u5212\u5206\u7684\u8fb9\u754c\uff1a\u901a\u8fc7 \u4e2d\u5e8f\u904d\u5386 \uff0c\u56e0\u4e3a\u4e00\u65e6\u627e\u5230\u6839\u8282\u70b9\uff0c\u5c31\u80fd\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u786e\u5b9a\u6839\u8282\u70b9\u5728\u4e2d\u5e8f\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\uff0c\u800c\u4e2d\u5e8f\u904d\u5386\u4e2d\u5de6\u8fb9\u533a\u95f4\u4e3a\u5de6\u5b50\u6811\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u786e\u5b9a\u5de6\u5b50\u6811\u7684\u4e2a\u6570\uff0c\u8fd9\u6837\u5728\u4e2d\u5e8f\u5e8f\u5217\u4e2d\u4e5f\u80fd\u786e\u5b9a\u5de6\u5b50\u6811\u533a\u95f4\uff1b\u540c\u6837\u53f3\u5b50\u6811\u533a\u95f4\u4e5f\u80fd\u786e\u5b9a\u4e86 \u6700\u540e\u518d\u5206\u522b\u5bf9\u5148\u5e8f\u548c\u4e2d\u5e8f\u7684\u5de6\u53f3\u533a\u95f4\u5206\u522b\u8fdb\u884c\u9012\u5f52\uff0c\u6784\u9020\u5de6\u53f3\u5b50\u6811 \u4e0b\u9762\u662f\u4e00\u4e2a**\u793a\u4f8b**\uff1a \u5148\u5728\u4e2d\u5e8f\u5e8f\u5217\u4e2d\u627e\u5230 \u6839\u8282\u70b9 \u4e3a3\uff0c\u7136\u540e\u5230\u4e2d\u5e8f\u5e8f\u5217\u4e2d\u627e\u548c\u6839\u8282\u70b9\u76f8\u540c\u7684\u5143\u7d20\uff0c\u627e\u5230\u5176\u4e0b\u6807index\u4e3a1\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u786e\u5b9a\u5728index\u4e3a1\u5143\u7d20\u7684\u5de6\u4fa7\u6240\u6709\u5143\u7d20\u90fd\u662f\u4ee53\u4e3a\u6839\u8282\u70b9\u7684\u6811\u7684\u5de6\u5b50\u6811\uff0c\u6240\u4ee5\u53ef\u4ee5\u786e\u5b9a\u5de6\u5b50\u6811\u7684\u4e2a\u6570\u4e3a index - lin \uff0c\u6b64\u5904\u7684\u5de6\u5b50\u6811\u8282\u70b9\u4e2a\u6570\u4e3a1 \u6240\u4ee5\u5bf9\u4e8e\u5148\u5e8f\u904d\u5386\u6765\u8bb2\uff0c\u5176\u5de6\u5b50\u6811\u7684\u533a\u95f4\u4e3a [lpre + 1,lpre + index -lin] \uff0c\u8fd9\u6837\u53f3\u5b50\u6811\u7684\u533a\u95f4\u4e5f\u5c31\u786e\u5b9a\u4e86\uff0c\u5373\u4e3a [lpre + index - lin + 1,rpre] \u5bf9\u4e8e\u4e2d\u5e8f\u904d\u5386\u6765\u8bb2\uff0c\u5de6\u5b50\u6811\u533a\u95f4\u4e3a [lin,index - 1] \uff0c\u53f3\u5b50\u6811\u533a\u95f4\u4e3a [index + 1,rin] \u8fd9\u6837\u518d\u9012\u5f52\u904d\u5386\u5373\u53ef","title":"\u601d\u8def"},{"location":"%E6%A0%91/leetcode105-%E4%BB%8E%E5%89%8D%E5%BA%8F%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/#_4","text":"class Solution { public : TreeNode * build ( vector < int >& preorder , int lpre , int rpre , vector < int >& inorder , int lin , int rin ){ if ( lpre > rpre ) return nullptr ; int index = -1 ; int rootval = preorder [ lpre ]; for ( int i = lin ; i < inorder . size (); i ++ ){ if ( inorder [ i ] == rootval ){ index = i ; break ; } } //\u901a\u8fc7\u4e2d\u5e8f\u904d\u5386\u548c\u6839\u8282\u70b9\u7684\u4f4d\u7f6e\u8ba1\u7b97\u51fa\u6811\u7684\u5de6\u5b50\u6811\u4e2d\u8282\u70b9\u4e2a\u6570 int preleft = index - lin ; TreeNode * root = new TreeNode ( rootval ); root -> left = build ( preorder , lpre + 1 , lpre + preleft , inorder , lin , index - 1 ); root -> right = build ( preorder , lpre + preleft + 1 , rpre , inorder , index + 1 , rin ); return root ; } TreeNode * buildTree ( vector < int >& preorder , vector < int >& inorder ) { return build ( preorder , 0 , preorder . size () - 1 , inorder , 0 , inorder . size () - 1 ); } };","title":"\u4ee3\u7801"},{"location":"%E6%A0%91/leetcode105-%E4%BB%8E%E5%89%8D%E5%BA%8F%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%A0%91/leetcode106-%E4%BB%8E%E4%B8%AD%E5%BA%8F%E5%92%8C%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u6839\u636e\u4e00\u68f5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e0e\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002 \u6ce8\u610f: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20 \u4f8b\u5982\uff0c\u7ed9\u51fa \u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7] \u540e\u5e8f\u904d\u5386 postorder = [9,15,7,20,3] \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal \u601d\u8def \u00b6 \u601d\u8def\u7c7b\u4f3c\u4e8e\u524d\u5e8f+\u4e2d\u5e8f\u786e\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811 \u9996\u5148 \u540e\u5e8f\u904d\u5386 \u53ef\u4ee5\u76f4\u63a5\u5f97\u5230 \u6839\u8282\u70b9 ,\u5373\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5f97\u5230\u4e86\u6839\u8282\u70b9 \u518d\u53bb\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230 \u6839\u8282\u70b9\u7684\u4e0b\u6807index \uff0c\u7136\u540e\u4ee5\u6839\u8282\u70b9\u4e0b\u6807\u4e3a\u5206\u754c\u70b9\uff0c\u5212\u5206\u51fa \u5de6\u53f3\u5b50\u6811\u533a\u95f4 \uff0c\u5de6\u5b50\u6811\u533a\u95f4\u4e3a [lin,index - 1] \uff0c\u53f3\u5b50\u6811\u533a\u95f4\u4e3a [index + 1,rin] \uff0c\u5e76 \u8ba1\u7b97\u51fa\u5de6\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570\u4e3aindex - lin \u7136\u540e\u6839\u636e\u5de6\u5b50\u6811\u7684\u8282\u70b9\u6570\u76ee\u5728 \u540e\u5e8f\u5e8f\u5217 \u4e2d\u786e\u5b9a\u540e\u5e8f\u5e8f\u5217\u4e2d \u5de6\u53f3\u5b50\u6811\u6240\u5728\u7684\u533a\u95f4 ,\u5de6\u5b50\u6811\u533a\u95f4\u4e3a [lpos,lpos + index - lin - 1] \uff0c\u53f3\u5b50\u6811\u533a\u95f4\u4e3a [lpos + index - lin,rpos - 1] \u6700\u540e\u9012\u5f52\u904d\u5386\u5373\u53ef \u4ee3\u7801 \u00b6 class Solution { public : TreeNode * build ( vector < int >& inorder , int lin , int rin , vector < int >& postorder , int lpos , int rpos ){ if ( lin > rin ) return nullptr ; //\u540e\u5e8f\u904d\u5386\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u4e3a\u6839\u8282\u70b9 int rootval = postorder [ rpos ]; int index = -1 ; //\u5728\u4e2d\u5e8f\u5e8f\u5217\u4e2d\u5bfb\u627e\u6839\u8282\u70b9 for ( int i = 0 ; i < inorder . size (); i ++ ){ if ( rootval == inorder [ i ]){ index = i ; break ; } } //\u901a\u8fc7\u4e2d\u5e8f\u5e8f\u5217\u548c\u6839\u8282\u70b9\u4f4d\u7f6e\u627e\u5230\u53f3\u5b50\u6811\u7684\u8282\u70b9\u6570\u76ee int leftnum = index - lin ; TreeNode * root = new TreeNode ( rootval ); root -> left = build ( inorder , lin , index - 1 , postorder , lpos , lpos + leftnum - 1 ); root -> right = build ( inorder , index + 1 , rin , postorder , lpos + leftnum , rpos - 1 ); return root ; } TreeNode * buildTree ( vector < int >& inorder , vector < int >& postorder ) { return build ( inorder , 0 , inorder . size () - 1 , postorder , 0 , postorder . size () - 1 ); } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)","title":"leetcode106-\u4ece\u4e2d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811"},{"location":"%E6%A0%91/leetcode106-%E4%BB%8E%E4%B8%AD%E5%BA%8F%E5%92%8C%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/#_1","text":"\u6839\u636e\u4e00\u68f5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e0e\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002 \u6ce8\u610f: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20 \u4f8b\u5982\uff0c\u7ed9\u51fa \u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7] \u540e\u5e8f\u904d\u5386 postorder = [9,15,7,20,3]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E6%A0%91/leetcode106-%E4%BB%8E%E4%B8%AD%E5%BA%8F%E5%92%8C%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/#_2","text":"https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E6%A0%91/leetcode106-%E4%BB%8E%E4%B8%AD%E5%BA%8F%E5%92%8C%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/#_3","text":"\u601d\u8def\u7c7b\u4f3c\u4e8e\u524d\u5e8f+\u4e2d\u5e8f\u786e\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811 \u9996\u5148 \u540e\u5e8f\u904d\u5386 \u53ef\u4ee5\u76f4\u63a5\u5f97\u5230 \u6839\u8282\u70b9 ,\u5373\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5f97\u5230\u4e86\u6839\u8282\u70b9 \u518d\u53bb\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230 \u6839\u8282\u70b9\u7684\u4e0b\u6807index \uff0c\u7136\u540e\u4ee5\u6839\u8282\u70b9\u4e0b\u6807\u4e3a\u5206\u754c\u70b9\uff0c\u5212\u5206\u51fa \u5de6\u53f3\u5b50\u6811\u533a\u95f4 \uff0c\u5de6\u5b50\u6811\u533a\u95f4\u4e3a [lin,index - 1] \uff0c\u53f3\u5b50\u6811\u533a\u95f4\u4e3a [index + 1,rin] \uff0c\u5e76 \u8ba1\u7b97\u51fa\u5de6\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570\u4e3aindex - lin \u7136\u540e\u6839\u636e\u5de6\u5b50\u6811\u7684\u8282\u70b9\u6570\u76ee\u5728 \u540e\u5e8f\u5e8f\u5217 \u4e2d\u786e\u5b9a\u540e\u5e8f\u5e8f\u5217\u4e2d \u5de6\u53f3\u5b50\u6811\u6240\u5728\u7684\u533a\u95f4 ,\u5de6\u5b50\u6811\u533a\u95f4\u4e3a [lpos,lpos + index - lin - 1] \uff0c\u53f3\u5b50\u6811\u533a\u95f4\u4e3a [lpos + index - lin,rpos - 1] \u6700\u540e\u9012\u5f52\u904d\u5386\u5373\u53ef","title":"\u601d\u8def"},{"location":"%E6%A0%91/leetcode106-%E4%BB%8E%E4%B8%AD%E5%BA%8F%E5%92%8C%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/#_4","text":"class Solution { public : TreeNode * build ( vector < int >& inorder , int lin , int rin , vector < int >& postorder , int lpos , int rpos ){ if ( lin > rin ) return nullptr ; //\u540e\u5e8f\u904d\u5386\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u4e3a\u6839\u8282\u70b9 int rootval = postorder [ rpos ]; int index = -1 ; //\u5728\u4e2d\u5e8f\u5e8f\u5217\u4e2d\u5bfb\u627e\u6839\u8282\u70b9 for ( int i = 0 ; i < inorder . size (); i ++ ){ if ( rootval == inorder [ i ]){ index = i ; break ; } } //\u901a\u8fc7\u4e2d\u5e8f\u5e8f\u5217\u548c\u6839\u8282\u70b9\u4f4d\u7f6e\u627e\u5230\u53f3\u5b50\u6811\u7684\u8282\u70b9\u6570\u76ee int leftnum = index - lin ; TreeNode * root = new TreeNode ( rootval ); root -> left = build ( inorder , lin , index - 1 , postorder , lpos , lpos + leftnum - 1 ); root -> right = build ( inorder , index + 1 , rin , postorder , lpos + leftnum , rpos - 1 ); return root ; } TreeNode * buildTree ( vector < int >& inorder , vector < int >& postorder ) { return build ( inorder , 0 , inorder . size () - 1 , postorder , 0 , postorder . size () - 1 ); } };","title":"\u4ee3\u7801"},{"location":"%E6%A0%91/leetcode106-%E4%BB%8E%E4%B8%AD%E5%BA%8F%E5%92%8C%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%A0%91/leetcode114-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c \u539f\u5730 \u5c06\u5b83\u5c55\u5f00\u4e3a\u4e00\u4e2a\u5355\u94fe\u8868\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e8c\u53c9\u6811 \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/ \u601d\u8def \u00b6 \u4e8c\u53c9\u6811\u7684\u9898\u76ee\u90fd\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u6765\u505a\uff0c\u5bf9\u4e8e\u9012\u5f52\uff0c\u6211\u4eec \u5e76\u4e0d\u9700\u8981\u6df1\u5165\u5230\u9012\u5f52\u51fd\u6570\u4e00\u5c42\u4e00\u5c42\u5206\u6790\uff0c\u53ea\u9700\u8981\u5173\u6ce8\u51fd\u6570\u7684\u529f\u80fd \uff0c\u5269\u4e0b\u7684\u5c31\u662f \u8003\u8651\u5728\u5f53\u524d\u5c42\u5e94\u8be5\u5e72\u561b \uff0c\u5176\u4ed6\u7684\u4e0d\u7528\u7ba1\uff0c\u53ea\u7ba1\u53bb\u8c03\u7528\u5373\u53ef\u3002 \u6bd4\u5982\u8fd9\u4e00\u9898\uff0c\u6211\u4eec\u8981\u5b9e\u73b0\u7684\u5c31\u662f\u5c06\u6574\u68f5\u6811\u53d8\u6210\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u6240\u4ee5\u6211\u4eec\u5b9a\u4e49\u7684\u51fd\u6570 flatten \u529f\u80fd\u5c31\u662f\u5c06\u6811\u53d8\u4e3a\u5355\u94fe\u8868\uff0c\u800c\u5982\u679c\u6211\u4eec\u5c06\u5de6\u5b50\u6811\u53d8\u4e3a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u53f3\u5b50\u6811\u53d8\u4e3a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u7136\u540e\u5c06\u5de6\u8fb9\u7684\u5355\u94fe\u8868\u63a5\u5230\u53f3\u8fb9\u5c31\u80fd\u5c06\u6574\u68f5\u6811\u53d8\u4e3a\u4e00\u4e2a\u5355\u94fe\u8868\u3002\u6240\u4ee5\uff1a \u6211\u4eec\u53ef\u4ee5\u5148\u9012\u5f52\u5de6\u53f3\u5b50\u6811\uff0c\u5c06\u5b83\u4eec\u5206\u522b\u53d8\u4e3a\u4e00\u4e2a\u5355\u94fe\u8868 \u7136\u540e\u5c06\u8fd9\u4e24\u4e2a\u5355\u94fe\u8868\u8fd8\u6709\u6839\u8282\u70b9\u8fdb\u884c\u62fc\u63a5\u5373\u53ef \u4ee3\u7801\u6ce8\u610f\u70b9\uff1a\u5728\u6700\u540e\u62fc\u63a5\u7684\u65f6\u5019\u662f\u9488\u5bf9\u6839\u8282\u70b9\u548c\u4e24\u4e2a\u5de6\u53f3\u5b50\u6811\u94fe\u8868\u8fdb\u884c\u64cd\u4f5c\uff0c\u6ce8\u610f\u662f\u5c06\u6839\u8282\u70b9\u7684\u53f3\u6307\u9488\u6307\u5411\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\u94fe\u8868\u5934\uff0c\u5c06\u8fd9\u4e2a\u94fe\u8868\u5c3e\u6307\u5411\u53f3\u5b50\u6811\u94fe\u8868\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u5faa\u73af\u64cd\u4f5c\uff0c\u4e0d\u80fd\u5199\u6210while\uff0c\u56e0\u4e3a\u5de6\u5b50\u6811\u94fe\u8868\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\uff0c\u9700\u8981\u904d\u5386\u5230\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u518d\u548c\u53f3\u5b50\u6811\u94fe\u8868\u62fc\u63a5\u624d\u884c\u3002eg\uff1a\u6839\u8282\u70b9\u548c\u5de6\u53f3\u5b50\u6811\u62fc\u63a5\u7684\u65f6\u5019\uff0c\u5de6\u5b50\u6811\u94fe\u8868\u4e3a 2\uff0c3\uff0c4 \uff0c\u6211\u4eec\u9700\u8981\u5c06\u53f3\u5b50\u6811\u94fe\u8868 5\uff0c6 \u62fc\u63a5\u57284\u540e\u9762\uff0c\u5982\u679c\u4f7f\u7528 if \uff0c\u90a3\u4e485\u5c31\u4f1a\u62fc\u57282\u540e\u9762\uff0c\u7136\u800c\u4f7f\u7528while\u7684\u65f6\u5019\u4f1a\u627e\u52304\u8fd9\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5c064\u6307\u54115\uff0c\u5c31\u5b8c\u6210\u4e86\u6574\u4e2a\u94fe\u8868\u7684\u6784\u9020\u3002 Tips : \u5176\u5b9e\u8fd9\u9898\u8ddf \u5f52\u5e76\u6392\u5e8f\u7684\u601d\u8def \u5f88\u50cf\uff0c\u5148\u9012\u5f52\u5904\u7406\u533a\u95f4\uff0c\u7136\u540e\u8fdb\u884c\u5408\u5e76\u3002 \u4ee3\u7801 \u00b6 class Solution { public : void flatten ( TreeNode * root ) { if ( ! root ) return ; flatten ( root -> left ); flatten ( root -> right ); TreeNode * temp = root -> right ; root -> right = root -> left ; root -> left = nullptr ; //\u8fd9\u91cc\u4f7f\u7528\u5faa\u73af\u662f\u56e0\u4e3a\u5de6\u5b50\u6811\u53ef\u80fd\u6709\u591a\u4e2a\u8282\u70b9 while ( root -> right != nullptr ) root = root -> right ; //\u5c06\u53f3\u5b50\u6811\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u8fde\u63a5\u4f46\u5de6\u5b50\u6811\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u540e\u9762 root -> right = temp ; return ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)","title":"leetcode114-\u4e8c\u53c9\u6811\u5c55\u5f00\u4e3a\u94fe\u8868"},{"location":"%E6%A0%91/leetcode114-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c \u539f\u5730 \u5c06\u5b83\u5c55\u5f00\u4e3a\u4e00\u4e2a\u5355\u94fe\u8868\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e8c\u53c9\u6811","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E6%A0%91/leetcode114-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/#_2","text":"https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E6%A0%91/leetcode114-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/#_3","text":"\u4e8c\u53c9\u6811\u7684\u9898\u76ee\u90fd\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u6765\u505a\uff0c\u5bf9\u4e8e\u9012\u5f52\uff0c\u6211\u4eec \u5e76\u4e0d\u9700\u8981\u6df1\u5165\u5230\u9012\u5f52\u51fd\u6570\u4e00\u5c42\u4e00\u5c42\u5206\u6790\uff0c\u53ea\u9700\u8981\u5173\u6ce8\u51fd\u6570\u7684\u529f\u80fd \uff0c\u5269\u4e0b\u7684\u5c31\u662f \u8003\u8651\u5728\u5f53\u524d\u5c42\u5e94\u8be5\u5e72\u561b \uff0c\u5176\u4ed6\u7684\u4e0d\u7528\u7ba1\uff0c\u53ea\u7ba1\u53bb\u8c03\u7528\u5373\u53ef\u3002 \u6bd4\u5982\u8fd9\u4e00\u9898\uff0c\u6211\u4eec\u8981\u5b9e\u73b0\u7684\u5c31\u662f\u5c06\u6574\u68f5\u6811\u53d8\u6210\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u6240\u4ee5\u6211\u4eec\u5b9a\u4e49\u7684\u51fd\u6570 flatten \u529f\u80fd\u5c31\u662f\u5c06\u6811\u53d8\u4e3a\u5355\u94fe\u8868\uff0c\u800c\u5982\u679c\u6211\u4eec\u5c06\u5de6\u5b50\u6811\u53d8\u4e3a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u53f3\u5b50\u6811\u53d8\u4e3a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u7136\u540e\u5c06\u5de6\u8fb9\u7684\u5355\u94fe\u8868\u63a5\u5230\u53f3\u8fb9\u5c31\u80fd\u5c06\u6574\u68f5\u6811\u53d8\u4e3a\u4e00\u4e2a\u5355\u94fe\u8868\u3002\u6240\u4ee5\uff1a \u6211\u4eec\u53ef\u4ee5\u5148\u9012\u5f52\u5de6\u53f3\u5b50\u6811\uff0c\u5c06\u5b83\u4eec\u5206\u522b\u53d8\u4e3a\u4e00\u4e2a\u5355\u94fe\u8868 \u7136\u540e\u5c06\u8fd9\u4e24\u4e2a\u5355\u94fe\u8868\u8fd8\u6709\u6839\u8282\u70b9\u8fdb\u884c\u62fc\u63a5\u5373\u53ef \u4ee3\u7801\u6ce8\u610f\u70b9\uff1a\u5728\u6700\u540e\u62fc\u63a5\u7684\u65f6\u5019\u662f\u9488\u5bf9\u6839\u8282\u70b9\u548c\u4e24\u4e2a\u5de6\u53f3\u5b50\u6811\u94fe\u8868\u8fdb\u884c\u64cd\u4f5c\uff0c\u6ce8\u610f\u662f\u5c06\u6839\u8282\u70b9\u7684\u53f3\u6307\u9488\u6307\u5411\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\u94fe\u8868\u5934\uff0c\u5c06\u8fd9\u4e2a\u94fe\u8868\u5c3e\u6307\u5411\u53f3\u5b50\u6811\u94fe\u8868\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u5faa\u73af\u64cd\u4f5c\uff0c\u4e0d\u80fd\u5199\u6210while\uff0c\u56e0\u4e3a\u5de6\u5b50\u6811\u94fe\u8868\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\uff0c\u9700\u8981\u904d\u5386\u5230\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u518d\u548c\u53f3\u5b50\u6811\u94fe\u8868\u62fc\u63a5\u624d\u884c\u3002eg\uff1a\u6839\u8282\u70b9\u548c\u5de6\u53f3\u5b50\u6811\u62fc\u63a5\u7684\u65f6\u5019\uff0c\u5de6\u5b50\u6811\u94fe\u8868\u4e3a 2\uff0c3\uff0c4 \uff0c\u6211\u4eec\u9700\u8981\u5c06\u53f3\u5b50\u6811\u94fe\u8868 5\uff0c6 \u62fc\u63a5\u57284\u540e\u9762\uff0c\u5982\u679c\u4f7f\u7528 if \uff0c\u90a3\u4e485\u5c31\u4f1a\u62fc\u57282\u540e\u9762\uff0c\u7136\u800c\u4f7f\u7528while\u7684\u65f6\u5019\u4f1a\u627e\u52304\u8fd9\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5c064\u6307\u54115\uff0c\u5c31\u5b8c\u6210\u4e86\u6574\u4e2a\u94fe\u8868\u7684\u6784\u9020\u3002 Tips : \u5176\u5b9e\u8fd9\u9898\u8ddf \u5f52\u5e76\u6392\u5e8f\u7684\u601d\u8def \u5f88\u50cf\uff0c\u5148\u9012\u5f52\u5904\u7406\u533a\u95f4\uff0c\u7136\u540e\u8fdb\u884c\u5408\u5e76\u3002","title":"\u601d\u8def"},{"location":"%E6%A0%91/leetcode114-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/#_4","text":"class Solution { public : void flatten ( TreeNode * root ) { if ( ! root ) return ; flatten ( root -> left ); flatten ( root -> right ); TreeNode * temp = root -> right ; root -> right = root -> left ; root -> left = nullptr ; //\u8fd9\u91cc\u4f7f\u7528\u5faa\u73af\u662f\u56e0\u4e3a\u5de6\u5b50\u6811\u53ef\u80fd\u6709\u591a\u4e2a\u8282\u70b9 while ( root -> right != nullptr ) root = root -> right ; //\u5c06\u53f3\u5b50\u6811\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u8fde\u63a5\u4f46\u5de6\u5b50\u6811\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u540e\u9762 root -> right = temp ; return ; } };","title":"\u4ee3\u7801"},{"location":"%E6%A0%91/leetcode114-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%A0%91/leetcode129-%E6%B1%82%E6%A0%B9%E5%88%B0%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5b83\u7684\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u5b58\u653e\u4e00\u4e2a 0-9 \u7684\u6570\u5b57\uff0c\u6bcf\u6761\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u90fd\u4ee3\u8868\u4e00\u4e2a\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 1->2->3 \u4ee3\u8868\u6570\u5b57 123\u3002 \u8ba1\u7b97\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u751f\u6210\u7684\u6240\u6709\u6570\u5b57\u4e4b\u548c\u3002 \u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/sum-root-to-leaf-numbers \u601d\u8def \u00b6 \u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u6240\u6709\u8def\u5f84\uff0c\u53ef\u4ee5\u60f3\u5230\u7528DFS \u4ece\u6839\u5f00\u59cb\u904d\u5386\uff0c\u6bcf\u6b21\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u904d\u5386\u7684\u65f6\u5019\u5c31\u5c06 \u4e4b\u524d\u904d\u5386\u7684\u6240\u6709\u8282\u70b9\u7684\u503c*10 \uff0c\u7136\u540e \u52a0\u4e0a\u5f53\u524d\u8282\u70b9\u503c \u6700\u7ec8 \u5230\u8fbe\u53f6\u5b50\u8282\u70b9 \u7684\u65f6\u5019\u5373\u4e3a \u8fd9\u6761\u5206\u652f\u7684\u503c \u9012\u5f52\u904d\u5386\u5de6\u53f3\u5b50\u6811 \uff0c\u5c06\u5de6\u53f3\u5b50\u6811\u7684\u503c\u76f8\u52a0 \u6ce8\u610f\u4e24\u4e2a\u8fb9\u754c\u60c5\u51b5\uff1a \u5f53 \u8282\u70b9\u4e3a null \u7684\u65f6\u5019\uff0c\u8fd4\u56de0 \u5f53 \u8282\u70b9\u65e0\u5de6\u53f3\u5b50\u6811 \u7684\u65f6\u5019\uff0c\u5373\u4e3a\u53f6\u8282\u70b9\u7684\u65f6\u5019\uff0c\u8fd4\u56de\u5f53\u524d\u5df2\u7ecf\u8ba1\u7b97\u7684\u503csum \u4ee3\u7801 \u00b6 class Solution { public : int dfs ( TreeNode * root , int preSum ){ if ( root == nullptr ) return 0 ; int sum = preSum * 10 + root -> val ; if ( root -> left == nullptr && root -> right == nullptr ) return sum ; return dfs ( root -> left , sum ) + dfs ( root -> right , sum ); } int sumNumbers ( TreeNode * root ) { int sum = dfs ( root , 0 ); return sum ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)","title":"leetcode129-\u6c42\u6839\u5230\u53f6\u5b50\u8282\u70b9\u6570\u5b57\u4e4b\u548c"},{"location":"%E6%A0%91/leetcode129-%E6%B1%82%E6%A0%B9%E5%88%B0%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5b83\u7684\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u5b58\u653e\u4e00\u4e2a 0-9 \u7684\u6570\u5b57\uff0c\u6bcf\u6761\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u90fd\u4ee3\u8868\u4e00\u4e2a\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 1->2->3 \u4ee3\u8868\u6570\u5b57 123\u3002 \u8ba1\u7b97\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u751f\u6210\u7684\u6240\u6709\u6570\u5b57\u4e4b\u548c\u3002 \u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E6%A0%91/leetcode129-%E6%B1%82%E6%A0%B9%E5%88%B0%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/#_2","text":"https://leetcode-cn.com/problems/sum-root-to-leaf-numbers","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E6%A0%91/leetcode129-%E6%B1%82%E6%A0%B9%E5%88%B0%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/#_3","text":"\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u6240\u6709\u8def\u5f84\uff0c\u53ef\u4ee5\u60f3\u5230\u7528DFS \u4ece\u6839\u5f00\u59cb\u904d\u5386\uff0c\u6bcf\u6b21\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u904d\u5386\u7684\u65f6\u5019\u5c31\u5c06 \u4e4b\u524d\u904d\u5386\u7684\u6240\u6709\u8282\u70b9\u7684\u503c*10 \uff0c\u7136\u540e \u52a0\u4e0a\u5f53\u524d\u8282\u70b9\u503c \u6700\u7ec8 \u5230\u8fbe\u53f6\u5b50\u8282\u70b9 \u7684\u65f6\u5019\u5373\u4e3a \u8fd9\u6761\u5206\u652f\u7684\u503c \u9012\u5f52\u904d\u5386\u5de6\u53f3\u5b50\u6811 \uff0c\u5c06\u5de6\u53f3\u5b50\u6811\u7684\u503c\u76f8\u52a0 \u6ce8\u610f\u4e24\u4e2a\u8fb9\u754c\u60c5\u51b5\uff1a \u5f53 \u8282\u70b9\u4e3a null \u7684\u65f6\u5019\uff0c\u8fd4\u56de0 \u5f53 \u8282\u70b9\u65e0\u5de6\u53f3\u5b50\u6811 \u7684\u65f6\u5019\uff0c\u5373\u4e3a\u53f6\u8282\u70b9\u7684\u65f6\u5019\uff0c\u8fd4\u56de\u5f53\u524d\u5df2\u7ecf\u8ba1\u7b97\u7684\u503csum","title":"\u601d\u8def"},{"location":"%E6%A0%91/leetcode129-%E6%B1%82%E6%A0%B9%E5%88%B0%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/#_4","text":"class Solution { public : int dfs ( TreeNode * root , int preSum ){ if ( root == nullptr ) return 0 ; int sum = preSum * 10 + root -> val ; if ( root -> left == nullptr && root -> right == nullptr ) return sum ; return dfs ( root -> left , sum ) + dfs ( root -> right , sum ); } int sumNumbers ( TreeNode * root ) { int sum = dfs ( root , 0 ); return sum ; } };","title":"\u4ee3\u7801"},{"location":"%E6%A0%91/leetcode129-%E6%B1%82%E6%A0%B9%E5%88%B0%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%A0%91/leetcode226-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ffb\u8f6c\u4e00\u68f5\u4e8c\u53c9\u6811\u3002 \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/invert-binary-tree/ \u601d\u8def \u00b6 \u9996\u5148\u53ef\u4ee5\u770b\u5230\uff0c\u7ffb\u8f6c\u540e\u7684\u4e8c\u53c9\u6811\u5c31\u662f\uff1a \u4ee5\u6839\u8282\u70b9\u4e3a\u57fa\u7840\u4ea4\u6362\u4e24\u68f5\u5de6\u53f3\u5b50\u6811 \u4ea4\u6362\u5b8c\u6210\u540e\u518d\u5bf9\u5de6\u53f3\u5b50\u6811\u8fdb\u884c\u540c\u6837\u7684\u64cd\u4f5c\uff08\u9012\u5f52\u64cd\u4f5c\u5de6\u53f3\u5b50\u6811\uff09 \u4ee3\u7801 \u00b6 class Solution { public : TreeNode * invertTree ( TreeNode * root ) { if ( root == nullptr ) return root ; //\u7ffb\u8f6c\u6839\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811 TreeNode * r = root -> right ; root -> right = root -> left ; root -> left = r ; //\u9012\u5f52\u7ffb\u8f6c\u5de6\u53f3\u5b69\u5b50\u7684\u5b50\u6811 invertTree ( root -> left ); invertTree ( root -> right ); return root ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(N) ,\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)","title":"leetcode226-\u7ffb\u8f6c\u4e8c\u53c9\u6811_\u4e8c\u53c9\u6811\u7684\u955c\u50cf"},{"location":"%E6%A0%91/leetcode226-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/#_1","text":"\u7ffb\u8f6c\u4e00\u68f5\u4e8c\u53c9\u6811\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E6%A0%91/leetcode226-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/#_2","text":"https://leetcode-cn.com/problems/invert-binary-tree/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E6%A0%91/leetcode226-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/#_3","text":"\u9996\u5148\u53ef\u4ee5\u770b\u5230\uff0c\u7ffb\u8f6c\u540e\u7684\u4e8c\u53c9\u6811\u5c31\u662f\uff1a \u4ee5\u6839\u8282\u70b9\u4e3a\u57fa\u7840\u4ea4\u6362\u4e24\u68f5\u5de6\u53f3\u5b50\u6811 \u4ea4\u6362\u5b8c\u6210\u540e\u518d\u5bf9\u5de6\u53f3\u5b50\u6811\u8fdb\u884c\u540c\u6837\u7684\u64cd\u4f5c\uff08\u9012\u5f52\u64cd\u4f5c\u5de6\u53f3\u5b50\u6811\uff09","title":"\u601d\u8def"},{"location":"%E6%A0%91/leetcode226-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/#_4","text":"class Solution { public : TreeNode * invertTree ( TreeNode * root ) { if ( root == nullptr ) return root ; //\u7ffb\u8f6c\u6839\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811 TreeNode * r = root -> right ; root -> right = root -> left ; root -> left = r ; //\u9012\u5f52\u7ffb\u8f6c\u5de6\u53f3\u5b69\u5b50\u7684\u5b50\u6811 invertTree ( root -> left ); invertTree ( root -> right ); return root ; } };","title":"\u4ee3\u7801"},{"location":"%E6%A0%91/leetcode226-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(N) ,\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%A0%91/leetcode297-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u5e8f\u5217\u5316\u662f\u5c06\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6216\u8005\u5bf9\u8c61\u8f6c\u6362\u4e3a\u8fde\u7eed\u7684\u6bd4\u7279\u4f4d\u7684\u64cd\u4f5c\uff0c\u8fdb\u800c\u53ef\u4ee5\u5c06\u8f6c\u6362\u540e\u7684\u6570\u636e\u5b58\u50a8\u5728\u4e00\u4e2a\u6587\u4ef6\u6216\u8005\u5185\u5b58\u4e2d\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u5230\u53e6\u4e00\u4e2a\u8ba1\u7b97\u673a\u73af\u5883\uff0c\u91c7\u53d6\u76f8\u53cd\u65b9\u5f0f\u91cd\u6784\u5f97\u5230\u539f\u6570\u636e\u3002 \u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u5b9e\u73b0\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u3002\u8fd9\u91cc\u4e0d\u9650\u5b9a\u4f60\u7684\u5e8f\u5217 / \u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u6267\u884c\u903b\u8f91\uff0c\u4f60\u53ea\u9700\u8981\u4fdd\u8bc1\u4e00\u4e2a\u4e8c\u53c9\u6811\u53ef\u4ee5\u88ab\u5e8f\u5217\u5316\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e76\u4e14\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u539f\u59cb\u7684\u6811\u7ed3\u6784\u3002 \u8bf7\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u7528\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u3002\uff08\u5f53\u7136\u81ea\u5df1\u5e8f\u5217\u5316\u7684\u683c\u5f0f\u4e0d\u9650\u5b9a\uff09 \u793a\u4f8b: \u4f60\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4e8c\u53c9\u6811\uff1a 1 / \\ 2 3 / \\ 4 5 \u5e8f\u5217\u5316\u4e3a \"[1,2,3,null,null,4,5]\" \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree \u601d\u8def \u00b6 \u5148\u5e8f\u904d\u5386 \u5e8f\u5217\u5316 \uff1a\u5f53\u6839\u8282\u70b9\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u8bfb\u5165\"#\"\uff0c\u76f4\u63a5\u9000\u51fa\uff1b\u5426\u5219\u5c31\u8bfb\u5165\u5b83\u7684\u503c\uff0c\u7136\u540e\u9012\u5f52\u904d\u5386\u5de6\u53f3\u5b50\u6811\uff0c\u5373\u53ef\u5c06\u6811\u7684\u5143\u7d20\u90fd\u8bfb\u5165 ostrinstream ,\u6700\u540e\u5c06stream\u6d41\u8f6c\u4e3astring\u7c7b\u578b \u53cd\u5e8f\u5217\u5316 \uff1a\u9996\u5148\u901a\u8fc7 isringstream \u5c06\u6570\u636e\u5148\u5b58\u5165stream\u6d41\u4e2d\uff0c\u7136\u540e\u4e00\u4e2a\u4e00\u4e2a\u8bfb\u51fa\u6765\uff0c\u5982\u679c\u4e00\u5f00\u59cb\u8bfb\u5230\u5b57\u7b26\"null\",\u5c31\u8fd4\u56de\u7a7a\u6307\u9488(\u8868\u660e\u662f\u7a7a\u6811)\uff1b\u5426\u5219\u6784\u9020\u7b49\u4e8e\u8fd9\u4e2a\u503c\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u9012\u5f52\u904d\u5386\uff0c\u751f\u6210\u5de6\u53f3\u5b50\u6811 \u4ee3\u7801 \u00b6 class Codec { public : void serial ( TreeNode * root , ostringstream & out ){ if ( ! root ){ out << \"# \" ; return ; } //\u8bfb\u5165\u6839\u8282\u70b9\u7684\u503c\uff0c\u540e\u9762\u7528\u7a7a\u683c\u5206\u5272\uff0c\u8fd9\u662f\u4e3a\u4e86\u65b9\u4fbf\u65b9\u4fbfistringstream\u4ee5\u7a7a\u683c\u8fdb\u884c\u5206\u5272 out << root -> val << \" \" ; serial ( root -> left , out ); serial ( root -> right , out ); } TreeNode * deserial ( istringstream & in ){ string val ; in >> val ; if ( val == \"#\" ) return nullptr ; TreeNode * root = new TreeNode ( stoi ( val )); root -> left = deserial ( in ); root -> right = deserial ( in ); return root ; } // Encodes a tree to a single string. string serialize ( TreeNode * root ) { ostringstream out ; serial ( root , out ); return out . str (); } // Decodes your encoded data to tree. TreeNode * deserialize ( string data ) { istringstream in ( data ); return deserial ( in ); } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u5e8f\u5217\u5316\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N) \u53cd\u5e8f\u5217\u5316\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N)","title":"leetcode297-\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316"},{"location":"%E6%A0%91/leetcode297-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#_1","text":"\u5e8f\u5217\u5316\u662f\u5c06\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6216\u8005\u5bf9\u8c61\u8f6c\u6362\u4e3a\u8fde\u7eed\u7684\u6bd4\u7279\u4f4d\u7684\u64cd\u4f5c\uff0c\u8fdb\u800c\u53ef\u4ee5\u5c06\u8f6c\u6362\u540e\u7684\u6570\u636e\u5b58\u50a8\u5728\u4e00\u4e2a\u6587\u4ef6\u6216\u8005\u5185\u5b58\u4e2d\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u5230\u53e6\u4e00\u4e2a\u8ba1\u7b97\u673a\u73af\u5883\uff0c\u91c7\u53d6\u76f8\u53cd\u65b9\u5f0f\u91cd\u6784\u5f97\u5230\u539f\u6570\u636e\u3002 \u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u5b9e\u73b0\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u3002\u8fd9\u91cc\u4e0d\u9650\u5b9a\u4f60\u7684\u5e8f\u5217 / \u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u6267\u884c\u903b\u8f91\uff0c\u4f60\u53ea\u9700\u8981\u4fdd\u8bc1\u4e00\u4e2a\u4e8c\u53c9\u6811\u53ef\u4ee5\u88ab\u5e8f\u5217\u5316\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e76\u4e14\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u539f\u59cb\u7684\u6811\u7ed3\u6784\u3002 \u8bf7\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u7528\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u3002\uff08\u5f53\u7136\u81ea\u5df1\u5e8f\u5217\u5316\u7684\u683c\u5f0f\u4e0d\u9650\u5b9a\uff09 \u793a\u4f8b: \u4f60\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4e8c\u53c9\u6811\uff1a 1 / \\ 2 3 / \\ 4 5 \u5e8f\u5217\u5316\u4e3a \"[1,2,3,null,null,4,5]\"","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E6%A0%91/leetcode297-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#_2","text":"https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E6%A0%91/leetcode297-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#_3","text":"\u5148\u5e8f\u904d\u5386 \u5e8f\u5217\u5316 \uff1a\u5f53\u6839\u8282\u70b9\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u8bfb\u5165\"#\"\uff0c\u76f4\u63a5\u9000\u51fa\uff1b\u5426\u5219\u5c31\u8bfb\u5165\u5b83\u7684\u503c\uff0c\u7136\u540e\u9012\u5f52\u904d\u5386\u5de6\u53f3\u5b50\u6811\uff0c\u5373\u53ef\u5c06\u6811\u7684\u5143\u7d20\u90fd\u8bfb\u5165 ostrinstream ,\u6700\u540e\u5c06stream\u6d41\u8f6c\u4e3astring\u7c7b\u578b \u53cd\u5e8f\u5217\u5316 \uff1a\u9996\u5148\u901a\u8fc7 isringstream \u5c06\u6570\u636e\u5148\u5b58\u5165stream\u6d41\u4e2d\uff0c\u7136\u540e\u4e00\u4e2a\u4e00\u4e2a\u8bfb\u51fa\u6765\uff0c\u5982\u679c\u4e00\u5f00\u59cb\u8bfb\u5230\u5b57\u7b26\"null\",\u5c31\u8fd4\u56de\u7a7a\u6307\u9488(\u8868\u660e\u662f\u7a7a\u6811)\uff1b\u5426\u5219\u6784\u9020\u7b49\u4e8e\u8fd9\u4e2a\u503c\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u9012\u5f52\u904d\u5386\uff0c\u751f\u6210\u5de6\u53f3\u5b50\u6811","title":"\u601d\u8def"},{"location":"%E6%A0%91/leetcode297-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#_4","text":"class Codec { public : void serial ( TreeNode * root , ostringstream & out ){ if ( ! root ){ out << \"# \" ; return ; } //\u8bfb\u5165\u6839\u8282\u70b9\u7684\u503c\uff0c\u540e\u9762\u7528\u7a7a\u683c\u5206\u5272\uff0c\u8fd9\u662f\u4e3a\u4e86\u65b9\u4fbf\u65b9\u4fbfistringstream\u4ee5\u7a7a\u683c\u8fdb\u884c\u5206\u5272 out << root -> val << \" \" ; serial ( root -> left , out ); serial ( root -> right , out ); } TreeNode * deserial ( istringstream & in ){ string val ; in >> val ; if ( val == \"#\" ) return nullptr ; TreeNode * root = new TreeNode ( stoi ( val )); root -> left = deserial ( in ); root -> right = deserial ( in ); return root ; } // Encodes a tree to a single string. string serialize ( TreeNode * root ) { ostringstream out ; serial ( root , out ); return out . str (); } // Decodes your encoded data to tree. TreeNode * deserialize ( string data ) { istringstream in ( data ); return deserial ( in ); } };","title":"\u4ee3\u7801"},{"location":"%E6%A0%91/leetcode297-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#_5","text":"\u5e8f\u5217\u5316\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N) \u53cd\u5e8f\u5217\u5316\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%A0%91/leetcode654-%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u4e0d\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4\u3002\u4e00\u4e2a\u4ee5\u6b64\u6570\u7ec4\u6784\u5efa\u7684\u6700\u5927\u4e8c\u53c9\u6811\u5b9a\u4e49\u5982\u4e0b\uff1a \u4e8c\u53c9\u6811\u7684\u6839\u662f\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u5143\u7d20\u3002 \u5de6\u5b50\u6811\u662f\u901a\u8fc7\u6570\u7ec4\u4e2d\u6700\u5927\u503c\u5de6\u8fb9\u90e8\u5206\u6784\u9020\u51fa\u7684\u6700\u5927\u4e8c\u53c9\u6811\u3002 \u53f3\u5b50\u6811\u662f\u901a\u8fc7\u6570\u7ec4\u4e2d\u6700\u5927\u503c\u53f3\u8fb9\u90e8\u5206\u6784\u9020\u51fa\u7684\u6700\u5927\u4e8c\u53c9\u6811\u3002 \u901a\u8fc7\u7ed9\u5b9a\u7684\u6570\u7ec4\u6784\u5efa\u6700\u5927\u4e8c\u53c9\u6811\uff0c\u5e76\u4e14\u8f93\u51fa\u8fd9\u4e2a\u6811\u7684\u6839\u8282\u70b9\u3002 \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/maximum-binary-tree \u601d\u8def \u00b6 \u6839\u636e\u672c\u9898\u7684\u9898\u610f\uff0c\u6211\u4eec\u51fd\u6570\u7684\u76ee\u7684\u662f\uff1a \u627e\u6700\u5927\u7684\u5143\u7d20 \u4f5c\u4e3a\u6811\u7684\u6839\uff0c\u7136\u540e\u6839\u636e\u8fd9\u4e2a\u6700\u5927\u503c\u5143\u7d20\u8fdb\u884c\u5de6\u53f3\u5212\u5206\uff0c\u7136\u540e\u518d \u627e\u5de6\u53f3\u533a\u95f4\u4e2d\u7684\u6700\u5927\u503c \u5206\u522b\u4f5c\u4e3a\u6839\u7684\u5de6\u53f3\u5b69\u5b50\u3002\u6240\u4ee5\u660e\u786e\u4e86\u76ee\u7684\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u5c31\u662f\u5bfb\u627e\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\uff0c\u7136\u540e\u6839\u636e\u5b83\u7684 \u7d22\u5f15 \uff0c\u5bf9\u5de6\u53f3\u5b50\u6811\u8fdb\u884c \u533a\u95f4\u7684\u5212\u5206 \uff0c\u7136\u540e\u9012\u5f52\u5de6\u53f3\u533a\u95f4\u5bfb\u627e\u5176\u4e2d\u7684\u6700\u5927\u503c\u5373\u53ef\u3002 \u4ee3\u7801 \u00b6 class Solution { public : TreeNode * build ( vector < int >& nums , int l , int r ){ if ( l > r ) return nullptr ; int maxValue = INT_MIN , index = -1 ; //\u5bfb\u627e\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c for ( int i = l ; i <= r ; i ++ ){ if ( nums [ i ] > maxValue ){ maxValue = nums [ i ]; index = i ; } } TreeNode * root = new TreeNode ( maxValue ); //\u9012\u5f52\u5904\u7406\u5de6\u53f3\u533a\u95f4\uff0c\u627e\u5230\u6839\u7684\u5de6\u53f3\u5b50\u6811\u7684\u6839\u8282\u70b9 root -> left = build ( nums , l , index -1 ); root -> right = build ( nums , index + 1 , r ); return root ; } TreeNode * constructMaximumBinaryTree ( vector < int >& nums ) { //\u5148\u627e\u51fa\u6700\u5927\u503c\u5143\u7d20\u548c\u5176\u4e0b\u6807\uff0c\u518d\u4ee5\u8fd9\u4e2a\u4e0b\u6807\u8fdb\u884c\u5212\u5206\uff0c\u5bf9\u5de6\u53f3\u533a\u95f4\u8fdb\u884c\u6784\u9020 return build ( nums , 0 , nums . size () - 1 ); } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)","title":"leetcode654-\u6700\u5927\u4e8c\u53c9\u6811"},{"location":"%E6%A0%91/leetcode654-%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e0d\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4\u3002\u4e00\u4e2a\u4ee5\u6b64\u6570\u7ec4\u6784\u5efa\u7684\u6700\u5927\u4e8c\u53c9\u6811\u5b9a\u4e49\u5982\u4e0b\uff1a \u4e8c\u53c9\u6811\u7684\u6839\u662f\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u5143\u7d20\u3002 \u5de6\u5b50\u6811\u662f\u901a\u8fc7\u6570\u7ec4\u4e2d\u6700\u5927\u503c\u5de6\u8fb9\u90e8\u5206\u6784\u9020\u51fa\u7684\u6700\u5927\u4e8c\u53c9\u6811\u3002 \u53f3\u5b50\u6811\u662f\u901a\u8fc7\u6570\u7ec4\u4e2d\u6700\u5927\u503c\u53f3\u8fb9\u90e8\u5206\u6784\u9020\u51fa\u7684\u6700\u5927\u4e8c\u53c9\u6811\u3002 \u901a\u8fc7\u7ed9\u5b9a\u7684\u6570\u7ec4\u6784\u5efa\u6700\u5927\u4e8c\u53c9\u6811\uff0c\u5e76\u4e14\u8f93\u51fa\u8fd9\u4e2a\u6811\u7684\u6839\u8282\u70b9\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E6%A0%91/leetcode654-%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91/#_2","text":"https://leetcode-cn.com/problems/maximum-binary-tree","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E6%A0%91/leetcode654-%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91/#_3","text":"\u6839\u636e\u672c\u9898\u7684\u9898\u610f\uff0c\u6211\u4eec\u51fd\u6570\u7684\u76ee\u7684\u662f\uff1a \u627e\u6700\u5927\u7684\u5143\u7d20 \u4f5c\u4e3a\u6811\u7684\u6839\uff0c\u7136\u540e\u6839\u636e\u8fd9\u4e2a\u6700\u5927\u503c\u5143\u7d20\u8fdb\u884c\u5de6\u53f3\u5212\u5206\uff0c\u7136\u540e\u518d \u627e\u5de6\u53f3\u533a\u95f4\u4e2d\u7684\u6700\u5927\u503c \u5206\u522b\u4f5c\u4e3a\u6839\u7684\u5de6\u53f3\u5b69\u5b50\u3002\u6240\u4ee5\u660e\u786e\u4e86\u76ee\u7684\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u5c31\u662f\u5bfb\u627e\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\uff0c\u7136\u540e\u6839\u636e\u5b83\u7684 \u7d22\u5f15 \uff0c\u5bf9\u5de6\u53f3\u5b50\u6811\u8fdb\u884c \u533a\u95f4\u7684\u5212\u5206 \uff0c\u7136\u540e\u9012\u5f52\u5de6\u53f3\u533a\u95f4\u5bfb\u627e\u5176\u4e2d\u7684\u6700\u5927\u503c\u5373\u53ef\u3002","title":"\u601d\u8def"},{"location":"%E6%A0%91/leetcode654-%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91/#_4","text":"class Solution { public : TreeNode * build ( vector < int >& nums , int l , int r ){ if ( l > r ) return nullptr ; int maxValue = INT_MIN , index = -1 ; //\u5bfb\u627e\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c for ( int i = l ; i <= r ; i ++ ){ if ( nums [ i ] > maxValue ){ maxValue = nums [ i ]; index = i ; } } TreeNode * root = new TreeNode ( maxValue ); //\u9012\u5f52\u5904\u7406\u5de6\u53f3\u533a\u95f4\uff0c\u627e\u5230\u6839\u7684\u5de6\u53f3\u5b50\u6811\u7684\u6839\u8282\u70b9 root -> left = build ( nums , l , index -1 ); root -> right = build ( nums , index + 1 , r ); return root ; } TreeNode * constructMaximumBinaryTree ( vector < int >& nums ) { //\u5148\u627e\u51fa\u6700\u5927\u503c\u5143\u7d20\u548c\u5176\u4e0b\u6807\uff0c\u518d\u4ee5\u8fd9\u4e2a\u4e0b\u6807\u8fdb\u884c\u5212\u5206\uff0c\u5bf9\u5de6\u53f3\u533a\u95f4\u8fdb\u884c\u6784\u9020 return build ( nums , 0 , nums . size () - 1 ); } };","title":"\u4ee3\u7801"},{"location":"%E6%A0%91/leetcode654-%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/BFS%E9%81%8D%E5%8E%86%E6%A8%A1%E6%9D%BF/","text":"BFS\u6a21\u677f \u00b6 BFS\u53c8\u79f0 \u5bbd\u5ea6\u4f18\u5148\u904d\u5386 \uff0c\u7c7b\u4f3c\u4e8e\u6811\u4e2d\u7684 \u5c42\u6b21\u904d\u5386 \uff0c\u662f\u4e00\u79cd\u4ece\u4e0a\u81f3\u4e0b\uff0c\u4e00\u5c42\u4e00\u5c42\u8fdb\u884c\u7684\u904d\u5386\uff0c\u901a\u5e38\u91c7\u7528 \u961f\u5217 \u6765\u5b9e\u73b0 \u57fa\u672c\u6846\u67b6 \u00b6 void leyerVisit ( TreeNode * root ) { queue < TreeNode *> q ; TreeNode * cur_front = new TreeNode ( 0 ); q . push ( root ); //\u6839\u8282\u70b9\u5165\u961f while ( ! q . empty ()){ cur_front = q . front (); //\u8bb0\u5f55\u961f\u9996\u8282\u70b9\uff0c\u56e0\u4e3a\u540e\u9762\u961f\u9996\u51fa\u6808\u540e\u9700\u8981\u5c06\u5176\u5de6\u53f3\u5b69\u5b50\u5165\u961f q . pop (); //\u961f\u9996\u5143\u7d20\u51fa\u961f if ( cur_front -> left != nullptr ){ //\u5982\u679c\u5b58\u5728\u5de6\u5b69\u5b50\u5219\u5165\u961f q . push ( cur_front -> left ); } if ( cur_front -> right != nullptr ){ //\u5982\u679c\u5b58\u5728\u53f3\u5b69\u5b50\u5219\u5165\u961f q . push ( cur_front -> right ); } } } \u5982\u679c\u5728BFS\u904d\u5386\u8fc7\u7a0b\u4e2d\u8fd8\u9700\u8981\u6709\u5176\u4ed6\u7684\u64cd\u4f5c\uff0c\u53ea\u9700\u8981\u5728\u4e0a\u8ff0\u7684\u6846\u67b6\u4e2d \u6dfb\u7816\u52a0\u74e6 \u5373\u53ef","title":"BFS\u904d\u5386"},{"location":"%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/BFS%E9%81%8D%E5%8E%86%E6%A8%A1%E6%9D%BF/#bfs","text":"BFS\u53c8\u79f0 \u5bbd\u5ea6\u4f18\u5148\u904d\u5386 \uff0c\u7c7b\u4f3c\u4e8e\u6811\u4e2d\u7684 \u5c42\u6b21\u904d\u5386 \uff0c\u662f\u4e00\u79cd\u4ece\u4e0a\u81f3\u4e0b\uff0c\u4e00\u5c42\u4e00\u5c42\u8fdb\u884c\u7684\u904d\u5386\uff0c\u901a\u5e38\u91c7\u7528 \u961f\u5217 \u6765\u5b9e\u73b0","title":"BFS\u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/BFS%E9%81%8D%E5%8E%86%E6%A8%A1%E6%9D%BF/#_1","text":"void leyerVisit ( TreeNode * root ) { queue < TreeNode *> q ; TreeNode * cur_front = new TreeNode ( 0 ); q . push ( root ); //\u6839\u8282\u70b9\u5165\u961f while ( ! q . empty ()){ cur_front = q . front (); //\u8bb0\u5f55\u961f\u9996\u8282\u70b9\uff0c\u56e0\u4e3a\u540e\u9762\u961f\u9996\u51fa\u6808\u540e\u9700\u8981\u5c06\u5176\u5de6\u53f3\u5b69\u5b50\u5165\u961f q . pop (); //\u961f\u9996\u5143\u7d20\u51fa\u961f if ( cur_front -> left != nullptr ){ //\u5982\u679c\u5b58\u5728\u5de6\u5b69\u5b50\u5219\u5165\u961f q . push ( cur_front -> left ); } if ( cur_front -> right != nullptr ){ //\u5982\u679c\u5b58\u5728\u53f3\u5b69\u5b50\u5219\u5165\u961f q . push ( cur_front -> right ); } } } \u5982\u679c\u5728BFS\u904d\u5386\u8fc7\u7a0b\u4e2d\u8fd8\u9700\u8981\u6709\u5176\u4ed6\u7684\u64cd\u4f5c\uff0c\u53ea\u9700\u8981\u5728\u4e0a\u8ff0\u7684\u6846\u67b6\u4e2d \u6dfb\u7816\u52a0\u74e6 \u5373\u53ef","title":"\u57fa\u672c\u6846\u67b6"},{"location":"%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/","text":"\u4e8c\u5206\u6cd5 \u00b6 \u5bf9\u4e8e\u4e8c\u5206\u6cd5\u975e\u5e38\u5bb9\u6613\u51fa\u95ee\u9898\u7684\u5c31\u662f\u67e5\u627e\u7684\u8fb9\u754c\u95ee\u9898 \u4e0b\u9762\u662f\u4e24\u4e2a\u5e38\u7528\u7684\u6a21\u677f\u6846\u67b6\uff1a \u6846\u67b6\u4e00 \u00b6 int l = 0 ; int r = nums . size () - 1 ; while ( l <= r ) { int mid = ( l + r ) >> 1 if ( nums [ mid ] == target ) return \u5408\u9002\u7684\u503c if ( nums [ mid ] < target ) l = mid + 1 if ( nums [ mid ] > target ]) r = mid - 1 } // \u770b\u5177\u4f53\u9898\u610f\uff0c\u6b64\u65f6 l == r + 1 return l \u6846\u67b6\u4e8c \u00b6 \u8fd9\u4e2a\u6846\u67b6\u4e3b\u8981\u662f\u6839\u636e\u7406\u89e3\u6765\u5199 int l = 0 ; int r = nums . size () - 1 ; while ( l < r ){ int mid = ( l + r ) >> 1 ; if ( nums [ mid ] <= target ) r = mid ; else l = mid + 1 ; } //\u6b64\u65f6 l == r return l ; \u6ce8\u610f\uff0c\u8fd9\u4e2a\u6846\u67b6\u4e0b\uff0c\u6700\u540e\u8fd4\u56de\u7684l == r\uff0c\u5982\u679c\u9047\u5230\u8fd4\u56de\u7684\u7ed3\u679c\u53ef\u80fd\u53d6\u5230r + 1\u7684\u60c5\u51b5\uff0c\u9700\u8981\u5c06\u4e00\u5f00\u59cb\u7684r\u7684\u503c\u53d6\u4e3anums.size()\uff0c\u800c\u6a21\u677f\u4e00\u4e0d\u7528\u52a0\u662f\u5e94\u4e3a\u6700\u540e\u8fd4\u56de\u7684l = r + 1\uff0c\u4e0d\u9700\u8981\u8003\u8651\u8fd9\u4e2a\u95ee\u9898 \u4f8b\u5b50\uff1a https://leetcode-cn.com/problems/search-insert-position/ \u6bd4\u5982\u8bf4\u8fd9\u4e00\u9898\uff0c\u5728\u7528\u7b2c\u4e8c\u4e2a\u6a21\u677f\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06 r \u521d\u59cb\u5316\u4e3a nums.size()\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3a\u4e3anums.size() -1 \u5c31\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3a\u8fd9\u4e00\u9898\u6709\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u5c31\u662f\u5728\u6700\u540e\u4f4d\u7f6e\u63d2\u5165\uff0c\u800c\u6700\u540e\u4f4d\u7f6e\u5c31\u662f r + 1 \u6a21\u677f\u4e00\u7684\u4ee3\u7801\u5982\u4e0b \u00b6 class Solution { public : int searchInsert ( vector < int >& nums , int target ) { int l = 0 , r = nums . size () - 1 ; while ( l <= r ){ int mid = ( l + r ) >> 1 ; if ( nums [ mid ] == target ) return mid ; else if ( nums [ mid ] > target ) r = mid - 1 ; else l = mid + 1 ; } return l ; } }; \u6a21\u677f\u4e8c\u7684\u4ee3\u7801\u5982\u4e0b \u00b6 class Solution { public : int searchInsert ( vector < int >& nums , int target ) { int l = 0 , r = nums . size (); while ( l < r ){ int mid = ( l + r ) >> 1 ; if ( nums [ mid ] >= target ) r = mid ; else l = mid + 1 ; } return l ; } }; \u6ce8\u610f\u4e8b\u9879 \u00b6 \u4e24\u4e2a\u6a21\u677f\u5730 \u533a\u522b : \u6ce8\u610f r \u7684\u521d\u59cb\u5316\u6761\u4ef6 \uff0c\u4e00\u822c\u800c\u8a00\u90fd\u662f nums.size() - 1\uff0c\u4f46\u662f\u5982\u679c\u8981\u8003\u8651\u6700\u540e\u4e00\u4e2a\u63d2\u5165\u4f4d\u7f6e\u7684\u8bdd\uff0c\u5bf9\u4e8e\u6a21\u677f\u4e8c\u9700\u8981\u6539\u4e3a nums.size() while\u5faa\u73af\u7684\u63a7\u5236\u6761\u4ef6\uff0c\u6a21\u677f\u4e00\u4e3a l <= r \uff0c\u6a21\u677f\u4e8c\u4e3a l < r \u6a21\u677f\u4e00\u4e2d\u5c06\u4e09\u79cd\u60c5\u51b5\u5206\u5f00\u8ba8\u8bba\uff1b \u6a21\u677f\u4e8c\u5c06 == \u7684\u60c5\u51b5\u5408\u5e76\uff0c\u5bf9\u4e8e\u4e0a\u9762\u8fd9\u79cd\u5982\u679c\u5199\u4e3a nums[mid] >= target \uff0c\u90a3\u4e48\u5c31\u5fc5\u987b\u5199\u6210 r = mid \uff0c l = mid + 1 \u6a21\u677f\u4e00\u5728\u5faa\u73af\u9000\u51fa\u7684\u65f6\u5019\uff0c l = r + 1 \uff1b\u6a21\u677f\u4e8c\u5faa\u73af\u9000\u51fa\u7684\u65f6\u5019\u4e3a l == r \u4f8b\u9898\uff1a \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e \uff1a https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array","title":"\u4e8c\u5206\u6cd5"},{"location":"%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_1","text":"\u5bf9\u4e8e\u4e8c\u5206\u6cd5\u975e\u5e38\u5bb9\u6613\u51fa\u95ee\u9898\u7684\u5c31\u662f\u67e5\u627e\u7684\u8fb9\u754c\u95ee\u9898 \u4e0b\u9762\u662f\u4e24\u4e2a\u5e38\u7528\u7684\u6a21\u677f\u6846\u67b6\uff1a","title":"\u4e8c\u5206\u6cd5"},{"location":"%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_2","text":"int l = 0 ; int r = nums . size () - 1 ; while ( l <= r ) { int mid = ( l + r ) >> 1 if ( nums [ mid ] == target ) return \u5408\u9002\u7684\u503c if ( nums [ mid ] < target ) l = mid + 1 if ( nums [ mid ] > target ]) r = mid - 1 } // \u770b\u5177\u4f53\u9898\u610f\uff0c\u6b64\u65f6 l == r + 1 return l","title":"\u6846\u67b6\u4e00"},{"location":"%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_3","text":"\u8fd9\u4e2a\u6846\u67b6\u4e3b\u8981\u662f\u6839\u636e\u7406\u89e3\u6765\u5199 int l = 0 ; int r = nums . size () - 1 ; while ( l < r ){ int mid = ( l + r ) >> 1 ; if ( nums [ mid ] <= target ) r = mid ; else l = mid + 1 ; } //\u6b64\u65f6 l == r return l ; \u6ce8\u610f\uff0c\u8fd9\u4e2a\u6846\u67b6\u4e0b\uff0c\u6700\u540e\u8fd4\u56de\u7684l == r\uff0c\u5982\u679c\u9047\u5230\u8fd4\u56de\u7684\u7ed3\u679c\u53ef\u80fd\u53d6\u5230r + 1\u7684\u60c5\u51b5\uff0c\u9700\u8981\u5c06\u4e00\u5f00\u59cb\u7684r\u7684\u503c\u53d6\u4e3anums.size()\uff0c\u800c\u6a21\u677f\u4e00\u4e0d\u7528\u52a0\u662f\u5e94\u4e3a\u6700\u540e\u8fd4\u56de\u7684l = r + 1\uff0c\u4e0d\u9700\u8981\u8003\u8651\u8fd9\u4e2a\u95ee\u9898 \u4f8b\u5b50\uff1a https://leetcode-cn.com/problems/search-insert-position/ \u6bd4\u5982\u8bf4\u8fd9\u4e00\u9898\uff0c\u5728\u7528\u7b2c\u4e8c\u4e2a\u6a21\u677f\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06 r \u521d\u59cb\u5316\u4e3a nums.size()\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3a\u4e3anums.size() -1 \u5c31\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3a\u8fd9\u4e00\u9898\u6709\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u5c31\u662f\u5728\u6700\u540e\u4f4d\u7f6e\u63d2\u5165\uff0c\u800c\u6700\u540e\u4f4d\u7f6e\u5c31\u662f r + 1","title":"\u6846\u67b6\u4e8c"},{"location":"%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_4","text":"class Solution { public : int searchInsert ( vector < int >& nums , int target ) { int l = 0 , r = nums . size () - 1 ; while ( l <= r ){ int mid = ( l + r ) >> 1 ; if ( nums [ mid ] == target ) return mid ; else if ( nums [ mid ] > target ) r = mid - 1 ; else l = mid + 1 ; } return l ; } };","title":"\u6a21\u677f\u4e00\u7684\u4ee3\u7801\u5982\u4e0b"},{"location":"%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_5","text":"class Solution { public : int searchInsert ( vector < int >& nums , int target ) { int l = 0 , r = nums . size (); while ( l < r ){ int mid = ( l + r ) >> 1 ; if ( nums [ mid ] >= target ) r = mid ; else l = mid + 1 ; } return l ; } };","title":"\u6a21\u677f\u4e8c\u7684\u4ee3\u7801\u5982\u4e0b"},{"location":"%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_6","text":"\u4e24\u4e2a\u6a21\u677f\u5730 \u533a\u522b : \u6ce8\u610f r \u7684\u521d\u59cb\u5316\u6761\u4ef6 \uff0c\u4e00\u822c\u800c\u8a00\u90fd\u662f nums.size() - 1\uff0c\u4f46\u662f\u5982\u679c\u8981\u8003\u8651\u6700\u540e\u4e00\u4e2a\u63d2\u5165\u4f4d\u7f6e\u7684\u8bdd\uff0c\u5bf9\u4e8e\u6a21\u677f\u4e8c\u9700\u8981\u6539\u4e3a nums.size() while\u5faa\u73af\u7684\u63a7\u5236\u6761\u4ef6\uff0c\u6a21\u677f\u4e00\u4e3a l <= r \uff0c\u6a21\u677f\u4e8c\u4e3a l < r \u6a21\u677f\u4e00\u4e2d\u5c06\u4e09\u79cd\u60c5\u51b5\u5206\u5f00\u8ba8\u8bba\uff1b \u6a21\u677f\u4e8c\u5c06 == \u7684\u60c5\u51b5\u5408\u5e76\uff0c\u5bf9\u4e8e\u4e0a\u9762\u8fd9\u79cd\u5982\u679c\u5199\u4e3a nums[mid] >= target \uff0c\u90a3\u4e48\u5c31\u5fc5\u987b\u5199\u6210 r = mid \uff0c l = mid + 1 \u6a21\u677f\u4e00\u5728\u5faa\u73af\u9000\u51fa\u7684\u65f6\u5019\uff0c l = r + 1 \uff1b\u6a21\u677f\u4e8c\u5faa\u73af\u9000\u51fa\u7684\u65f6\u5019\u4e3a l == r \u4f8b\u9898\uff1a \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e \uff1a https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E7%B3%BB%E5%88%97_4%E7%A7%8D/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u5bf9\u4e8c\u53c9\u6811\u8fdb\u884c \u524d\u4e2d\u540e\u5c42 \u5e8f\u904d\u5386\uff0c\u5206\u522b \u9012\u5f52 \u4e0e \u975e\u9012\u5f52 \u904d\u5386 \u9898\u76ee\u94fe\u63a5 \u00b6 leetcode 144 https://leetcode-cn.com/problems/binary-tree-preorder-traversal/ leetcode94 https://leetcode-cn.com/problems/binary-tree-inorder-traversal/ leetcode145 https://leetcode-cn.com/problems/binary-tree-postorder-traversal/ leetcode102 https://leetcode-cn.com/problems/binary-tree-level-order-traversal/ \u601d\u8def \u00b6 \u9012\u5f52\u904d\u5386 \u4e09\u79cd\u904d\u5386\u7684\u552f\u4e00\u533a\u522b\u5c31\u662f\u5bf9 \u6839\u8282\u70b9\u7684\u64cd\u4f5c \u548c \u9012\u5f52\u64cd\u4f5c\u5de6\u53f3\u5b50\u6811 \u7684\u987a\u5e8f\u4e0d\u4e00\u6837 \u8fed\u4ee3\u904d\u5386\uff08\u91cd\u8981\uff09 \u8fed\u4ee3\u904d\u5386\u5199\u7684\u6bd4\u8f83\u5c11\uff0c\u9700\u8981\u91cd\u70b9\u5173\u6ce8\uff0c\u5728\u9762\u8bd5\u9898\u4e2d\u7ecf\u5e38\u51fa\u73b0\u3002\u5bf9\u4e8e\u524d\u4e2d\u540e\u5e8f\u904d\u5386\uff0c\u901a\u5e38\u91c7\u7528 \u6808 \uff1b\u5bf9\u4e8e\u5c42\u6b21\u904d\u5386\u91c7\u7528 \u961f\u5217 \u9012\u5f52\u4ee3\u7801 \u00b6 \u524d\u5e8f\u904d\u5386\u2014\u2014\u6839\u5de6\u53f3 class Solution { public : void pre ( TreeNode * root , vector < int >& res ){ if ( root == nullptr ) return ; res . push_back ( root -> val ); //\u6839 pre ( root -> left , res ); //\u5de6 pre ( root -> right , res ); //\u53f3 } vector < int > preorderTraversal ( TreeNode * root ) { vector < int > res ; pre ( root , res ); return res ; } }; \u4e2d\u5e8f\u904d\u5386\u2014\u2014\u5de6\u6839\u53f3 public : void mid_order ( TreeNode * root , vector < int >& res ){ if ( root == nullptr ) return ; mid_order ( root -> left , res ); //\u5de6 res . push_back ( root -> val ); //\u6839 mid_order ( root -> right , res ); //\u53f3 } vector < int > inorderTraversal ( TreeNode * root ) { vector < int > res ; mid_order ( root , res ); return res ; } }; \u540e\u5e8f\u904d\u5386\u2014\u2014\u5de6\u53f3\u6839 public : void post_order ( TreeNode * root , vector < int >& res ){ if ( root == nullptr ) return ; post_order ( root -> left , res ); //\u5de6 post_order ( root -> right , res ); //\u53f3 res . push_back ( root -> val ); //\u6839 } vector < int > postorderTraversal ( TreeNode * root ) { vector < int > res ; post_order ( root , res ); return res ; } }; \u5c42\u5e8f\u904d\u5386 \u91c7\u7528 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 \uff0c\u4ece\u4ece\u4e0a\u5f80\u4e0b\u8fdb\u884c\u641c\u7d22\uff0c\u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf dep \u7528\u6765\u8bb0\u5f55\u5f53\u524d\u904d\u5386\u7684\u6df1\u5ea6\uff0c\u5982\u679c\u5f53\u524d\u904d\u5386\u7684\u6df1\u5ea6\u5927\u4e8e\u5f53\u524d\u5df2\u7ecf\u904d\u5386\u7684\u6df1\u5ea6\uff0c\u90a3\u4e48\u5c31\u521b\u5efa\u4e00\u4e2avector\u6570\u7ec4\uff0c\u7528\u6765\u8bb0\u5f55\u5f53\u524d\u5c42\u7684\u6570 class Solution { public : vector < vector < int >> res ; void DFS ( TreeNode * root , int dep ){ if ( ! root ) return ; if ( dep >= res . size ()) { res . push_back ( vector < int > ()); } res [ dep ]. push_back ( root -> val ); DFS ( root -> left , dep + 1 ); DFS ( root -> right , dep + 1 ); } vector < vector < int >> levelOrder ( TreeNode * root ) { DFS ( root , 0 ); return res ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u56e0\u4e3a\u662f\u9012\u5f52\u7684\u904d\u5386\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(log N)\uff0c\u5373\u6811\u7684\u9ad8\u5ea6 \u8fed\u4ee3\u4ee3\u7801 \u00b6 \u524d\u5e8f\u904d\u5386 \u4f7f\u7528 \u8f85\u52a9\u6808 \u8fdb\u884c\u5b58\u50a8\uff0c\u524d\u5e8f\u904d\u5386\u662f \u6839\u5de6\u53f3 \u7684\u904d\u5386\u65b9\u5f0f\uff0c\u6240\u4ee5\uff0c\u5165\u6808\u7684\u65f6\u5019\u662f\u53cd\u8fc7\u6765\u7684\uff0c\u5373 \u53f3\u5de6 \u5165\u6808\uff1b class Solution { public : vector < int > preorderTraversal ( TreeNode * root ) { vector < int > res ; if ( ! root ) return res ; stack < TreeNode *> stk ; TreeNode * temp = root ; stk . push ( root ); //\u6839\u5165\u6808 while ( ! stk . empty ()){ temp = stk . top (); //\u53d6\u51fa\u6839 stk . pop (); res . push_back ( temp -> val ); if ( temp -> right ) stk . push ( temp -> right ); //\u53f3 if ( temp -> left ) stk . push ( temp -> left ); } return res ; } }; \u4e2d\u5e8f\u904d\u5386 \u4f7f\u7528 \u8f85\u52a9\u6808 \u8fdb\u884c\u5b58\u50a8\uff0c\u4e2d\u5e8f\u904d\u5386\u662f \u5de6\u6839\u53f3 \uff0c\u6240\u4ee5\u904d\u5386\u7684\u65f6\u5019\uff0c\u5148\u5c06\u6839\u8282\u70b9\u5165\u6808\uff0c\u5c06\u6839\u8282\u70b9\u7684\u5de6\u8282\u70b9\u5165\u6808\uff0c\u7136\u540e\u5c06\u5de6\u8282\u70b9\u7684\u5de6\u8282\u70b9\u5165\u6808.........\u6700\u7ec8\u5c06\u6240\u6709\u7684\u6700\u5de6\u8fb9\u7684\u8282\u70b9\u90fd\u5165\u6808\u3002\u7136\u540e\u4f9d\u6b21\u5f39\u51fa\uff0c \u5148\u5f39\u51fa\u7684\u662f\u6700\u5de6\u8fb9\u7684\u8282\u70b9 ,\u7136\u540e \u5224\u65ad\u8be5\u8282\u70b9\u662f\u5426\u6709\u53f3\u8282\u70b9 \uff0c\u5982\u679c\u6709\u90a3\u4e48\u5c31 \u904d\u5386\u8fd9\u4e2a\u8282\u70b9\u7684\u53f3\u5b50\u6811 \uff0c\u518d\u8fdb\u5165while\u5faa\u73af class Solution { public : vector < int > inorderTraversal ( TreeNode * root ) { vector < int > res ; if ( ! root ) return res ; stack < TreeNode *> stk ; TreeNode * temp = root ; //\u6ce8\u610f\u8fd9\u91cc\u5fc5\u987b\u8981\u52a0temp\u7684\u5224\u65ad\u6761\u4ef6\uff0c\u56e0\u4e3a\u904d\u5386\u5b8c\u5de6\u5b50\u6811(\u5305\u62ec\u6839\u8282\u70b9)\u4e4b\u540e\uff0c\u6b64\u65f6\u6808\u4e3a\u7a7a\uff0c\u800ctemp\u6b64\u65f6\u53ef\u80fd\u662f\u6307\u5411\u4e86\u6839\u8282\u70b9\u7684\u53f3\u5b69\u5b50\uff0c\u6b64\u65f6\u8fd8\u9700\u8981\u8fdb\u5165\u5bfb\u5faa\u73af\u7684 while ( ! stk . empty () || temp ){ while ( temp ){ stk . push ( temp ); temp = temp -> left ; } TreeNode * node = stk . top (); stk . pop (); res . push_back ( node -> val ); if ( node -> right ){ temp = node -> right ; } } return res ; } }; \u540e\u5e8f\u904d\u5386 \u91c7\u7528 \u8f85\u52a9\u6808 \u8fdb\u884c\u5b58\u50a8\uff0c\u540e\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u4e3a \u5de6\u53f3\u6839 \uff0c\u6240\u4ee5\u5bf9\u4e8e\u6808\u6765\u8bb2\uff0c\u6211\u4eec\u80af\u5b9a\u8981\u5f97\u5230\u4e00\u4e2a \u6839\u53f3\u5de6 \u7684\u987a\u5e8f\uff0c\u518d\u8f93\u51fa\u624d\u80fd\u6ee1\u8db3\uff0c\u6240\u4ee5\u8fd9\u91cc\u91c7\u7528 \u4e24\u4e2a\u6808 \u7b2c\u4e00\u4e2a\u6808 stk1 \u7684\u5165\u6808\u987a\u5e8f\u4e3a \u6839\u5de6\u53f3 \uff0c\u4e5f\u5c31\u662f\u538b\u6808\u7684\u65f6\u5019\u5148\u538b\u5165\u5de6\u5b50\u6811\uff0c\u518d\u538b\u5165\u53f3\u5b50\u6811\uff1b\u7136\u540e\u4ee5 \u6839\u53f3\u5de6 \u7684\u987a\u5e8f\u8f93\u5165\u5230\u7b2c\u4e8c\u4e2a\u6808 stk2 \uff0c\u518d\u5229\u7528\u6808\u7684\u5148\u8fdb\u540e\u51fa\u7684\u7279\u70b9\uff0c\u8f93\u51fa\u6808 stk2 \u4e2d\u5143\u7d20\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u987a\u5e8f\u5c31\u662f \u5de6\u53f3\u6839 class Solution { public : vector < int > postorderTraversal ( TreeNode * root ) { vector < int > res ; stack < TreeNode *> stk1 ; stack < TreeNode *> stk2 ; if ( ! root ) return res ; TreeNode * temp = root ; stk1 . push ( root ); while ( ! stk1 . empty ()){ temp = stk1 . top (); stk1 . pop (); //\u4ee5\u6839\u53f3\u5de6\u7684\u987a\u5e8f\u8f93\u5165\u5230stk2(\u5373\u4ee5\u6839\u5de6\u53f3\u7684\u987a\u5e8f\u5165\u6808stk1) stk2 . push ( temp ); if ( temp -> left ) stk1 . push ( temp -> left ); if ( temp -> right ) stk1 . push ( temp -> right ); } //\u4ee5\u5de6\u53f3\u6839\u7684\u987a\u5e8f\u8f93\u51fa while ( ! stk2 . empty ()) { res . push_back ( stk2 . top () -> val ); stk2 . pop (); } return res ; } }; \u5c42\u5e8f\u904d\u5386 \u91c7\u7528\u8f85\u52a9 \u961f\u5217 \uff0c\u4e00\u5c42\u4e00\u5c42\u904d\u5386\uff0c\u8fd9\u4e2a\u662f\u7531\u6a21\u677f\u7684 \u53ef\u4ee5\u7ed3\u5408 513. \u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c \u6765\u770b\uff0c\u89e3\u6cd5\u5f88\u50cf class Solution { public : vector < vector < int >> levelOrder ( TreeNode * root ) { queue < TreeNode *> q ; vector < vector < int >> res ; if ( ! root ) return res ; TreeNode * temp = root ; q . push ( root ); while ( ! q . empty ()){ int levelSize = q . size (); //\u961f\u5217\u4e2d\u8282\u70b9\u6570\u5373\u4f4d\u6bcf\u4e00\u5c42\u7684\u8282\u70b9\u6570\u76ee res . push_back ( vector < int > ()); for ( int i = 0 ; i < levelSize ; i ++ ){ //\u5c06\u5f53\u524d\u5c42\u7684\u8282\u70b9\u5168\u90e8\u51fa\u961f temp = q . front (); //\u8bb0\u5f55\u961f\u9996\u8282\u70b9 q . pop (); res . back (). push_back ( temp -> val ); //\u7528vector\u8bb0\u5f55\u6bcf\u5c42\u7684\u8282\u70b9 if ( temp -> left ) q . push ( temp -> left ); //\u6bcf\u51fa\u4e00\u4e2a\u5f53\u524d\u5c42\u7684\u8282\u70b9\uff0c\u5c31\u5c06\u5176\u5de6\u53f3\u5b69\u5b50\u8282\u70b9\u5165\u961f if ( temp -> right ) q . push ( temp -> right ); } } return res ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u524d\u4e09\u79cd\u904d\u5386\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(h) \u5c42\u6b21\u904d\u5386\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u56e0\u4e3a\u57fa\u672c\u4e0a\u6bcf\u4e2a\u8282\u70b9\u90fd\u904d\u5386\u4e86\uff0c\u5373\u6bcf\u4e00\u5c42\u7684\u8282\u70b9","title":"\u4e8c\u53c9\u6811\u904d\u5386"},{"location":"%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E7%B3%BB%E5%88%97_4%E7%A7%8D/#_1","text":"\u5bf9\u4e8c\u53c9\u6811\u8fdb\u884c \u524d\u4e2d\u540e\u5c42 \u5e8f\u904d\u5386\uff0c\u5206\u522b \u9012\u5f52 \u4e0e \u975e\u9012\u5f52 \u904d\u5386","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E7%B3%BB%E5%88%97_4%E7%A7%8D/#_2","text":"leetcode 144 https://leetcode-cn.com/problems/binary-tree-preorder-traversal/ leetcode94 https://leetcode-cn.com/problems/binary-tree-inorder-traversal/ leetcode145 https://leetcode-cn.com/problems/binary-tree-postorder-traversal/ leetcode102 https://leetcode-cn.com/problems/binary-tree-level-order-traversal/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E7%B3%BB%E5%88%97_4%E7%A7%8D/#_3","text":"\u9012\u5f52\u904d\u5386 \u4e09\u79cd\u904d\u5386\u7684\u552f\u4e00\u533a\u522b\u5c31\u662f\u5bf9 \u6839\u8282\u70b9\u7684\u64cd\u4f5c \u548c \u9012\u5f52\u64cd\u4f5c\u5de6\u53f3\u5b50\u6811 \u7684\u987a\u5e8f\u4e0d\u4e00\u6837 \u8fed\u4ee3\u904d\u5386\uff08\u91cd\u8981\uff09 \u8fed\u4ee3\u904d\u5386\u5199\u7684\u6bd4\u8f83\u5c11\uff0c\u9700\u8981\u91cd\u70b9\u5173\u6ce8\uff0c\u5728\u9762\u8bd5\u9898\u4e2d\u7ecf\u5e38\u51fa\u73b0\u3002\u5bf9\u4e8e\u524d\u4e2d\u540e\u5e8f\u904d\u5386\uff0c\u901a\u5e38\u91c7\u7528 \u6808 \uff1b\u5bf9\u4e8e\u5c42\u6b21\u904d\u5386\u91c7\u7528 \u961f\u5217","title":"\u601d\u8def"},{"location":"%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E7%B3%BB%E5%88%97_4%E7%A7%8D/#_4","text":"\u524d\u5e8f\u904d\u5386\u2014\u2014\u6839\u5de6\u53f3 class Solution { public : void pre ( TreeNode * root , vector < int >& res ){ if ( root == nullptr ) return ; res . push_back ( root -> val ); //\u6839 pre ( root -> left , res ); //\u5de6 pre ( root -> right , res ); //\u53f3 } vector < int > preorderTraversal ( TreeNode * root ) { vector < int > res ; pre ( root , res ); return res ; } }; \u4e2d\u5e8f\u904d\u5386\u2014\u2014\u5de6\u6839\u53f3 public : void mid_order ( TreeNode * root , vector < int >& res ){ if ( root == nullptr ) return ; mid_order ( root -> left , res ); //\u5de6 res . push_back ( root -> val ); //\u6839 mid_order ( root -> right , res ); //\u53f3 } vector < int > inorderTraversal ( TreeNode * root ) { vector < int > res ; mid_order ( root , res ); return res ; } }; \u540e\u5e8f\u904d\u5386\u2014\u2014\u5de6\u53f3\u6839 public : void post_order ( TreeNode * root , vector < int >& res ){ if ( root == nullptr ) return ; post_order ( root -> left , res ); //\u5de6 post_order ( root -> right , res ); //\u53f3 res . push_back ( root -> val ); //\u6839 } vector < int > postorderTraversal ( TreeNode * root ) { vector < int > res ; post_order ( root , res ); return res ; } }; \u5c42\u5e8f\u904d\u5386 \u91c7\u7528 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 \uff0c\u4ece\u4ece\u4e0a\u5f80\u4e0b\u8fdb\u884c\u641c\u7d22\uff0c\u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf dep \u7528\u6765\u8bb0\u5f55\u5f53\u524d\u904d\u5386\u7684\u6df1\u5ea6\uff0c\u5982\u679c\u5f53\u524d\u904d\u5386\u7684\u6df1\u5ea6\u5927\u4e8e\u5f53\u524d\u5df2\u7ecf\u904d\u5386\u7684\u6df1\u5ea6\uff0c\u90a3\u4e48\u5c31\u521b\u5efa\u4e00\u4e2avector\u6570\u7ec4\uff0c\u7528\u6765\u8bb0\u5f55\u5f53\u524d\u5c42\u7684\u6570 class Solution { public : vector < vector < int >> res ; void DFS ( TreeNode * root , int dep ){ if ( ! root ) return ; if ( dep >= res . size ()) { res . push_back ( vector < int > ()); } res [ dep ]. push_back ( root -> val ); DFS ( root -> left , dep + 1 ); DFS ( root -> right , dep + 1 ); } vector < vector < int >> levelOrder ( TreeNode * root ) { DFS ( root , 0 ); return res ; } };","title":"\u9012\u5f52\u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E7%B3%BB%E5%88%97_4%E7%A7%8D/#_5","text":"\u56e0\u4e3a\u662f\u9012\u5f52\u7684\u904d\u5386\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(log N)\uff0c\u5373\u6811\u7684\u9ad8\u5ea6","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E7%B3%BB%E5%88%97_4%E7%A7%8D/#_6","text":"\u524d\u5e8f\u904d\u5386 \u4f7f\u7528 \u8f85\u52a9\u6808 \u8fdb\u884c\u5b58\u50a8\uff0c\u524d\u5e8f\u904d\u5386\u662f \u6839\u5de6\u53f3 \u7684\u904d\u5386\u65b9\u5f0f\uff0c\u6240\u4ee5\uff0c\u5165\u6808\u7684\u65f6\u5019\u662f\u53cd\u8fc7\u6765\u7684\uff0c\u5373 \u53f3\u5de6 \u5165\u6808\uff1b class Solution { public : vector < int > preorderTraversal ( TreeNode * root ) { vector < int > res ; if ( ! root ) return res ; stack < TreeNode *> stk ; TreeNode * temp = root ; stk . push ( root ); //\u6839\u5165\u6808 while ( ! stk . empty ()){ temp = stk . top (); //\u53d6\u51fa\u6839 stk . pop (); res . push_back ( temp -> val ); if ( temp -> right ) stk . push ( temp -> right ); //\u53f3 if ( temp -> left ) stk . push ( temp -> left ); } return res ; } }; \u4e2d\u5e8f\u904d\u5386 \u4f7f\u7528 \u8f85\u52a9\u6808 \u8fdb\u884c\u5b58\u50a8\uff0c\u4e2d\u5e8f\u904d\u5386\u662f \u5de6\u6839\u53f3 \uff0c\u6240\u4ee5\u904d\u5386\u7684\u65f6\u5019\uff0c\u5148\u5c06\u6839\u8282\u70b9\u5165\u6808\uff0c\u5c06\u6839\u8282\u70b9\u7684\u5de6\u8282\u70b9\u5165\u6808\uff0c\u7136\u540e\u5c06\u5de6\u8282\u70b9\u7684\u5de6\u8282\u70b9\u5165\u6808.........\u6700\u7ec8\u5c06\u6240\u6709\u7684\u6700\u5de6\u8fb9\u7684\u8282\u70b9\u90fd\u5165\u6808\u3002\u7136\u540e\u4f9d\u6b21\u5f39\u51fa\uff0c \u5148\u5f39\u51fa\u7684\u662f\u6700\u5de6\u8fb9\u7684\u8282\u70b9 ,\u7136\u540e \u5224\u65ad\u8be5\u8282\u70b9\u662f\u5426\u6709\u53f3\u8282\u70b9 \uff0c\u5982\u679c\u6709\u90a3\u4e48\u5c31 \u904d\u5386\u8fd9\u4e2a\u8282\u70b9\u7684\u53f3\u5b50\u6811 \uff0c\u518d\u8fdb\u5165while\u5faa\u73af class Solution { public : vector < int > inorderTraversal ( TreeNode * root ) { vector < int > res ; if ( ! root ) return res ; stack < TreeNode *> stk ; TreeNode * temp = root ; //\u6ce8\u610f\u8fd9\u91cc\u5fc5\u987b\u8981\u52a0temp\u7684\u5224\u65ad\u6761\u4ef6\uff0c\u56e0\u4e3a\u904d\u5386\u5b8c\u5de6\u5b50\u6811(\u5305\u62ec\u6839\u8282\u70b9)\u4e4b\u540e\uff0c\u6b64\u65f6\u6808\u4e3a\u7a7a\uff0c\u800ctemp\u6b64\u65f6\u53ef\u80fd\u662f\u6307\u5411\u4e86\u6839\u8282\u70b9\u7684\u53f3\u5b69\u5b50\uff0c\u6b64\u65f6\u8fd8\u9700\u8981\u8fdb\u5165\u5bfb\u5faa\u73af\u7684 while ( ! stk . empty () || temp ){ while ( temp ){ stk . push ( temp ); temp = temp -> left ; } TreeNode * node = stk . top (); stk . pop (); res . push_back ( node -> val ); if ( node -> right ){ temp = node -> right ; } } return res ; } }; \u540e\u5e8f\u904d\u5386 \u91c7\u7528 \u8f85\u52a9\u6808 \u8fdb\u884c\u5b58\u50a8\uff0c\u540e\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u4e3a \u5de6\u53f3\u6839 \uff0c\u6240\u4ee5\u5bf9\u4e8e\u6808\u6765\u8bb2\uff0c\u6211\u4eec\u80af\u5b9a\u8981\u5f97\u5230\u4e00\u4e2a \u6839\u53f3\u5de6 \u7684\u987a\u5e8f\uff0c\u518d\u8f93\u51fa\u624d\u80fd\u6ee1\u8db3\uff0c\u6240\u4ee5\u8fd9\u91cc\u91c7\u7528 \u4e24\u4e2a\u6808 \u7b2c\u4e00\u4e2a\u6808 stk1 \u7684\u5165\u6808\u987a\u5e8f\u4e3a \u6839\u5de6\u53f3 \uff0c\u4e5f\u5c31\u662f\u538b\u6808\u7684\u65f6\u5019\u5148\u538b\u5165\u5de6\u5b50\u6811\uff0c\u518d\u538b\u5165\u53f3\u5b50\u6811\uff1b\u7136\u540e\u4ee5 \u6839\u53f3\u5de6 \u7684\u987a\u5e8f\u8f93\u5165\u5230\u7b2c\u4e8c\u4e2a\u6808 stk2 \uff0c\u518d\u5229\u7528\u6808\u7684\u5148\u8fdb\u540e\u51fa\u7684\u7279\u70b9\uff0c\u8f93\u51fa\u6808 stk2 \u4e2d\u5143\u7d20\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u987a\u5e8f\u5c31\u662f \u5de6\u53f3\u6839 class Solution { public : vector < int > postorderTraversal ( TreeNode * root ) { vector < int > res ; stack < TreeNode *> stk1 ; stack < TreeNode *> stk2 ; if ( ! root ) return res ; TreeNode * temp = root ; stk1 . push ( root ); while ( ! stk1 . empty ()){ temp = stk1 . top (); stk1 . pop (); //\u4ee5\u6839\u53f3\u5de6\u7684\u987a\u5e8f\u8f93\u5165\u5230stk2(\u5373\u4ee5\u6839\u5de6\u53f3\u7684\u987a\u5e8f\u5165\u6808stk1) stk2 . push ( temp ); if ( temp -> left ) stk1 . push ( temp -> left ); if ( temp -> right ) stk1 . push ( temp -> right ); } //\u4ee5\u5de6\u53f3\u6839\u7684\u987a\u5e8f\u8f93\u51fa while ( ! stk2 . empty ()) { res . push_back ( stk2 . top () -> val ); stk2 . pop (); } return res ; } }; \u5c42\u5e8f\u904d\u5386 \u91c7\u7528\u8f85\u52a9 \u961f\u5217 \uff0c\u4e00\u5c42\u4e00\u5c42\u904d\u5386\uff0c\u8fd9\u4e2a\u662f\u7531\u6a21\u677f\u7684 \u53ef\u4ee5\u7ed3\u5408 513. \u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c \u6765\u770b\uff0c\u89e3\u6cd5\u5f88\u50cf class Solution { public : vector < vector < int >> levelOrder ( TreeNode * root ) { queue < TreeNode *> q ; vector < vector < int >> res ; if ( ! root ) return res ; TreeNode * temp = root ; q . push ( root ); while ( ! q . empty ()){ int levelSize = q . size (); //\u961f\u5217\u4e2d\u8282\u70b9\u6570\u5373\u4f4d\u6bcf\u4e00\u5c42\u7684\u8282\u70b9\u6570\u76ee res . push_back ( vector < int > ()); for ( int i = 0 ; i < levelSize ; i ++ ){ //\u5c06\u5f53\u524d\u5c42\u7684\u8282\u70b9\u5168\u90e8\u51fa\u961f temp = q . front (); //\u8bb0\u5f55\u961f\u9996\u8282\u70b9 q . pop (); res . back (). push_back ( temp -> val ); //\u7528vector\u8bb0\u5f55\u6bcf\u5c42\u7684\u8282\u70b9 if ( temp -> left ) q . push ( temp -> left ); //\u6bcf\u51fa\u4e00\u4e2a\u5f53\u524d\u5c42\u7684\u8282\u70b9\uff0c\u5c31\u5c06\u5176\u5de6\u53f3\u5b69\u5b50\u8282\u70b9\u5165\u961f if ( temp -> right ) q . push ( temp -> right ); } } return res ; } };","title":"\u8fed\u4ee3\u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E7%B3%BB%E5%88%97_4%E7%A7%8D/#_7","text":"\u524d\u4e09\u79cd\u904d\u5386\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(h) \u5c42\u6b21\u904d\u5386\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u56e0\u4e3a\u57fa\u672c\u4e0a\u6bcf\u4e2a\u8282\u70b9\u90fd\u904d\u5386\u4e86\uff0c\u5373\u6bcf\u4e00\u5c42\u7684\u8282\u70b9","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/%E9%80%92%E5%BD%92%E7%9A%84%E5%86%99%E6%B3%95/","text":"\u6240\u6709\u7684\u6811\u7684\u95ee\u9898\uff0c\u90fd\u53ef\u4ee5\u8f6c\u5316\u4e3a\u9012\u5f52\u6765\u89e3\u51b3 \u00b6 \u9012\u5f52\u7684\u6b65\u9aa4\uff1a\uff08\u4ea7\u54c1\u7ecf\u7406\u6cd5\uff09 \u786e\u5b9a\u9012\u5f52\u7684\u8fb9\u754c \u786e\u5b9a\u9012\u5f52\u8981\u5e72\u7684\u4e8b\u60c5 \u9012\u5f52\u7684\u8fd4\u56de\u503c \u9012\u5f52\u7684\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u70b9\u5c31\u662f\uff1a \u4e0d\u53bb\u7ba1\u51fd\u6570\u7684\u5185\u90e8\u7ec6\u8282\u662f\u5982\u4f55\u5904\u7406\u7684\uff0c\u6211\u4eec\u53ea\u770b\u5176\u51fd\u6570\u4f5c\u7528\u4ee5\u53ca\u8f93\u5165\u4e0e\u8f93\u51fa \u3002\u3002\u3002\u3002\u672a\u5b8c\u5f85\u7eed","title":"\u9012\u5f52"},{"location":"%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/%E9%80%92%E5%BD%92%E7%9A%84%E5%86%99%E6%B3%95/#_1","text":"\u9012\u5f52\u7684\u6b65\u9aa4\uff1a\uff08\u4ea7\u54c1\u7ecf\u7406\u6cd5\uff09 \u786e\u5b9a\u9012\u5f52\u7684\u8fb9\u754c \u786e\u5b9a\u9012\u5f52\u8981\u5e72\u7684\u4e8b\u60c5 \u9012\u5f52\u7684\u8fd4\u56de\u503c \u9012\u5f52\u7684\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u70b9\u5c31\u662f\uff1a \u4e0d\u53bb\u7ba1\u51fd\u6570\u7684\u5185\u90e8\u7ec6\u8282\u662f\u5982\u4f55\u5904\u7406\u7684\uff0c\u6211\u4eec\u53ea\u770b\u5176\u51fd\u6570\u4f5c\u7528\u4ee5\u53ca\u8f93\u5165\u4e0e\u8f93\u51fa \u3002\u3002\u3002\u3002\u672a\u5b8c\u5f85\u7eed","title":"\u6240\u6709\u7684\u6811\u7684\u95ee\u9898\uff0c\u90fd\u53ef\u4ee5\u8f6c\u5316\u4e3a\u9012\u5f52\u6765\u89e3\u51b3"},{"location":"%E9%93%BE%E8%A1%A8/leetcode109-%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/","text":"\u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/ \u601d\u8def \u00b6 \u5c06\u4e00\u4e2a\u6709\u5e8f\u7684\u94fe\u8868\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5e76\u4e14\u8fd8\u8981\u6c42\uff0c\u8fd9\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u4e3a\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u4e3a\u4e86\u4fdd\u6301\u5e73\u8861\uff0c\u9009\u53d6\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9\u4e3a\u6811\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u9012\u5f52\u64cd\u4f5c\u94fe\u8868\u7684\u5de6\u53f3\u533a\u95f4\u4e3a\u6811\u7684\u5de6\u53f3\u5b50\u6811\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u5173\u952e\u70b9\u5c31\u662f\u5982\u4f55\u5f97\u5230\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9\uff1a\u53ef\u4ee5\u901a\u8fc7\u5feb\u6162\u6307\u9488\u6765\u5f97\u5230\uff0c\u8bbe\u4e00\u4e2a\u5feb\u6307\u9488\uff0c\u4e00\u4e2a\u6162\u6307\u9488\uff0c\u5b83\u4eec\u521d\u59cb\u90fd\u662f\u4ece\u5934\u8282\u70b9\u5f00\u59cb\uff0c\u4f46\u662f\u5feb\u6307\u9488\u4e00\u6b21\u8d70\u4e24\u6b65\uff0c\u6ee1\u6307\u9488\u4e00\u6b21\u8d70\u4e00\u6b65\uff0c\u6700\u7ec8\u7b49\u5230\u5feb\u6307\u9488\u8d70\u5230\u5e95\u7684\u65f6\u5019\uff0c\u6ee1\u6307\u9488\u6240\u6307\u5411\u7684\u5c31\u662f\u94fe\u8868\u4e2d\u95f4\u8282\u70b9\u3002\u7136\u540e\u4ee5\u4e2d\u95f4\u8282\u70b9\u4e3a\u754c\uff0c\u5212\u5206\u9664\u5de6\u53f3\u533a\u95f4\uff0c\u518d\u9012\u5f52\u89e3\u51b3\u3002 \u4ee3\u7801 \u00b6 class Solution { public : TreeNode * sortedListToBST ( ListNode * head ) { if ( head == nullptr ) return nullptr ; //\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd4\u56de\u5176\u503c if ( head -> next == nullptr ) return new TreeNode ( head -> val ); //\u5bfb\u627e\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9(\u5feb\u6162\u6307\u9488) ListNode * slow = head , * fast = head , * preslow = nullptr ; while ( fast != nullptr && fast -> next != nullptr ){ preslow = slow ; slow = slow -> next ; fast = fast -> next -> next ; } //\u5f53\u5feb\u6307\u9488\u8d70\u5230\u5934\u65f6\uff0c\u6b64\u65f6\u6162\u6307\u9488\u5c31\u662f\u4e2d\u95f4\u8282\u70b9,\u6b64\u65f6\u5c31\u5c06\u4e2d\u70b9\u7684\u5de6\u53f3\u4e24\u8fb9\u65ad\u5f00 preslow -> next = nullptr ; TreeNode * root = new TreeNode ( slow -> val ); //\u521b\u5efa\u6811\u7684\u6839\u8282\u70b9\uff0c\u5373\u4e3a\u4e2d\u95f4\u8282\u70b9\u503c root -> left = sortedListToBST ( head ); root -> right = sortedListToBST ( slow -> next ); return root ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logn)","title":"leetcode109-\u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811"},{"location":"%E9%93%BE%E8%A1%A8/leetcode109-%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/#_1","text":"https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E9%93%BE%E8%A1%A8/leetcode109-%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/#_2","text":"\u5c06\u4e00\u4e2a\u6709\u5e8f\u7684\u94fe\u8868\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5e76\u4e14\u8fd8\u8981\u6c42\uff0c\u8fd9\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u4e3a\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u4e3a\u4e86\u4fdd\u6301\u5e73\u8861\uff0c\u9009\u53d6\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9\u4e3a\u6811\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u9012\u5f52\u64cd\u4f5c\u94fe\u8868\u7684\u5de6\u53f3\u533a\u95f4\u4e3a\u6811\u7684\u5de6\u53f3\u5b50\u6811\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u5173\u952e\u70b9\u5c31\u662f\u5982\u4f55\u5f97\u5230\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9\uff1a\u53ef\u4ee5\u901a\u8fc7\u5feb\u6162\u6307\u9488\u6765\u5f97\u5230\uff0c\u8bbe\u4e00\u4e2a\u5feb\u6307\u9488\uff0c\u4e00\u4e2a\u6162\u6307\u9488\uff0c\u5b83\u4eec\u521d\u59cb\u90fd\u662f\u4ece\u5934\u8282\u70b9\u5f00\u59cb\uff0c\u4f46\u662f\u5feb\u6307\u9488\u4e00\u6b21\u8d70\u4e24\u6b65\uff0c\u6ee1\u6307\u9488\u4e00\u6b21\u8d70\u4e00\u6b65\uff0c\u6700\u7ec8\u7b49\u5230\u5feb\u6307\u9488\u8d70\u5230\u5e95\u7684\u65f6\u5019\uff0c\u6ee1\u6307\u9488\u6240\u6307\u5411\u7684\u5c31\u662f\u94fe\u8868\u4e2d\u95f4\u8282\u70b9\u3002\u7136\u540e\u4ee5\u4e2d\u95f4\u8282\u70b9\u4e3a\u754c\uff0c\u5212\u5206\u9664\u5de6\u53f3\u533a\u95f4\uff0c\u518d\u9012\u5f52\u89e3\u51b3\u3002","title":"\u601d\u8def"},{"location":"%E9%93%BE%E8%A1%A8/leetcode109-%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/#_3","text":"class Solution { public : TreeNode * sortedListToBST ( ListNode * head ) { if ( head == nullptr ) return nullptr ; //\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd4\u56de\u5176\u503c if ( head -> next == nullptr ) return new TreeNode ( head -> val ); //\u5bfb\u627e\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9(\u5feb\u6162\u6307\u9488) ListNode * slow = head , * fast = head , * preslow = nullptr ; while ( fast != nullptr && fast -> next != nullptr ){ preslow = slow ; slow = slow -> next ; fast = fast -> next -> next ; } //\u5f53\u5feb\u6307\u9488\u8d70\u5230\u5934\u65f6\uff0c\u6b64\u65f6\u6162\u6307\u9488\u5c31\u662f\u4e2d\u95f4\u8282\u70b9,\u6b64\u65f6\u5c31\u5c06\u4e2d\u70b9\u7684\u5de6\u53f3\u4e24\u8fb9\u65ad\u5f00 preslow -> next = nullptr ; TreeNode * root = new TreeNode ( slow -> val ); //\u521b\u5efa\u6811\u7684\u6839\u8282\u70b9\uff0c\u5373\u4e3a\u4e2d\u95f4\u8282\u70b9\u503c root -> left = sortedListToBST ( head ); root -> right = sortedListToBST ( slow -> next ); return root ; } };","title":"\u4ee3\u7801"},{"location":"%E9%93%BE%E8%A1%A8/leetcode109-%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/#_4","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(logn)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E9%93%BE%E8%A1%A8/leetcode142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/","text":"\u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/linked-list-cycle-ii/ \u601d\u8def \u00b6 \u4f7f\u7528\u53cc\u6307\u9488\uff0c\u4e00\u4e2a\u5feb\u6307\u9488\uff0c\u4e00\u4e2a\u6162\u6307\u9488\uff0c\u9700\u8981\u8fdb\u884c\u6570\u5b66\u63a8\u5bfc\u8bc1\u660e\uff0c\u8bb0\u4f4f\u8fd9\u4e2a\u89c4\u5f8b\u5373\u53ef\uff1a\u8bbe\u7f6e\u4e00\u4e2a\u5feb\u6307\u9488\uff0c\u4e00\u4e2a\u6162\u6307\u9488\uff0c\u90fd\u4e00\u5f00\u59cb\u4ece\u94fe\u8868head\u5f00\u59cb\uff0c\u5feb\u6307\u9488\u4e00\u6b21\u8d70\u4e24\u6b65\uff0c\u6162\u6307\u9488\u4e00\u6b21\u8d701\u6b65\uff0c\u5f53\u5b83\u4eec\u7b2c\u4e00\u6b21\u76f8\u9047\u7684\u65f6\u5019\uff0c\u5c06\u5feb\u6307\u9488\u91cd\u65b0\u6307\u5411head\uff0c\u7136\u540e\u548c\u6162\u6307\u9488\u7ee7\u7eed\u4e00\u6b21\u8d70\u4e00\u6b65\uff0c\u5f53\u4ed6\u4eec\u518d\u6b21\u76f8\u9047\u7684\u65f6\u5019\uff0c\u6240\u6307\u5411\u7684\u5373\u4e3a\u73af\u7684\u5165\u53e3\u70b9 \u672c\u9898\u8fd8\u6709\u4e00\u4e2a\u6ce8\u610f\u70b9\u5c31\u662f\u5728\u4e24\u4e2a\u6307\u9488\u79fb\u52a8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8981\u7528\u5feb\u6307\u9488\u6765\u5224\u65ad\u662f\u5426\u6307\u5411\u4e3a\u7a7a\uff0c\u53ea\u8981\u5feb\u6307\u9488\u7684next\u6216\u8005next->next\u6307\u5411\u4e3a\u7a7a\uff0c\u5c31\u8bf4\u660e\u6ca1\u6709\u73af\uff0c\u5373\u9000\u51fa\uff1b\u7528\u5feb\u6307\u9488\u8fdb\u884c\u5224\u65ad\u7684\u539f\u56e0\u5c31\u662f\u5b83\u8d70\u7684\u6bd4\u8f83\u5feb\uff0c\u9002\u5408 \u201c\u63a2\u8def\u201d \uff0c\u800c\u6162\u6307\u9488\u5c31\u4e0d\u884c\uff0c\u56e0\u4e3a\u5b83\u53ea\u80fd\u5224\u65adnext\u662f\u5426\u4e3a\u7a7a\uff0c\u800c\u4e0d\u80fd\u5224\u65adnext->next\u662f\u5426\u4e3a\u7a7a \u4ee3\u7801 \u00b6 class Solution { public : ListNode * detectCycle ( ListNode * head ) { if ( head == nullptr || head -> next == nullptr ) return nullptr ; ListNode * ptr1 = head ; ListNode * ptr2 = head ; do { //ptr2\u5fc5\u987b\u8fdb\u884c\u5224\u65ad\uff0c\u56e0\u4e3a\u5982\u679cptr2\u6307\u5411\u51fa\u73b0\u4e86\u7a7a\uff0c\u6216\u8005\u5b83\u7684\u4e0b\u4e0b\u4e2a\u4e3a\u7a7a\uff0c\u8bf4\u660e\u4e0d\u5b58\u5728\u73af if ( ptr2 -> next != nullptr && ptr2 -> next -> next != nullptr ){ ptr2 = ptr2 -> next -> next ; } else { return nullptr ; } ptr1 = ptr1 -> next ; } while ( ptr1 != ptr2 ); ptr2 = head ; while ( ptr1 != ptr2 ){ ptr2 = ptr2 -> next ; ptr1 = ptr1 -> next ; } return ptr1 ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"leetcode142-\u73af\u5f62\u94fe\u8868II"},{"location":"%E9%93%BE%E8%A1%A8/leetcode142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/#_1","text":"https://leetcode-cn.com/problems/linked-list-cycle-ii/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E9%93%BE%E8%A1%A8/leetcode142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/#_2","text":"\u4f7f\u7528\u53cc\u6307\u9488\uff0c\u4e00\u4e2a\u5feb\u6307\u9488\uff0c\u4e00\u4e2a\u6162\u6307\u9488\uff0c\u9700\u8981\u8fdb\u884c\u6570\u5b66\u63a8\u5bfc\u8bc1\u660e\uff0c\u8bb0\u4f4f\u8fd9\u4e2a\u89c4\u5f8b\u5373\u53ef\uff1a\u8bbe\u7f6e\u4e00\u4e2a\u5feb\u6307\u9488\uff0c\u4e00\u4e2a\u6162\u6307\u9488\uff0c\u90fd\u4e00\u5f00\u59cb\u4ece\u94fe\u8868head\u5f00\u59cb\uff0c\u5feb\u6307\u9488\u4e00\u6b21\u8d70\u4e24\u6b65\uff0c\u6162\u6307\u9488\u4e00\u6b21\u8d701\u6b65\uff0c\u5f53\u5b83\u4eec\u7b2c\u4e00\u6b21\u76f8\u9047\u7684\u65f6\u5019\uff0c\u5c06\u5feb\u6307\u9488\u91cd\u65b0\u6307\u5411head\uff0c\u7136\u540e\u548c\u6162\u6307\u9488\u7ee7\u7eed\u4e00\u6b21\u8d70\u4e00\u6b65\uff0c\u5f53\u4ed6\u4eec\u518d\u6b21\u76f8\u9047\u7684\u65f6\u5019\uff0c\u6240\u6307\u5411\u7684\u5373\u4e3a\u73af\u7684\u5165\u53e3\u70b9 \u672c\u9898\u8fd8\u6709\u4e00\u4e2a\u6ce8\u610f\u70b9\u5c31\u662f\u5728\u4e24\u4e2a\u6307\u9488\u79fb\u52a8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8981\u7528\u5feb\u6307\u9488\u6765\u5224\u65ad\u662f\u5426\u6307\u5411\u4e3a\u7a7a\uff0c\u53ea\u8981\u5feb\u6307\u9488\u7684next\u6216\u8005next->next\u6307\u5411\u4e3a\u7a7a\uff0c\u5c31\u8bf4\u660e\u6ca1\u6709\u73af\uff0c\u5373\u9000\u51fa\uff1b\u7528\u5feb\u6307\u9488\u8fdb\u884c\u5224\u65ad\u7684\u539f\u56e0\u5c31\u662f\u5b83\u8d70\u7684\u6bd4\u8f83\u5feb\uff0c\u9002\u5408 \u201c\u63a2\u8def\u201d \uff0c\u800c\u6162\u6307\u9488\u5c31\u4e0d\u884c\uff0c\u56e0\u4e3a\u5b83\u53ea\u80fd\u5224\u65adnext\u662f\u5426\u4e3a\u7a7a\uff0c\u800c\u4e0d\u80fd\u5224\u65adnext->next\u662f\u5426\u4e3a\u7a7a","title":"\u601d\u8def"},{"location":"%E9%93%BE%E8%A1%A8/leetcode142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/#_3","text":"class Solution { public : ListNode * detectCycle ( ListNode * head ) { if ( head == nullptr || head -> next == nullptr ) return nullptr ; ListNode * ptr1 = head ; ListNode * ptr2 = head ; do { //ptr2\u5fc5\u987b\u8fdb\u884c\u5224\u65ad\uff0c\u56e0\u4e3a\u5982\u679cptr2\u6307\u5411\u51fa\u73b0\u4e86\u7a7a\uff0c\u6216\u8005\u5b83\u7684\u4e0b\u4e0b\u4e2a\u4e3a\u7a7a\uff0c\u8bf4\u660e\u4e0d\u5b58\u5728\u73af if ( ptr2 -> next != nullptr && ptr2 -> next -> next != nullptr ){ ptr2 = ptr2 -> next -> next ; } else { return nullptr ; } ptr1 = ptr1 -> next ; } while ( ptr1 != ptr2 ); ptr2 = head ; while ( ptr1 != ptr2 ){ ptr2 = ptr2 -> next ; ptr1 = ptr1 -> next ; } return ptr1 ; } };","title":"\u4ee3\u7801"},{"location":"%E9%93%BE%E8%A1%A8/leetcode142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/#_4","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E9%93%BE%E8%A1%A8/leetcode160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/","text":"\u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/intersection-of-two-linked-lists/ \u601d\u8def \u00b6 \u5bfb\u627e\u76f8\u4ea4\u7684\u70b9\u3002\u672c\u9898\u7684\u89e3\u6cd5\u975e\u5e38\u5de7\u5999\uff0c\u91c7\u7528\u7684\u53cc\u6307\u9488\uff0c\u5373\u94fe\u8868A\u4e00\u4e2a\u6307\u9488ptr1\u8fdb\u884c\u904d\u5386\uff0c\u94fe\u8868B\u4e00\u4e2a\u6307\u9488ptr2\u8fdb\u884c\u904d\u5386\uff1b \u4e24\u8005\u4e00\u5f00\u59cb\u90fd\u662f\u4ece\u5404\u81ea\u7684\u94fe\u8868\u5934\u90e8\u5f00\u59cb\u904d\u5386\uff08\u5bf9\u4e8e\u5927\u591a\u6570\u60c5\u51b5\uff0c\u53ef\u80fd\u5b58\u5728\u94fe\u8868\u957f\u5ea6\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5\uff09\uff0c\u5f53\u5176\u4e2d\u4e00\u4e2a\u94fe\u8868\u904d\u5386\u7ed3\u675f\uff0c\u6211\u4eec\u5047\u8bbeptr1\u5148\u904d\u5386\u5b8c\u4e86\u94fe\u8868A\uff0c\u7136\u540e\u4e0b\u4e00\u6b65\u5c06ptr1\u6307\u5411\u94fe\u8868B\uff0c\u8fdb\u884c\u904d\u5386\uff1b\u5f53ptr2\u904d\u5386\u5b8c\u94fe\u8868B\u4e4b\u540e\uff0c\u5c06ptr2\u6307\u5411\u94fe\u8868A\uff0c\u4ece\u5934\u5f00\u59cb\u904d\u5386\u3002\u8fd9\u6837\u201c\u8f6e\u7740\u904d\u5386\u201d\u7684\u7cbe\u5999\u4e4b\u5904\u5728\u4e8e\uff1a\u5f53\u6709\u76f8\u4ea4\u7684\u8282\u70b9\u65f6\uff0c\u4e24\u4e2a\u6307\u9488\u4f1a\u540c\u65f6\u6307\u5411\u8be5\u76f8\u4ea4\u7684\u8282\u70b9(\u5373\u5b83\u4eec\u5728\u76f8\u4ea4\u8282\u70b9\u4e4b\u524d\u8d70\u8fc7\u7684\u8def\u7a0b\u662f\u4e00\u6837\u7684)\uff0c\u6b64\u65f6\u5c31\u8fd4\u56de\u76f8\u4ea4\u8282\u70b9\uff1b\u5f53\u6ca1\u6709\u76f8\u4ea4\u8282\u70b9\u65f6\uff0c\u4e24\u4e2a\u6307\u9488\u4f1a\u5c06\u4e24\u4e2a\u94fe\u8868\u904d\u5386\u5b8c\u6210\uff0c\u90fd\u4e3anullptr\uff0c\u8868\u660e\u4e24\u4e2a\u94fe\u8868\u6ca1\u6709\u76f8\u540c\u7684\u8282\u70b9\uff0c\u6700\u7ec8\u8fd4\u56de\u7a7a\uff08\u6240\u4ee5\u8fd9\u79cd\u65b9\u6cd5\u7684\u5999\u5904\u5728\u4e8e\uff0c\u4e0d\u7ba1\u662f\u8d70\u5230\u76f8\u4ea4\u7684\u8282\u70b9\u5904\u8fd8\u662f\u904d\u5386\u5b8c\u4e24\u4e2a\u94fe\u8868\u4e4b\u540e\u6ca1\u6709\u76f8\u4ea4\u8282\u70b9\uff0c\u4e24\u4e2a\u6307\u9488\u8d70\u8fc7\u7684\u8def\u7a0b\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5e76\u4e14\u5b83\u4eec\u6700\u540e\u9000\u51fa\u904d\u5386\u7684\u6761\u4ef6\u90fd\u662f\u76f8\u7b49\u7684\u60c5\u51b5\uff0c\u5373\u90fd\u6307\u5411\u76f8\u4ea4\u8282\u70b9\u6216\u8005\u90fd\u662fnullptr\uff09 \u4ee3\u7801 \u00b6 class Solution { public : ListNode * getIntersectionNode ( ListNode * headA , ListNode * headB ) { if ( headA == nullptr || headB == nullptr ) return nullptr ; ListNode * ptr1 = headA , * ptr2 = headB ; //\u5982\u679c\u76f8\u4ea4\uff0c\u90a3\u4e48ptr1\u548cptr2\u4f1a\u5728\u4ea4\u70b9\u5904\u90fd\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u9000\u51fa\uff0c\u6b64\u65f6ptr1\u548cptr2\u5c31\u662f\u4ea4\u70b9 //\u5982\u679c\u4e0d\u76f8\u4ea4\uff0c\u4e24\u4e2a\u6307\u9488\u90fd\u4f1a\u904d\u5386\u5230\u6700\u540e\uff0c\u90fd\u6307\u5411nullptr\u7684\u65f6\u5019\u7ed3\u675f\uff0c\u6b64\u65f6\u5c31\u662f\u8fd4\u56deNull while ( ptr1 != ptr2 ){ ptr1 = ptr1 == nullptr ? headB : ptr1 -> next ; ptr2 = ptr2 == nullptr ? headA : ptr2 -> next ; } return ptr1 ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u56e0\u4e3a\u6bcf\u4e2a\u6307\u9488\u90fd\u8981\u904d\u5386\u4e24\u4e2a\u94fe\u8868\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n+m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"leetcode160-\u76f8\u4ea4\u94fe\u8868"},{"location":"%E9%93%BE%E8%A1%A8/leetcode160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/#_1","text":"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E9%93%BE%E8%A1%A8/leetcode160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/#_2","text":"\u5bfb\u627e\u76f8\u4ea4\u7684\u70b9\u3002\u672c\u9898\u7684\u89e3\u6cd5\u975e\u5e38\u5de7\u5999\uff0c\u91c7\u7528\u7684\u53cc\u6307\u9488\uff0c\u5373\u94fe\u8868A\u4e00\u4e2a\u6307\u9488ptr1\u8fdb\u884c\u904d\u5386\uff0c\u94fe\u8868B\u4e00\u4e2a\u6307\u9488ptr2\u8fdb\u884c\u904d\u5386\uff1b \u4e24\u8005\u4e00\u5f00\u59cb\u90fd\u662f\u4ece\u5404\u81ea\u7684\u94fe\u8868\u5934\u90e8\u5f00\u59cb\u904d\u5386\uff08\u5bf9\u4e8e\u5927\u591a\u6570\u60c5\u51b5\uff0c\u53ef\u80fd\u5b58\u5728\u94fe\u8868\u957f\u5ea6\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5\uff09\uff0c\u5f53\u5176\u4e2d\u4e00\u4e2a\u94fe\u8868\u904d\u5386\u7ed3\u675f\uff0c\u6211\u4eec\u5047\u8bbeptr1\u5148\u904d\u5386\u5b8c\u4e86\u94fe\u8868A\uff0c\u7136\u540e\u4e0b\u4e00\u6b65\u5c06ptr1\u6307\u5411\u94fe\u8868B\uff0c\u8fdb\u884c\u904d\u5386\uff1b\u5f53ptr2\u904d\u5386\u5b8c\u94fe\u8868B\u4e4b\u540e\uff0c\u5c06ptr2\u6307\u5411\u94fe\u8868A\uff0c\u4ece\u5934\u5f00\u59cb\u904d\u5386\u3002\u8fd9\u6837\u201c\u8f6e\u7740\u904d\u5386\u201d\u7684\u7cbe\u5999\u4e4b\u5904\u5728\u4e8e\uff1a\u5f53\u6709\u76f8\u4ea4\u7684\u8282\u70b9\u65f6\uff0c\u4e24\u4e2a\u6307\u9488\u4f1a\u540c\u65f6\u6307\u5411\u8be5\u76f8\u4ea4\u7684\u8282\u70b9(\u5373\u5b83\u4eec\u5728\u76f8\u4ea4\u8282\u70b9\u4e4b\u524d\u8d70\u8fc7\u7684\u8def\u7a0b\u662f\u4e00\u6837\u7684)\uff0c\u6b64\u65f6\u5c31\u8fd4\u56de\u76f8\u4ea4\u8282\u70b9\uff1b\u5f53\u6ca1\u6709\u76f8\u4ea4\u8282\u70b9\u65f6\uff0c\u4e24\u4e2a\u6307\u9488\u4f1a\u5c06\u4e24\u4e2a\u94fe\u8868\u904d\u5386\u5b8c\u6210\uff0c\u90fd\u4e3anullptr\uff0c\u8868\u660e\u4e24\u4e2a\u94fe\u8868\u6ca1\u6709\u76f8\u540c\u7684\u8282\u70b9\uff0c\u6700\u7ec8\u8fd4\u56de\u7a7a\uff08\u6240\u4ee5\u8fd9\u79cd\u65b9\u6cd5\u7684\u5999\u5904\u5728\u4e8e\uff0c\u4e0d\u7ba1\u662f\u8d70\u5230\u76f8\u4ea4\u7684\u8282\u70b9\u5904\u8fd8\u662f\u904d\u5386\u5b8c\u4e24\u4e2a\u94fe\u8868\u4e4b\u540e\u6ca1\u6709\u76f8\u4ea4\u8282\u70b9\uff0c\u4e24\u4e2a\u6307\u9488\u8d70\u8fc7\u7684\u8def\u7a0b\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5e76\u4e14\u5b83\u4eec\u6700\u540e\u9000\u51fa\u904d\u5386\u7684\u6761\u4ef6\u90fd\u662f\u76f8\u7b49\u7684\u60c5\u51b5\uff0c\u5373\u90fd\u6307\u5411\u76f8\u4ea4\u8282\u70b9\u6216\u8005\u90fd\u662fnullptr\uff09","title":"\u601d\u8def"},{"location":"%E9%93%BE%E8%A1%A8/leetcode160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/#_3","text":"class Solution { public : ListNode * getIntersectionNode ( ListNode * headA , ListNode * headB ) { if ( headA == nullptr || headB == nullptr ) return nullptr ; ListNode * ptr1 = headA , * ptr2 = headB ; //\u5982\u679c\u76f8\u4ea4\uff0c\u90a3\u4e48ptr1\u548cptr2\u4f1a\u5728\u4ea4\u70b9\u5904\u90fd\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u9000\u51fa\uff0c\u6b64\u65f6ptr1\u548cptr2\u5c31\u662f\u4ea4\u70b9 //\u5982\u679c\u4e0d\u76f8\u4ea4\uff0c\u4e24\u4e2a\u6307\u9488\u90fd\u4f1a\u904d\u5386\u5230\u6700\u540e\uff0c\u90fd\u6307\u5411nullptr\u7684\u65f6\u5019\u7ed3\u675f\uff0c\u6b64\u65f6\u5c31\u662f\u8fd4\u56deNull while ( ptr1 != ptr2 ){ ptr1 = ptr1 == nullptr ? headB : ptr1 -> next ; ptr2 = ptr2 == nullptr ? headA : ptr2 -> next ; } return ptr1 ; } };","title":"\u4ee3\u7801"},{"location":"%E9%93%BE%E8%A1%A8/leetcode160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/#_4","text":"\u56e0\u4e3a\u6bcf\u4e2a\u6307\u9488\u90fd\u8981\u904d\u5386\u4e24\u4e2a\u94fe\u8868\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n+m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E9%93%BE%E8%A1%A8/leetcode206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002 \u793a\u4f8b: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 5->4->3->2->1->NULL \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/reverse-linked-list/ \u601d\u8def\u4e00 \u00b6 \u8fed\u4ee3 \uff1a\u4f7f\u7528\u53cc\u6307\u9488\uff0c\u540c\u6837\u4e3a\u4e86\u64cd\u4f5c\u7684\u4e00\u81f4\u6027\uff0c\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u865a\u62df\u8282\u70b9 dummpy \uff0c \u539f\u5730\u53cd\u8f6c \u94fe\u8868 \u4e00\u4e2a\u6307\u5411\u5934\u8282\u70b9\u7684\u6307\u9488 prev \uff0c\u4e00\u4e2a\u6307\u5411pre->next\u7684\u6307\u9488 cur\uff1b \u6bcf\u6b21\u8981\u505a\u7684\u5c31\u662f\u5c06 pre \u7684\u6307\u9488\u6307\u5411 cur\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 \uff0c\u7136\u540e\u5c06 cur \u6307\u5411 dummpy\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 \uff0c\u6700\u540e\u518d\u5c06 dummpy \u6307\u5411 cur\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 \u3002 \u4e3b\u8981\u5206\u4e3a\u56db\u6b65(\u4ee5step1\u4e3a\u4f8b)\uff1a pre\u6307\u5411\u7684\u8282\u70b9head\u65ad\u5f00\u6307\u5411\u540e\u7ee7\u7684\u6307\u9488\uff0c\u8f6c\u800c\u6307\u5411\u540e\u7ee7\u7684\u540e\u7ee7node1\u8282\u70b9 cur\u6307\u5411\u7684\u8282\u70b9\u65ad\u5f00\u6307\u5411\u540e\u7ee7\u7684\u6307\u9488\uff0c\u8f6c\u800c\u6307\u5411\u524d\u9a71head\u8282\u70b9 dummpy\u865a\u62df\u8282\u70b9\u65ad\u5f00\u5176\u6307\u5411\u540e\u7ee7head\u7684\u6307\u9488\uff0c\u8f6c\u800c\u6307\u5411node1\u8282\u70b9 \u5c06cur\u6307\u9488\u91cd\u7f6e\u4e3a\u6307\u5411pre\u6307\u9488\u6240\u6307\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9node2 \u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u76f4\u5230cur\u6307\u5411\u4e3anull\u7684\u65f6\u5019\uff0c\u5373\u4e0b\u56fe\u7684step4\uff0c\u6b64\u65f6\u5c31\u5df2\u7ecf\u53cd\u8f6c\u7ed3\u675f\u4e86 \u6574\u4e2a\u5faa\u73af\u4e0d\u505c\u53cd\u8f6c\u8fc7\u7a0b\u4e2d pre \u4e00\u76f4\u662f\u6307\u5411 head \u8282\u70b9\u7684\uff0c\u800c cur \u662f\u4e0d\u65ad\u53d8\u5316\u7684\uff0c\u4e0d\u65ad\u66f4\u65b0\u6210\u4e3a \u4e3adummpy\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u6700\u7ec8\u539f\u6765\u7684\u94fe\u8868\u5c3e\u6210\u4e3adummpy\u6307\u5411\u7684\u8282\u70b9\uff0c\u5373\u9996\u8282\u70b9\uff0c\u800c\u539f\u6765\u7684\u9996\u8282\u70b9 head \u6210\u4e3a\u5c3e\u8282\u70b9\u3002 \u4ee3\u7801 \u00b6 class Solution { public : ListNode * reverseList ( ListNode * head ) { if ( ! head || ! head -> next ) return head ; //\u65b0\u5efa\u4e00\u4e2a\u6307\u5411\u9996\u8282\u70b9\u7684\u865a\u62df\u8282\u70b9 ListNode * dummpy = new ListNode ( 0 ); dummpy -> next = head ; //\u8bbe\u7f6e\u4e24\u4e2a\u6307\u9488\uff0c\u5206\u522b\u6307\u5411\u5934\u8282\u70b9\u548c\u5176\u4e0b\u4e00\u4e2a\u8282\u70b9 ListNode * prev = head ; ListNode * cur = prev -> next ; while ( cur ){ //\u53cd\u8f6cdummpy\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u548ccur\u5f53\u524d\u6307\u5411\u7684\u8282\u70b9 prev -> next = cur -> next ; cur -> next = dummpy -> next ; dummpy -> next = cur ; //pre\u4e0d\u53d8\uff0ccur\u6307\u5411\u4e0b\u4e00\u4e2apre\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 cur = prev -> next ; } return dummpy -> next ; } }; \u601d\u8def\u4e8c \u00b6 \u9012\u5f52 \u9012\u5f52\u8fb9\u754c\uff1a\u5f53\u9012\u5f52\u5230\u6700\u540e\u4e3anull\u65f6 \u9012\u5f52\u6bcf\u5c42\u5e72\u7684\u4e8b\uff1a\u5c06\u5f53\u524d\u8282\u70b9\u6307\u5411\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e0b\u4e2a\u8282\u70b9\uff0c\u5e76\u5c06\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u6307\u5411\u5f53\u524d\u8282\u70b9\u3002 \u9012\u5f52\u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u7684\u662f\u5df2\u7ecf\u53d8\u4e3a\u5012\u5e8f\u7684\u94fe\u8868 \u4ee3\u7801 \u00b6 class Solution { public : ListNode * reverseList ( ListNode * head ) { if ( head == nullptr || head -> next == nullptr ) return head ; ListNode * p = reverseList ( head -> next ); head -> next -> next = head ; head -> next = nullptr ; return p ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u8fed\u4ee3\u7b97\u6cd5\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1) \u9012\u5f52\u7b97\u6cd5\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(log N)","title":"leetcode206-\u53cd\u8f6c\u94fe\u8868"},{"location":"%E9%93%BE%E8%A1%A8/leetcode206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#_1","text":"\u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002 \u793a\u4f8b: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 5->4->3->2->1->NULL","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E9%93%BE%E8%A1%A8/leetcode206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#_2","text":"https://leetcode-cn.com/problems/reverse-linked-list/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E9%93%BE%E8%A1%A8/leetcode206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#_3","text":"\u8fed\u4ee3 \uff1a\u4f7f\u7528\u53cc\u6307\u9488\uff0c\u540c\u6837\u4e3a\u4e86\u64cd\u4f5c\u7684\u4e00\u81f4\u6027\uff0c\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u865a\u62df\u8282\u70b9 dummpy \uff0c \u539f\u5730\u53cd\u8f6c \u94fe\u8868 \u4e00\u4e2a\u6307\u5411\u5934\u8282\u70b9\u7684\u6307\u9488 prev \uff0c\u4e00\u4e2a\u6307\u5411pre->next\u7684\u6307\u9488 cur\uff1b \u6bcf\u6b21\u8981\u505a\u7684\u5c31\u662f\u5c06 pre \u7684\u6307\u9488\u6307\u5411 cur\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 \uff0c\u7136\u540e\u5c06 cur \u6307\u5411 dummpy\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 \uff0c\u6700\u540e\u518d\u5c06 dummpy \u6307\u5411 cur\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 \u3002 \u4e3b\u8981\u5206\u4e3a\u56db\u6b65(\u4ee5step1\u4e3a\u4f8b)\uff1a pre\u6307\u5411\u7684\u8282\u70b9head\u65ad\u5f00\u6307\u5411\u540e\u7ee7\u7684\u6307\u9488\uff0c\u8f6c\u800c\u6307\u5411\u540e\u7ee7\u7684\u540e\u7ee7node1\u8282\u70b9 cur\u6307\u5411\u7684\u8282\u70b9\u65ad\u5f00\u6307\u5411\u540e\u7ee7\u7684\u6307\u9488\uff0c\u8f6c\u800c\u6307\u5411\u524d\u9a71head\u8282\u70b9 dummpy\u865a\u62df\u8282\u70b9\u65ad\u5f00\u5176\u6307\u5411\u540e\u7ee7head\u7684\u6307\u9488\uff0c\u8f6c\u800c\u6307\u5411node1\u8282\u70b9 \u5c06cur\u6307\u9488\u91cd\u7f6e\u4e3a\u6307\u5411pre\u6307\u9488\u6240\u6307\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9node2 \u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u76f4\u5230cur\u6307\u5411\u4e3anull\u7684\u65f6\u5019\uff0c\u5373\u4e0b\u56fe\u7684step4\uff0c\u6b64\u65f6\u5c31\u5df2\u7ecf\u53cd\u8f6c\u7ed3\u675f\u4e86 \u6574\u4e2a\u5faa\u73af\u4e0d\u505c\u53cd\u8f6c\u8fc7\u7a0b\u4e2d pre \u4e00\u76f4\u662f\u6307\u5411 head \u8282\u70b9\u7684\uff0c\u800c cur \u662f\u4e0d\u65ad\u53d8\u5316\u7684\uff0c\u4e0d\u65ad\u66f4\u65b0\u6210\u4e3a \u4e3adummpy\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u6700\u7ec8\u539f\u6765\u7684\u94fe\u8868\u5c3e\u6210\u4e3adummpy\u6307\u5411\u7684\u8282\u70b9\uff0c\u5373\u9996\u8282\u70b9\uff0c\u800c\u539f\u6765\u7684\u9996\u8282\u70b9 head \u6210\u4e3a\u5c3e\u8282\u70b9\u3002","title":"\u601d\u8def\u4e00"},{"location":"%E9%93%BE%E8%A1%A8/leetcode206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#_4","text":"class Solution { public : ListNode * reverseList ( ListNode * head ) { if ( ! head || ! head -> next ) return head ; //\u65b0\u5efa\u4e00\u4e2a\u6307\u5411\u9996\u8282\u70b9\u7684\u865a\u62df\u8282\u70b9 ListNode * dummpy = new ListNode ( 0 ); dummpy -> next = head ; //\u8bbe\u7f6e\u4e24\u4e2a\u6307\u9488\uff0c\u5206\u522b\u6307\u5411\u5934\u8282\u70b9\u548c\u5176\u4e0b\u4e00\u4e2a\u8282\u70b9 ListNode * prev = head ; ListNode * cur = prev -> next ; while ( cur ){ //\u53cd\u8f6cdummpy\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u548ccur\u5f53\u524d\u6307\u5411\u7684\u8282\u70b9 prev -> next = cur -> next ; cur -> next = dummpy -> next ; dummpy -> next = cur ; //pre\u4e0d\u53d8\uff0ccur\u6307\u5411\u4e0b\u4e00\u4e2apre\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 cur = prev -> next ; } return dummpy -> next ; } };","title":"\u4ee3\u7801"},{"location":"%E9%93%BE%E8%A1%A8/leetcode206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#_5","text":"\u9012\u5f52 \u9012\u5f52\u8fb9\u754c\uff1a\u5f53\u9012\u5f52\u5230\u6700\u540e\u4e3anull\u65f6 \u9012\u5f52\u6bcf\u5c42\u5e72\u7684\u4e8b\uff1a\u5c06\u5f53\u524d\u8282\u70b9\u6307\u5411\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e0b\u4e2a\u8282\u70b9\uff0c\u5e76\u5c06\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u6307\u5411\u5f53\u524d\u8282\u70b9\u3002 \u9012\u5f52\u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u7684\u662f\u5df2\u7ecf\u53d8\u4e3a\u5012\u5e8f\u7684\u94fe\u8868","title":"\u601d\u8def\u4e8c"},{"location":"%E9%93%BE%E8%A1%A8/leetcode206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#_6","text":"class Solution { public : ListNode * reverseList ( ListNode * head ) { if ( head == nullptr || head -> next == nullptr ) return head ; ListNode * p = reverseList ( head -> next ); head -> next -> next = head ; head -> next = nullptr ; return p ; } };","title":"\u4ee3\u7801"},{"location":"%E9%93%BE%E8%A1%A8/leetcode206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#_7","text":"\u8fed\u4ee3\u7b97\u6cd5\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1) \u9012\u5f52\u7b97\u6cd5\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(log N)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E9%93%BE%E8%A1%A8/leetcode24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002 \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002 \u4f8b\u5b50\uff1a \u8f93\u5165\uff1ahead = [1,2,3,4] \u8f93\u51fa\uff1a[2,1,4,3] \u8f93\u5165\uff1ahead = [] \u8f93\u51fa\uff1a[] \u8f93\u5165\uff1ahead = [1] \u8f93\u51fa\uff1a[1] \u63d0\u793a\uff1a \u94fe\u8868\u4e2d\u8282\u70b9\u7684\u6570\u76ee\u5728\u8303\u56f4 [0, 100] \u5185 0 <= Node.val <= 100 \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/swap-nodes-in-pairs/ \u601d\u8def\u4e00 \u00b6 \u8fed\u4ee3 \uff1a\u8981\u6c42\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u4e24\u4e24\u4ea4\u6362\uff0c\u4e3a\u4e86\u4f7f\u6240\u6709\u8282\u70b9\u7684\u64cd\u4f5c\u4e00\u81f4 \u9700\u8981\u6dfb\u52a0\u4e00\u4e2a \u865a\u62df\u5934\u8282\u70b9dummpy \uff0c\u7136\u540e\u8bbe\u7f6e\u4e24\u4e2a\u6307\u9488 pre \u548c cur \uff0c\u5206\u522b\u6307\u5411 dumpy \u548c head \uff0c\u8fd9\u4e24\u4e2a\u6307\u9488\u7684\u4f5c\u7528\u5c31\u662f\u5c06 head \u8282\u70b9\u548c node1 \u8282\u70b9\u8fdb\u884c\u4ea4\u6362\u3002\u5982\u56fe\uff0c\u8fd9\u4e24\u4e2a\u8282\u70b9\u7684\u4ea4\u6362\u6d89\u53ca\u5230\u4e09\u4e2a\u8282\u70b9 head \u3001 node1 \u3001 cnn \uff0c\u53ea\u9700\u8981\u6539\u53d8 head \u548c node1 \u7684\u6307\u9488\u6307\u5411\u5373\u53ef\uff08\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\u5355\u94fe\u8868\u53ea\u6709\u4e00\u4e2a\u6307\u9488\uff0c\u5728 head \u65ad\u5f00\u6307\u5411 node1 \u7684\u6307\u9488\u4e4b\u524d\uff0c\u9700\u8981\u5148\u7528\u4e00\u4e2a\u6307\u9488\u6307\u5411 node1 \uff0c\u4ee5\u4fbf\u540e\u9762 node1 \u7684\u64cd\u4f5c\uff0c\u9632\u6b62\u51fa\u73b0 \u65ad\u94fe \uff09 head \u6307\u5411\u540e\u7ee7\u7684\u540e\u7ee7 head \u7684\u540e\u7ee7 node1 \u65ad\u5f00\u6307\u5411 cnn \u7684\u6307\u9488\uff0c\u8f6c\u800c\u6307\u5411\u524d\u9a71 head \u5c06 dummpy \u6307\u5411 node1 \uff08\u8fd9\u4e00\u6b65\u4e0d\u8981\u5fd8\u8bb0\uff01\uff01\uff01\uff09 \u8fd9\u6837\uff0c head \u548c node1 \u7684\u4ea4\u6362\u5c31\u5b8c\u6210\u4e86 \u7136\u540e\u5c06 pre \u91cd\u65b0\u6307\u5411 node \uff0c\u5c06 cur \u91cd\u65b0\u6307\u5411 cnn \u6700\u7ec8\u8fd4\u56de\u7684\u662f dummpy \u5934\u8282\u70b9\uff0c\u5373\u4e00\u6761\u94fe \u6240\u4ee5\u53ef\u4ee5\u770b\u51fa\u6765\uff0c pre \u548c cur \u6307\u9488\u7684\u4f5c\u7528\u5c31\u662f\u5c06 cur \u6240\u6307\u5411\u7684\u5f53\u524d\u8282\u70b9\u548c\u5176\u4e0b\u4e00\u4e2a\u8282\u70b9\u8fdb\u884c\u4ea4\u6362 \u5728\u94fe\u8868\u7684\u64cd\u4f5c\u4e2d\uff0c\u7ecf\u5e38\u4f1a\u51fa\u73b0 \u5934\u8282\u70b9 \u548c \u5934\u6307\u9488 \uff0c\u5f88\u5bb9\u6613\u641e\u4e71\uff0c\u5b83\u4eec\u7684\u533a\u522b\u5c31\u662f\uff1a \u5934\u6307\u9488 \u662f\u94fe\u8868\u4e2d \u5fc5\u987b\u6709 \u7684\uff0c\u56e0\u4e3a\u5b83\u662f\u6307\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u94fe\u8868\u4e2d\u6ca1\u6709\u5934\u8282\u70b9\uff0c\u90a3\u4e48\u6b64\u65f6\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u9996\u8282\u70b9head; \u5934\u8282\u70b9\u4e0d\u662f\u5fc5\u987b \u7684\uff0c\u662f\u56e0\u4e3a**\u4e3a\u4e86\u4f7f\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u548c\u5176\u4ed6\u8282\u70b9\u64cd\u4f5c\u4e00\u81f4**\uff0c\u800c\u5f15\u5165\u4e86\u4e00\u4e2a\u5934\u8282\u70b9dummpy\uff0c\u5f53\u4e00\u4e2a\u94fe\u8868\u6709\u5934\u8282\u70b9\u7684\u65f6\u5019\uff0c\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u662f\u5934\u8282\u70b9dummpy\uff0c\u800c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u624d\u662f\u9996\u8282\u70b9head \u4ee3\u7801(\u8fed\u4ee3) \u00b6 class Solution { public : ListNode * swapPairs ( ListNode * head ) { if ( head == nullptr || head -> next == nullptr ) return head ; //\u5f00\u8f9f\u4e00\u4e2a\u5934\u8282\u70b9dummpy ListNode * dummpy = new ListNode ( 0 ); dummpy -> next = head ; //\u521b\u5efa\u4e24\u4e2a\u6307\u9488\uff0cpre\u548ccur ListNode * pre = dummpy , * cur = head ; while ( cur != nullptr && cur -> next != nullptr ){ //\u6b64\u65f6\u7684\u5e8f\u5217\u4e3apre cur cur->next cnext-next...... //\u8bb0\u5f55cur\u7684\u540e\u7ee7\u8282\u70b9\uff0c\u56e0\u4e3a\u540e\u9762cur\u8981\u65ad\u5f00\u4e0e\u540e\u7ee7\u8282\u70b9\u7684\u94fe\u63a5 ListNode * cnext = cur -> next ; cur -> next = cnext -> next ; cnext -> next = cur ; pre -> next = cnext ; //\u4ea4\u6362\u4e4b\u540e\u7684\u5e8f\u5217\u4e3apre cur->next cur cnext->next //\u4ea4\u6362\u4e00\u5bf9\u8282\u70b9\u4e4b\u540e\uff0c\u518d\u5c06pre\u548ccur\u91cd\u65b0\u6307\u5411\u65b0\u7684\u8282\u70b9 //\u5373pre\u91cd\u65b0\u6307\u5411cur,cur\u6307\u5411cur\u4e0b\u4e00\u4e2a\u8282\u70b9\uff08\u53ef\u4ee5\u770b\u51fapre\u548ccur\u4e24\u4e2a\u6307\u9488\u662f\u4e00\u8d77\u7684\uff0c\u5b83\u4eec\u7684\u4f5c\u7528\u5c31\u662f\u5c06cur\u6240\u6307\u7684\u5f53\u524d\u7684\u8282\u70b9\u4e0ecur\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8fdb\u884c\u4ea4\u6362\uff09 pre = cur ; cur = cur -> next ; } //\u6700\u7ec8\u8fd4\u56de\u7684\u662fdummpy return dummpy -> next ; } }; \u601d\u8def\u4e8c \u00b6 \u9012\u5f52 \uff1a\u5199\u6cd5\u66f4\u7b80\u6d01\uff0c\u53ef\u4ee5\u901a\u8fc7\u9012\u5f52\u7684\u601d\u8def\u53bb\u7406\u89e3\uff0c\u9996\u5148\u9012\u5f52\u7684\u601d\u8def\u5206\u4e3a \u4e09\u6b65\u9aa4 \uff1a \u9012\u5f52 \u8fb9\u754c \u9012\u5f52\u5f53\u524d\u5c42 \u505a\u4e86\u4ec0\u4e48 \u9012\u5f52\u7684 \u8fd4\u56de\u503c \u672c\u9898\u4e2d\u9012\u5f52\u7684\u8fb9\u754c\u5c31\u662f\u5f53\u9012\u5f52\u5230\u8282\u70b9\u7684\u6307\u9488\u4e3anull\u7684\u65f6\u5019\uff1b\u6bcf\u4e00\u5c42\u9012\u5f52\u9700\u8981\u505a\u7684\u5c31\u662f\u4ea4\u6362\uff0c\u5373 \u5f53\u524d\u8282\u70b9head ,\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e3a head->next \uff0c\u548c \u5df2\u7ecf\u4ea4\u6362\u8fc7\u7684\u94fe\u8868\u90e8\u5206 \u4e09\u90e8\u5206\uff0c\u6bcf\u6b21\u9700\u8981\u505a\u7684\u5c31\u662f\u4ea4\u6362head\u548chead->next\uff1b\u9012\u5f52\u7684\u8fd4\u56de\u503c\u4e3a\u5f53\u524d\u5df2\u7ecf\u5904\u7406\u5b8c\u7684\u94fe\u8868\uff08\u5982\u679c\u5c06p\u4e3ahead->next\uff0c\u90a3\u4e48\u8fd4\u56de\u7684\u5c31\u5e94\u8be5\u662fp\uff0c\u5373p\u6b64\u65f6\u4e3a\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u4ee3\u8868\u4e86\u94fe\u8868\uff09 \u9012\u5f52\u5207\u8bb0\u4e0d\u8981\u9677\u5165 \u9012\u5f52\u5730\u72f1 \uff0c\u54c8\u54c8\u54c8\u8fd9\u4e2a\u540d\u5b57\u6211\u81ea\u5df1\u8d77\u7684\uff0c\u56e0\u4e3a\u4e4b\u524d\u770bNode\u91cc\u6709\u4e00\u4e2a\u56de\u8c03\u5730\u72f1\ud83e\udd2d\uff0c\u5207\u8bb0\u4e0d\u8981\u4e00\u5c42\u4e00\u5c42\u4e0b\u53bb\u6df1\u7a76\uff0c\u4f1a\u628a\u81ea\u5df1\u7ed5\u6655\u7684\uff0c\u53ea\u9700\u8981\u8003\u8651\u672c\u5c42\u7684\u4e8b\u60c5\u5373\u53ef\uff0c\u5176\u4ed6\u5c42\u7684\u9053\u7406\u5176\u5b9e\u4e00\u6837 \u64cd\u4f5c\u7684\u6ce8\u610f\u70b9\u4e5f\u662f\u94fe\u8868\u4ea4\u6362\u9632\u6b62 \u65ad\u94fe \uff0c\u8981\u5c06\u540e\u9762\u7684\u8282\u70b9\u7528\u4e00\u4e2a\u6307\u9488\u6765\u6307\u5411\uff0c\u7136\u540e\u5c06\u4e24\u4e2a\u8282\u70b9\u8fdb\u884c\u4ea4\u6362 \u4ee3\u7801(\u9012\u5f52) \u00b6 class Solution { public : ListNode * swapPairs ( ListNode * head ) { if ( head == nullptr || head -> next == nullptr ) return head ; ListNode * p = head -> next ; head -> next = swapPairs ( p -> next ); p -> next = head ; return p ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n),\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"leetcode24-\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},{"location":"%E9%93%BE%E8%A1%A8/leetcode24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002 \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002 \u4f8b\u5b50\uff1a \u8f93\u5165\uff1ahead = [1,2,3,4] \u8f93\u51fa\uff1a[2,1,4,3] \u8f93\u5165\uff1ahead = [] \u8f93\u51fa\uff1a[] \u8f93\u5165\uff1ahead = [1] \u8f93\u51fa\uff1a[1] \u63d0\u793a\uff1a \u94fe\u8868\u4e2d\u8282\u70b9\u7684\u6570\u76ee\u5728\u8303\u56f4 [0, 100] \u5185 0 <= Node.val <= 100","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E9%93%BE%E8%A1%A8/leetcode24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/#_2","text":"https://leetcode-cn.com/problems/swap-nodes-in-pairs/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E9%93%BE%E8%A1%A8/leetcode24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/#_3","text":"\u8fed\u4ee3 \uff1a\u8981\u6c42\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u4e24\u4e24\u4ea4\u6362\uff0c\u4e3a\u4e86\u4f7f\u6240\u6709\u8282\u70b9\u7684\u64cd\u4f5c\u4e00\u81f4 \u9700\u8981\u6dfb\u52a0\u4e00\u4e2a \u865a\u62df\u5934\u8282\u70b9dummpy \uff0c\u7136\u540e\u8bbe\u7f6e\u4e24\u4e2a\u6307\u9488 pre \u548c cur \uff0c\u5206\u522b\u6307\u5411 dumpy \u548c head \uff0c\u8fd9\u4e24\u4e2a\u6307\u9488\u7684\u4f5c\u7528\u5c31\u662f\u5c06 head \u8282\u70b9\u548c node1 \u8282\u70b9\u8fdb\u884c\u4ea4\u6362\u3002\u5982\u56fe\uff0c\u8fd9\u4e24\u4e2a\u8282\u70b9\u7684\u4ea4\u6362\u6d89\u53ca\u5230\u4e09\u4e2a\u8282\u70b9 head \u3001 node1 \u3001 cnn \uff0c\u53ea\u9700\u8981\u6539\u53d8 head \u548c node1 \u7684\u6307\u9488\u6307\u5411\u5373\u53ef\uff08\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\u5355\u94fe\u8868\u53ea\u6709\u4e00\u4e2a\u6307\u9488\uff0c\u5728 head \u65ad\u5f00\u6307\u5411 node1 \u7684\u6307\u9488\u4e4b\u524d\uff0c\u9700\u8981\u5148\u7528\u4e00\u4e2a\u6307\u9488\u6307\u5411 node1 \uff0c\u4ee5\u4fbf\u540e\u9762 node1 \u7684\u64cd\u4f5c\uff0c\u9632\u6b62\u51fa\u73b0 \u65ad\u94fe \uff09 head \u6307\u5411\u540e\u7ee7\u7684\u540e\u7ee7 head \u7684\u540e\u7ee7 node1 \u65ad\u5f00\u6307\u5411 cnn \u7684\u6307\u9488\uff0c\u8f6c\u800c\u6307\u5411\u524d\u9a71 head \u5c06 dummpy \u6307\u5411 node1 \uff08\u8fd9\u4e00\u6b65\u4e0d\u8981\u5fd8\u8bb0\uff01\uff01\uff01\uff09 \u8fd9\u6837\uff0c head \u548c node1 \u7684\u4ea4\u6362\u5c31\u5b8c\u6210\u4e86 \u7136\u540e\u5c06 pre \u91cd\u65b0\u6307\u5411 node \uff0c\u5c06 cur \u91cd\u65b0\u6307\u5411 cnn \u6700\u7ec8\u8fd4\u56de\u7684\u662f dummpy \u5934\u8282\u70b9\uff0c\u5373\u4e00\u6761\u94fe \u6240\u4ee5\u53ef\u4ee5\u770b\u51fa\u6765\uff0c pre \u548c cur \u6307\u9488\u7684\u4f5c\u7528\u5c31\u662f\u5c06 cur \u6240\u6307\u5411\u7684\u5f53\u524d\u8282\u70b9\u548c\u5176\u4e0b\u4e00\u4e2a\u8282\u70b9\u8fdb\u884c\u4ea4\u6362 \u5728\u94fe\u8868\u7684\u64cd\u4f5c\u4e2d\uff0c\u7ecf\u5e38\u4f1a\u51fa\u73b0 \u5934\u8282\u70b9 \u548c \u5934\u6307\u9488 \uff0c\u5f88\u5bb9\u6613\u641e\u4e71\uff0c\u5b83\u4eec\u7684\u533a\u522b\u5c31\u662f\uff1a \u5934\u6307\u9488 \u662f\u94fe\u8868\u4e2d \u5fc5\u987b\u6709 \u7684\uff0c\u56e0\u4e3a\u5b83\u662f\u6307\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u94fe\u8868\u4e2d\u6ca1\u6709\u5934\u8282\u70b9\uff0c\u90a3\u4e48\u6b64\u65f6\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u9996\u8282\u70b9head; \u5934\u8282\u70b9\u4e0d\u662f\u5fc5\u987b \u7684\uff0c\u662f\u56e0\u4e3a**\u4e3a\u4e86\u4f7f\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u548c\u5176\u4ed6\u8282\u70b9\u64cd\u4f5c\u4e00\u81f4**\uff0c\u800c\u5f15\u5165\u4e86\u4e00\u4e2a\u5934\u8282\u70b9dummpy\uff0c\u5f53\u4e00\u4e2a\u94fe\u8868\u6709\u5934\u8282\u70b9\u7684\u65f6\u5019\uff0c\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u662f\u5934\u8282\u70b9dummpy\uff0c\u800c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u624d\u662f\u9996\u8282\u70b9head","title":"\u601d\u8def\u4e00"},{"location":"%E9%93%BE%E8%A1%A8/leetcode24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/#_4","text":"class Solution { public : ListNode * swapPairs ( ListNode * head ) { if ( head == nullptr || head -> next == nullptr ) return head ; //\u5f00\u8f9f\u4e00\u4e2a\u5934\u8282\u70b9dummpy ListNode * dummpy = new ListNode ( 0 ); dummpy -> next = head ; //\u521b\u5efa\u4e24\u4e2a\u6307\u9488\uff0cpre\u548ccur ListNode * pre = dummpy , * cur = head ; while ( cur != nullptr && cur -> next != nullptr ){ //\u6b64\u65f6\u7684\u5e8f\u5217\u4e3apre cur cur->next cnext-next...... //\u8bb0\u5f55cur\u7684\u540e\u7ee7\u8282\u70b9\uff0c\u56e0\u4e3a\u540e\u9762cur\u8981\u65ad\u5f00\u4e0e\u540e\u7ee7\u8282\u70b9\u7684\u94fe\u63a5 ListNode * cnext = cur -> next ; cur -> next = cnext -> next ; cnext -> next = cur ; pre -> next = cnext ; //\u4ea4\u6362\u4e4b\u540e\u7684\u5e8f\u5217\u4e3apre cur->next cur cnext->next //\u4ea4\u6362\u4e00\u5bf9\u8282\u70b9\u4e4b\u540e\uff0c\u518d\u5c06pre\u548ccur\u91cd\u65b0\u6307\u5411\u65b0\u7684\u8282\u70b9 //\u5373pre\u91cd\u65b0\u6307\u5411cur,cur\u6307\u5411cur\u4e0b\u4e00\u4e2a\u8282\u70b9\uff08\u53ef\u4ee5\u770b\u51fapre\u548ccur\u4e24\u4e2a\u6307\u9488\u662f\u4e00\u8d77\u7684\uff0c\u5b83\u4eec\u7684\u4f5c\u7528\u5c31\u662f\u5c06cur\u6240\u6307\u7684\u5f53\u524d\u7684\u8282\u70b9\u4e0ecur\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8fdb\u884c\u4ea4\u6362\uff09 pre = cur ; cur = cur -> next ; } //\u6700\u7ec8\u8fd4\u56de\u7684\u662fdummpy return dummpy -> next ; } };","title":"\u4ee3\u7801(\u8fed\u4ee3)"},{"location":"%E9%93%BE%E8%A1%A8/leetcode24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/#_5","text":"\u9012\u5f52 \uff1a\u5199\u6cd5\u66f4\u7b80\u6d01\uff0c\u53ef\u4ee5\u901a\u8fc7\u9012\u5f52\u7684\u601d\u8def\u53bb\u7406\u89e3\uff0c\u9996\u5148\u9012\u5f52\u7684\u601d\u8def\u5206\u4e3a \u4e09\u6b65\u9aa4 \uff1a \u9012\u5f52 \u8fb9\u754c \u9012\u5f52\u5f53\u524d\u5c42 \u505a\u4e86\u4ec0\u4e48 \u9012\u5f52\u7684 \u8fd4\u56de\u503c \u672c\u9898\u4e2d\u9012\u5f52\u7684\u8fb9\u754c\u5c31\u662f\u5f53\u9012\u5f52\u5230\u8282\u70b9\u7684\u6307\u9488\u4e3anull\u7684\u65f6\u5019\uff1b\u6bcf\u4e00\u5c42\u9012\u5f52\u9700\u8981\u505a\u7684\u5c31\u662f\u4ea4\u6362\uff0c\u5373 \u5f53\u524d\u8282\u70b9head ,\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e3a head->next \uff0c\u548c \u5df2\u7ecf\u4ea4\u6362\u8fc7\u7684\u94fe\u8868\u90e8\u5206 \u4e09\u90e8\u5206\uff0c\u6bcf\u6b21\u9700\u8981\u505a\u7684\u5c31\u662f\u4ea4\u6362head\u548chead->next\uff1b\u9012\u5f52\u7684\u8fd4\u56de\u503c\u4e3a\u5f53\u524d\u5df2\u7ecf\u5904\u7406\u5b8c\u7684\u94fe\u8868\uff08\u5982\u679c\u5c06p\u4e3ahead->next\uff0c\u90a3\u4e48\u8fd4\u56de\u7684\u5c31\u5e94\u8be5\u662fp\uff0c\u5373p\u6b64\u65f6\u4e3a\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u4ee3\u8868\u4e86\u94fe\u8868\uff09 \u9012\u5f52\u5207\u8bb0\u4e0d\u8981\u9677\u5165 \u9012\u5f52\u5730\u72f1 \uff0c\u54c8\u54c8\u54c8\u8fd9\u4e2a\u540d\u5b57\u6211\u81ea\u5df1\u8d77\u7684\uff0c\u56e0\u4e3a\u4e4b\u524d\u770bNode\u91cc\u6709\u4e00\u4e2a\u56de\u8c03\u5730\u72f1\ud83e\udd2d\uff0c\u5207\u8bb0\u4e0d\u8981\u4e00\u5c42\u4e00\u5c42\u4e0b\u53bb\u6df1\u7a76\uff0c\u4f1a\u628a\u81ea\u5df1\u7ed5\u6655\u7684\uff0c\u53ea\u9700\u8981\u8003\u8651\u672c\u5c42\u7684\u4e8b\u60c5\u5373\u53ef\uff0c\u5176\u4ed6\u5c42\u7684\u9053\u7406\u5176\u5b9e\u4e00\u6837 \u64cd\u4f5c\u7684\u6ce8\u610f\u70b9\u4e5f\u662f\u94fe\u8868\u4ea4\u6362\u9632\u6b62 \u65ad\u94fe \uff0c\u8981\u5c06\u540e\u9762\u7684\u8282\u70b9\u7528\u4e00\u4e2a\u6307\u9488\u6765\u6307\u5411\uff0c\u7136\u540e\u5c06\u4e24\u4e2a\u8282\u70b9\u8fdb\u884c\u4ea4\u6362","title":"\u601d\u8def\u4e8c"},{"location":"%E9%93%BE%E8%A1%A8/leetcode24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/#_6","text":"class Solution { public : ListNode * swapPairs ( ListNode * head ) { if ( head == nullptr || head -> next == nullptr ) return head ; ListNode * p = head -> next ; head -> next = swapPairs ( p -> next ); p -> next = head ; return p ; } };","title":"\u4ee3\u7801(\u9012\u5f52)"},{"location":"%E9%93%BE%E8%A1%A8/leetcode24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/#_7","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n),\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E9%93%BE%E8%A1%A8/leetcode25-k%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf k \u4e2a\u8282\u70b9\u4e00\u7ec4\u8fdb\u884c\u7ffb\u8f6c\uff0c\u8bf7\u4f60\u8fd4\u56de\u7ffb\u8f6c\u540e\u7684\u94fe\u8868\u3002 k \u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5b83\u7684\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\u3002 \u5982\u679c\u8282\u70b9\u603b\u6570\u4e0d\u662f k \u7684\u6574\u6570\u500d\uff0c\u90a3\u4e48\u8bf7\u5c06\u6700\u540e\u5269\u4f59\u7684\u8282\u70b9\u4fdd\u6301\u539f\u6709\u987a\u5e8f\u3002 \u793a\u4f8b\uff1a \u7ed9\u4f60\u8fd9\u4e2a\u94fe\u8868\uff1a1->2->3->4->5 \u5f53 k = 2 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: 2->1->4->3->5 \u5f53 k = 3 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: 3->2->1->4->5 \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/reverse-nodes-in-k-group \u601d\u8def \u00b6 \u4ee3\u7801 \u00b6 class Solution { public : ListNode * reverse ( ListNode * head ){ ListNode * pre = nullptr , * cur = head , * temp = nullptr ; while ( cur ){ temp = cur -> next ; cur -> next = pre ; pre = cur ; cur = temp ; } return pre ; } ListNode * reverseKGroup ( ListNode * head , int k ) { ListNode * dummpy = new ListNode ( 0 ); dummpy -> next = head ; ListNode * pre = dummpy , * start = head , * end = head , * temp = head ; while ( temp ){ for ( int i = 1 ; i < k && end ; i ++ ){ end = end -> next ; } //\u5982\u679cend\u4e3a\u7a7a\uff0c\u90a3\u4e48\u5c31\u8df3\u51fa\u5faa\u73af if ( ! end ) break ; temp = end -> next ; end -> next = nullptr ; end = start ; start = reverse ( start ); end -> next = temp ; pre -> next = start ; pre = end ; start = temp ; end = start ; } return dummpy -> next ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"leetcode25-k\u4e2a\u4e00\u7ec4\u53cd\u8f6c\u94fe\u8868"},{"location":"%E9%93%BE%E8%A1%A8/leetcode25-k%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf k \u4e2a\u8282\u70b9\u4e00\u7ec4\u8fdb\u884c\u7ffb\u8f6c\uff0c\u8bf7\u4f60\u8fd4\u56de\u7ffb\u8f6c\u540e\u7684\u94fe\u8868\u3002 k \u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5b83\u7684\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\u3002 \u5982\u679c\u8282\u70b9\u603b\u6570\u4e0d\u662f k \u7684\u6574\u6570\u500d\uff0c\u90a3\u4e48\u8bf7\u5c06\u6700\u540e\u5269\u4f59\u7684\u8282\u70b9\u4fdd\u6301\u539f\u6709\u987a\u5e8f\u3002 \u793a\u4f8b\uff1a \u7ed9\u4f60\u8fd9\u4e2a\u94fe\u8868\uff1a1->2->3->4->5 \u5f53 k = 2 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: 2->1->4->3->5 \u5f53 k = 3 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: 3->2->1->4->5","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E9%93%BE%E8%A1%A8/leetcode25-k%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#_2","text":"https://leetcode-cn.com/problems/reverse-nodes-in-k-group","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E9%93%BE%E8%A1%A8/leetcode25-k%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#_3","text":"","title":"\u601d\u8def"},{"location":"%E9%93%BE%E8%A1%A8/leetcode25-k%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#_4","text":"class Solution { public : ListNode * reverse ( ListNode * head ){ ListNode * pre = nullptr , * cur = head , * temp = nullptr ; while ( cur ){ temp = cur -> next ; cur -> next = pre ; pre = cur ; cur = temp ; } return pre ; } ListNode * reverseKGroup ( ListNode * head , int k ) { ListNode * dummpy = new ListNode ( 0 ); dummpy -> next = head ; ListNode * pre = dummpy , * start = head , * end = head , * temp = head ; while ( temp ){ for ( int i = 1 ; i < k && end ; i ++ ){ end = end -> next ; } //\u5982\u679cend\u4e3a\u7a7a\uff0c\u90a3\u4e48\u5c31\u8df3\u51fa\u5faa\u73af if ( ! end ) break ; temp = end -> next ; end -> next = nullptr ; end = start ; start = reverse ( start ); end -> next = temp ; pre -> next = start ; pre = end ; start = temp ; end = start ; } return dummpy -> next ; } };","title":"\u4ee3\u7801"},{"location":"%E9%93%BE%E8%A1%A8/leetcode25-k%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E9%93%BE%E8%A1%A8/leetcode61-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u65cb\u8f6c\u94fe\u8868\uff0c\u5c06\u94fe\u8868\u6bcf\u4e2a\u8282\u70b9\u5411\u53f3\u79fb\u52a8 k \u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2d k \u662f\u975e\u8d1f\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->4->5->NULL, k = 2 \u8f93\u51fa: 4->5->1->2->3->NULL \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: 5->1->2->3->4->NULL \u5411\u53f3\u65cb\u8f6c 2 \u6b65: 4->5->1->2->3->NULL \u793a\u4f8b 2: \u8f93\u5165: 0->1->2->NULL, k = 4 \u8f93\u51fa: 2->0->1->NULL \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: 2->0->1->NULL \u5411\u53f3\u65cb\u8f6c 2 \u6b65: 1->2->0->NULL \u5411\u53f3\u65cb\u8f6c 3 \u6b65: 0->1->2->NULL \u5411\u53f3\u65cb\u8f6c 4 \u6b65: 2->0->1->NULL \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/rotate-list/ \u601d\u8def \u00b6 \u65cb\u8f6c\u5b9e\u9645\u4e0a\u5c31\u662f\u786e\u5b9a\u65b0\u7684\u94fe\u8868\u5934\u548c\u94fe\u8868\u5c3e \uff1b\u5982\u679c\u8bf4\u5c06\u4e00\u4e2a\u94fe\u8868\u6bcf\u4e2a\u8282\u70b9\u5411\u53f3\u79fb\u52a8k\uff0c\u90a3\u4e48\u65b0\u7684\u94fe\u8868\u7684\u8868\u5934\u8282\u70b9\u5c31\u662f\u4ece\u540e\u5f80\u524d\u6570\u7b2ck\u4e2a\u8282\u70b9(\u5982\u679c\u662fk>n\u7684\u8bdd\u5c31\u662fk%n)\u3002\u5728\u5355\u94fe\u8868\u4e2d\uff0c\u53ea\u6709next\u6307\u9488\uff0c\u6240\u4ee5\uff0c\u5982\u679c\u8981\u627e\u5230\u65b0\u94fe\u8868\u7684\u8868\u5934\u8282\u70b9\uff0c\u6211\u4eec\u5c31\u9700\u8981\u627e\u5230\u5b83\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff08\u5373\u65b0\u94fe\u8868\u7684\u8868\u5c3e\u8282\u70b9\uff09\uff0c\u65b0\u94fe\u8868\u7684\u8868\u5c3e\u8282\u70b9\u4ece\u5de6\u5f80\u53f3\u6570\u7b2c n-k \u4e2a(\u5982\u679ck>n\uff0c\u90a3\u4e48\u5c31\u662f n - k%n)\uff1b\u4f46\u662f\u4ece\u5934\u5f00\u59cb\u627e\u7684\u8bdd\u53ea\u9700\u8981\u79fb\u52a8 n - k % n -1 `\u6b21\u5c31\u80fd\u627e\u5230\u65b0\u7684\u8868\u5c3e\u8282\u70b9\u3002 \u5176\u4e2d\u8fd8\u6d89\u53ca\u5230\u4e00\u4e2a\u5c31\u662f \u8ba1\u7b97\u94fe\u8868\u8282\u70b9\u4e2a\u6570 \uff0c\u5c31\u662f\u666e\u901a\u7684\u904d\u5386\uff0c\u5f53\u904d\u5386\u5230\u6700\u540e\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u4ec5\u80fd\u5f97\u5230\u94fe\u8868\u7684\u8282\u70b9\u6570\u76ee\uff0c\u8fd8\u80fd\u5f97\u5230\u65e7\u94fe\u8868\u7684\u8868\u5c3e\u8282\u70b9\u3002 \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u4ee3\u7801\u7684\u5199\u6cd5(\u5b98\u65b9\u5199\u7684)\uff1a\u5c31\u662f\u5728\u627e\u5230\u8868\u5c3e\u7ed3\u70b9\u4e4b\u540e\uff0c\u5c06\u8868\u5c3e\u8282\u70b9\u6307\u5411\u8868\u5934\u8282\u70b9\uff0c\u5f62\u6210\u4e00\u4e2a\u95ed\u73af\uff1b\u7136\u540e\u4ece\u5934\u5f00\u59cb\u904d\u5386\u5bfb\u627e\u65b0\u7684\u8868\u5c3e\u8282\u70b9\uff0c\u518d\u5f97\u5230\u65b0\u7684\u8868\u5934\u8282\u70b9\uff0c\u7136\u540e\u5c06\u8868\u5934\u548c\u8868\u5c3e\u65ad\u5f00\u5373\u53ef \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u4ee3\u7801\u7684\u5199\u6cd5\uff1a\u4e0d\u4f7f\u7528\u6240\u8c13\u7684\u94fe\u8868\u95ed\u73af\uff0c\u53ea\u662f\u8bb0\u5f55\u65e7\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u5f53\u6700\u540e\u627e\u5230\u65b0\u7684\u94fe\u8868\u5934\u548c\u5c3e\u7684\u65f6\u5019\uff0c\u5c06\u5176\u63a5\u5230\u65e7\u94fe\u8868\u7684\u8868\u5934 \u6ce8\u610f\u4e00\u4e2a\u5224\u65ad\u6761\u4ef6\uff1a k % n \u662f\u5426\u4e3a 0 \uff0c\u5982\u679c\u4e3a0\u90a3\u4e48\u4e0d\u9700\u8981\u8fdb\u884c\u79fb\u52a8\uff0c\u56e0\u4e3a\u8fd8\u662f\u79fb\u52a8\u7684\u7ed3\u679c\u8fd8\u662f\u672c\u8eab\uff0c\u76f4\u63a5\u53d1\u8fd4\u56de\u5373\u53ef\u3002 \u6240\u4ee5\u7efc\u5408\u6765\u770b\uff0c\u5e76\u4e0d\u9700\u8981\u4ec0\u4e48\u6240\u8c13\u7684\u94fe\u8868\u7684\u73af\uff0c\u6240\u8981\u5f97\u5230\u7684\u672c\u8d28\u5c31\u662f\u4e24\u4e2a\uff1a\u786e\u5b9a**\u65b0\u7684\u8868\u5934\u548c\u65b0\u7684\u8868\u5c3e**(\u5148\u5f97\u5230\u65b0\u8868\u5c3e\uff0c\u518d\u5f97\u5230\u65b0\u7684\u8868\u5934) \u4ee3\u7801 \u00b6 class Solution { public : ListNode * rotateRight ( ListNode * head , int k ) { if ( head == nullptr || head -> next == nullptr ) return head ; ListNode * oldNode = head ; int n ; //\u7528\u6765\u8bb0\u5f55\u94fe\u8868\u957f\u5ea6 for ( n = 1 ; oldNode -> next != nullptr ; n ++ ){ //\u4e00\u5f00\u59cb\u5c31\u662f\u4ece\u7b2c\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\u8ba1\u6570 oldNode = oldNode -> next ; } //\u5982\u679ck % n \u4e3a0\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u8fdb\u884c\u79fb\u52a8 if ( k % n == 0 ) return head ; //\u540c\u65f6\u83b7\u53d6\u5230\u65e7\u94fe\u8868\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9 oldNode -> next = head ; //\u6b64\u65f6\u5df2\u7ecf\u5f62\u6210\u4e86\u95ed\u73af //\u63a5\u4e0b\u6765\u5c31\u627e\u65b0\u7684\u8868\u5c3e ListNode * newNode = head ; for ( int i = 0 ; i < n - k % n - 1 ; i ++ ){ //\u627e\u5230\u7b2cn-k%n-1\u7684\u4f4d\u7f6e\u7684\u5143\u7d20\uff0c\u5373\u4e3a\u94fe\u8868\u5c3e newNode = newNode -> next ; } //\u65b0\u7684\u8868\u5934 ListNode * newHead = newNode -> next ; //\u65ad\u5f00\u73af(\u8868\u5c3e\u7f6e\u7a7a) newNode -> next = nullptr ; return newHead ; // \u5982\u679ck\u4e3a2\uff0c\u4e5f\u5c31\u662f\u8bf4\u4ece\u961f\u5c3e\u5f00\u59cb\u627e\u5230\u7b2c2\u4e2a\u8282\u70b9\uff0c\u9898\u76ee\u4e2d\u6d4b\u8bd5\u7528\u4f8b\u53734\u5c31\u4f1a\u79f0\u4e3a\u65b0\u7684list\u7684head } }; \u53e6\u4e00\u79cd\u4ee3\u7801\u7c7b\u4f3c\u5199\u6cd5 class Solution { public : ListNode * rotateRight ( ListNode * head , int k ) { if ( head == nullptr || head -> next == nullptr ) return head ; ListNode * oldNode = head ; int n ; for ( n = 1 ; oldNode -> next != nullptr ; n ++ ) oldNode = oldNode -> next ; //\u540c\u65f6\u8fd9\u91cc\u7684oldNode\u4e3a\u65e7\u94fe\u8868\u7684\u5c3e\u8282\u70b9 if ( k % n == 0 ) return head ; //\u5bfb\u627e\u65b0\u7684\u5c3e\u8282\u70b9 ListNode * newTail = head ; for ( int i = 0 ; i < n - k % n -1 ; i ++ ) newTail = newTail -> next ; //\u627e\u5230\u65b0\u7684\u5934\u8282\u70b9 ListNode * newHead = newTail -> next ; //\u65b0\u7684\u5c3e\u8282\u70b9\u7684next\u7f6e\u7a7a newTail -> next = nullptr ; //\u5c06\u8001\u7684\u5c3e\u8282\u70b9\u63a5\u5230\u8001\u7684\u5934\u8282\u70b9\uff0c\u5f62\u6210\u4e00\u4e2a\u94fe\u8868 oldNode -> next = head ; return newHead ; } }; \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"leetcode61-\u65cb\u8f6c\u94fe\u8868"},{"location":"%E9%93%BE%E8%A1%A8/leetcode61-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u65cb\u8f6c\u94fe\u8868\uff0c\u5c06\u94fe\u8868\u6bcf\u4e2a\u8282\u70b9\u5411\u53f3\u79fb\u52a8 k \u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2d k \u662f\u975e\u8d1f\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->4->5->NULL, k = 2 \u8f93\u51fa: 4->5->1->2->3->NULL \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: 5->1->2->3->4->NULL \u5411\u53f3\u65cb\u8f6c 2 \u6b65: 4->5->1->2->3->NULL \u793a\u4f8b 2: \u8f93\u5165: 0->1->2->NULL, k = 4 \u8f93\u51fa: 2->0->1->NULL \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: 2->0->1->NULL \u5411\u53f3\u65cb\u8f6c 2 \u6b65: 1->2->0->NULL \u5411\u53f3\u65cb\u8f6c 3 \u6b65: 0->1->2->NULL \u5411\u53f3\u65cb\u8f6c 4 \u6b65: 2->0->1->NULL","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E9%93%BE%E8%A1%A8/leetcode61-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/#_2","text":"https://leetcode-cn.com/problems/rotate-list/","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E9%93%BE%E8%A1%A8/leetcode61-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/#_3","text":"\u65cb\u8f6c\u5b9e\u9645\u4e0a\u5c31\u662f\u786e\u5b9a\u65b0\u7684\u94fe\u8868\u5934\u548c\u94fe\u8868\u5c3e \uff1b\u5982\u679c\u8bf4\u5c06\u4e00\u4e2a\u94fe\u8868\u6bcf\u4e2a\u8282\u70b9\u5411\u53f3\u79fb\u52a8k\uff0c\u90a3\u4e48\u65b0\u7684\u94fe\u8868\u7684\u8868\u5934\u8282\u70b9\u5c31\u662f\u4ece\u540e\u5f80\u524d\u6570\u7b2ck\u4e2a\u8282\u70b9(\u5982\u679c\u662fk>n\u7684\u8bdd\u5c31\u662fk%n)\u3002\u5728\u5355\u94fe\u8868\u4e2d\uff0c\u53ea\u6709next\u6307\u9488\uff0c\u6240\u4ee5\uff0c\u5982\u679c\u8981\u627e\u5230\u65b0\u94fe\u8868\u7684\u8868\u5934\u8282\u70b9\uff0c\u6211\u4eec\u5c31\u9700\u8981\u627e\u5230\u5b83\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff08\u5373\u65b0\u94fe\u8868\u7684\u8868\u5c3e\u8282\u70b9\uff09\uff0c\u65b0\u94fe\u8868\u7684\u8868\u5c3e\u8282\u70b9\u4ece\u5de6\u5f80\u53f3\u6570\u7b2c n-k \u4e2a(\u5982\u679ck>n\uff0c\u90a3\u4e48\u5c31\u662f n - k%n)\uff1b\u4f46\u662f\u4ece\u5934\u5f00\u59cb\u627e\u7684\u8bdd\u53ea\u9700\u8981\u79fb\u52a8 n - k % n -1 `\u6b21\u5c31\u80fd\u627e\u5230\u65b0\u7684\u8868\u5c3e\u8282\u70b9\u3002 \u5176\u4e2d\u8fd8\u6d89\u53ca\u5230\u4e00\u4e2a\u5c31\u662f \u8ba1\u7b97\u94fe\u8868\u8282\u70b9\u4e2a\u6570 \uff0c\u5c31\u662f\u666e\u901a\u7684\u904d\u5386\uff0c\u5f53\u904d\u5386\u5230\u6700\u540e\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u4ec5\u80fd\u5f97\u5230\u94fe\u8868\u7684\u8282\u70b9\u6570\u76ee\uff0c\u8fd8\u80fd\u5f97\u5230\u65e7\u94fe\u8868\u7684\u8868\u5c3e\u8282\u70b9\u3002 \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u4ee3\u7801\u7684\u5199\u6cd5(\u5b98\u65b9\u5199\u7684)\uff1a\u5c31\u662f\u5728\u627e\u5230\u8868\u5c3e\u7ed3\u70b9\u4e4b\u540e\uff0c\u5c06\u8868\u5c3e\u8282\u70b9\u6307\u5411\u8868\u5934\u8282\u70b9\uff0c\u5f62\u6210\u4e00\u4e2a\u95ed\u73af\uff1b\u7136\u540e\u4ece\u5934\u5f00\u59cb\u904d\u5386\u5bfb\u627e\u65b0\u7684\u8868\u5c3e\u8282\u70b9\uff0c\u518d\u5f97\u5230\u65b0\u7684\u8868\u5934\u8282\u70b9\uff0c\u7136\u540e\u5c06\u8868\u5934\u548c\u8868\u5c3e\u65ad\u5f00\u5373\u53ef \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u4ee3\u7801\u7684\u5199\u6cd5\uff1a\u4e0d\u4f7f\u7528\u6240\u8c13\u7684\u94fe\u8868\u95ed\u73af\uff0c\u53ea\u662f\u8bb0\u5f55\u65e7\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u5f53\u6700\u540e\u627e\u5230\u65b0\u7684\u94fe\u8868\u5934\u548c\u5c3e\u7684\u65f6\u5019\uff0c\u5c06\u5176\u63a5\u5230\u65e7\u94fe\u8868\u7684\u8868\u5934 \u6ce8\u610f\u4e00\u4e2a\u5224\u65ad\u6761\u4ef6\uff1a k % n \u662f\u5426\u4e3a 0 \uff0c\u5982\u679c\u4e3a0\u90a3\u4e48\u4e0d\u9700\u8981\u8fdb\u884c\u79fb\u52a8\uff0c\u56e0\u4e3a\u8fd8\u662f\u79fb\u52a8\u7684\u7ed3\u679c\u8fd8\u662f\u672c\u8eab\uff0c\u76f4\u63a5\u53d1\u8fd4\u56de\u5373\u53ef\u3002 \u6240\u4ee5\u7efc\u5408\u6765\u770b\uff0c\u5e76\u4e0d\u9700\u8981\u4ec0\u4e48\u6240\u8c13\u7684\u94fe\u8868\u7684\u73af\uff0c\u6240\u8981\u5f97\u5230\u7684\u672c\u8d28\u5c31\u662f\u4e24\u4e2a\uff1a\u786e\u5b9a**\u65b0\u7684\u8868\u5934\u548c\u65b0\u7684\u8868\u5c3e**(\u5148\u5f97\u5230\u65b0\u8868\u5c3e\uff0c\u518d\u5f97\u5230\u65b0\u7684\u8868\u5934)","title":"\u601d\u8def"},{"location":"%E9%93%BE%E8%A1%A8/leetcode61-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/#_4","text":"class Solution { public : ListNode * rotateRight ( ListNode * head , int k ) { if ( head == nullptr || head -> next == nullptr ) return head ; ListNode * oldNode = head ; int n ; //\u7528\u6765\u8bb0\u5f55\u94fe\u8868\u957f\u5ea6 for ( n = 1 ; oldNode -> next != nullptr ; n ++ ){ //\u4e00\u5f00\u59cb\u5c31\u662f\u4ece\u7b2c\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\u8ba1\u6570 oldNode = oldNode -> next ; } //\u5982\u679ck % n \u4e3a0\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u8fdb\u884c\u79fb\u52a8 if ( k % n == 0 ) return head ; //\u540c\u65f6\u83b7\u53d6\u5230\u65e7\u94fe\u8868\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9 oldNode -> next = head ; //\u6b64\u65f6\u5df2\u7ecf\u5f62\u6210\u4e86\u95ed\u73af //\u63a5\u4e0b\u6765\u5c31\u627e\u65b0\u7684\u8868\u5c3e ListNode * newNode = head ; for ( int i = 0 ; i < n - k % n - 1 ; i ++ ){ //\u627e\u5230\u7b2cn-k%n-1\u7684\u4f4d\u7f6e\u7684\u5143\u7d20\uff0c\u5373\u4e3a\u94fe\u8868\u5c3e newNode = newNode -> next ; } //\u65b0\u7684\u8868\u5934 ListNode * newHead = newNode -> next ; //\u65ad\u5f00\u73af(\u8868\u5c3e\u7f6e\u7a7a) newNode -> next = nullptr ; return newHead ; // \u5982\u679ck\u4e3a2\uff0c\u4e5f\u5c31\u662f\u8bf4\u4ece\u961f\u5c3e\u5f00\u59cb\u627e\u5230\u7b2c2\u4e2a\u8282\u70b9\uff0c\u9898\u76ee\u4e2d\u6d4b\u8bd5\u7528\u4f8b\u53734\u5c31\u4f1a\u79f0\u4e3a\u65b0\u7684list\u7684head } }; \u53e6\u4e00\u79cd\u4ee3\u7801\u7c7b\u4f3c\u5199\u6cd5 class Solution { public : ListNode * rotateRight ( ListNode * head , int k ) { if ( head == nullptr || head -> next == nullptr ) return head ; ListNode * oldNode = head ; int n ; for ( n = 1 ; oldNode -> next != nullptr ; n ++ ) oldNode = oldNode -> next ; //\u540c\u65f6\u8fd9\u91cc\u7684oldNode\u4e3a\u65e7\u94fe\u8868\u7684\u5c3e\u8282\u70b9 if ( k % n == 0 ) return head ; //\u5bfb\u627e\u65b0\u7684\u5c3e\u8282\u70b9 ListNode * newTail = head ; for ( int i = 0 ; i < n - k % n -1 ; i ++ ) newTail = newTail -> next ; //\u627e\u5230\u65b0\u7684\u5934\u8282\u70b9 ListNode * newHead = newTail -> next ; //\u65b0\u7684\u5c3e\u8282\u70b9\u7684next\u7f6e\u7a7a newTail -> next = nullptr ; //\u5c06\u8001\u7684\u5c3e\u8282\u70b9\u63a5\u5230\u8001\u7684\u5934\u8282\u70b9\uff0c\u5f62\u6210\u4e00\u4e2a\u94fe\u8868 oldNode -> next = head ; return newHead ; } };","title":"\u4ee3\u7801"},{"location":"%E9%93%BE%E8%A1%A8/leetcode61-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E9%93%BE%E8%A1%A8/leetcode92-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8II/","text":"\u9898\u76ee\u63cf\u8ff0 \u00b6 \u53cd\u8f6c\u4ece\u4f4d\u7f6e m \u5230 n \u7684\u94fe\u8868\u3002\u8bf7\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b8c\u6210\u53cd\u8f6c\u3002 \u8bf4\u660e: 1 \u2264 m \u2264 n \u2264 \u94fe\u8868\u957f\u5ea6\u3002 \u793a\u4f8b: \u8f93\u5165: 1->2->3->4->5->NULL, m = 2, n = 4 \u8f93\u51fa: 1->4->3->2->5->NULL \u9898\u76ee\u94fe\u63a5 \u00b6 https://leetcode-cn.com/problems/reverse-linked-list-ii \u601d\u8def \u00b6 \u4e00\u822c\u800c\u8a00\uff0c\u5bf9\u4e8e\u94fe\u8868\u7684\u9898\u76ee\uff0c\u90fd\u9700\u8981\u521b\u5efa\u4e00\u4e2a dummpy \u8282\u70b9\uff0c\u7528\u6765\u6307\u5411\u9996\u8282\u70b9\uff0c\u4ece\u800c\u65b9\u9762\u5bf9\u94fe\u8868\u9996\u8282\u70b9\u7684\u64cd\u4f5c\uff1b \u672c\u9898\u548c \u53cd\u8f6c\u94fe\u8868 \u8fd8\u4e0d\u4e00\u6837\uff0c\u8981\u6c42\u66f4\u591a\u4e00\u70b9\uff0c\u5373\u53cd\u8f6c\u94fe\u8868\u4e2d\u7684\u4e00\u90e8\u5206\uff1b\u9996\u5148\u77e5\u9053\uff0c\u8981\u64cd\u4f5c\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u5fc5\u987b\u8981\u77e5\u9053\u8fd9\u4e2a\u8282\u70b9\u7684\u4e0a\u4e00\u4e2a\u8282\u70b9\u624d\u884c\uff0c\u6240\u4ee5\u5982\u679c\u662f\u5bf9\u4e8e\u53cd\u8f6c \u7b2cm\u5230\u7b2cn\u4e2a\u8282\u70b9 \uff0c\u90a3\u4e48\u5fc5\u987b\u8981\u77e5\u9053 \u7b2cm-1\u4e2a\u8282\u70b9 \u624d\u884c\uff0c\u6240\u4ee5: \u7b2c\u4e00\u6b65\u5c31\u662f\u5bfb\u627e\u7b2cm-1\u4e2a\u8282\u70b9\uff0c\u8bbe\u7f6e\u4e00\u4e2a pre \u6307\u9488\u6307\u5411 dummpy \u8282\u70b9\uff0c\u8981\u627e\u5230\u7b2c m - 1\u4e2a\u8282\u70b9\uff0cpre\u9700\u8981\u79fb\u52a8 m-1 \u6b65\uff08\u8fd9\u4e2a\u53ef\u4ee5\u5728\u8111\u5b50\u91cc\u6f14\u793a\u4e00\u4e0b\uff1a\u6bd4\u5982 m = 1\uff0c\u5373\u4ece\u7b2c\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\u53cd\u8f6c\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u627e\u5230\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u73b0\u5728pre \u6307\u5411dummpy\uff0c\u90a3\u4e48pre\u9700\u8981\u79fb\u52a8 1 - 1 = 0 \u6b65\uff0c\u5373\u4e0d\u9700\u8981\u79fb\u52a8\uff0c \u56e0\u4e3adummpy\u672c\u6765\u5c31\u5728\u7b2c1\u4e2a\u8282\u70b9\u524d\u9762\uff1b\u53c8\u6bd4\u5982 m = 3\uff0c\u5373\u4ece\u7b2c3\u4e2a\u8282\u70b9\u5f00\u59cb\u53cd\u8f6c\uff0c\u90a3\u4e48\u9700\u8981\u627e\u5230\u7b2c2\u4e2a\u8282\u70b9\u8bdd\uff0cpre\u9700\u8981\u79fb\u52a8 3 - 1 = 2 \u6b65\uff0c\u5373\u4ece\u6307\u5411 dummpy \u8f6c\u800c\u6307\u5411\u7b2c1\u4e2a\uff0c\u518d\u4ece\u7b2c1\u4e2a\u6307\u5411\u7b2c2\u4e2a\uff0c\u6240\u4ee5\u5c31\u4e24\u6b65\uff1b\u8fd9\u91cc\u5c31\u53ef\u4ee5\u770b\u51fadummpy\u8282\u70b9\u7684\u597d\u5904\u4e86\u5c31\u662f\u5c06\u5bf9\u9996\u8282\u70b9\u7684\u64cd\u4f5c\u4e0e\u540e\u9762\u7684\u64cd\u4f5c\u4e00\u81f4\uff09 \u518d\u770b\u6211\u4eec\u53cd\u8f6c\u7684\u8fc7\u7a0b\uff0c\u5c06 1->2->3->4->5->NULL \u53d8\u6210 1->3->2->4->5->NULL \uff0c\u7136\u540e\u518d\u53d8\u6210 1->4->3->2->5->NULL \uff0c\u9996\u5148\u770b 2 -> 3 \u8f6c\u53d8\u4e3a 3->2 \u7684\u8fc7\u7a0b\uff0c\u6b64\u65f6 pre \u662f\u6307\u5411\u8282\u70b91\u7684\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e00\u4e2a cur \u6307\u9488\u6307\u5411 2 \uff0c\u7136\u540e\u518d\u8bbe\u7f6e\u4e00\u4e2a\u6307\u9488 temp \u6307\u5411 3 \uff0c\u56e0\u4e3a\u5f85\u4f1a\u8981\u5c062\u548c3\u8fdb\u884c\u65ad\u5f00\uff0c\u4e3a\u4e86 \u9632\u6b62\u65ad\u94fe \uff0c\u6240\u4ee5\u7528temp\u8bb0\u4f4f\u8282\u70b93\uff0c\u7136\u540e\u64cd\u4f5c\u5c31\u662f\u5c06 2->4 \uff0c\u5373 cur -> next = temp -> next \uff0c\u7136\u540e\u5c31\u662f\u5c06 3->2 \uff0c\u5373 temp -. next = pre -> next \uff0c\u7136\u540e\u5c06 1->3 \uff0c\u5373 pre -> next = temp \uff1b\u540e\u9762\u7684\u53d8\u6362\u540c\u6837\u7684\u64cd\u4f5c \u8fd9\u4e2a\u4ea4\u6362\u9700\u8981\u591a\u5c11\u6b21\u5462\uff1f\u53ef\u4ee5\u770b\u5230 m = 2\uff0cn = 4 \uff0c\u5b9e\u9645\u53ea\u9700\u89812\u6b21\uff0c\u5373 n - m\u6b21\u5373\u53ef \u4ee3\u7801 \u00b6 class Solution { public : ListNode * reverseBetween ( ListNode * head , int m , int n ) { ListNode * dummpy = new ListNode ( 0 ); dummpy -> next = head ; ListNode * pre = dummpy ; //pre\u6307\u5411\u7b2cm\u4e2a\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9 for ( int i = 0 ; i < m - 1 ; i ++ ){ pre = pre -> next ; } ListNode * cur = pre -> next ; for ( int i = m ; i < n ; i ++ ){ ListNode * temp = cur -> next ; cur -> next = temp -> next ; temp -> next = pre -> next ; //\u8fd9\u91cc\u4e0d\u80fd\u5199\u6210cur pre -> next = temp ; } return dummpy -> next ; } }; \u6ce8\u610f\uff1a\u4e0a\u9762\u8282\u70b9\u8fdb\u884c\u4ea4\u6362\u7684\u65f6\u5019 temp -> next = pre -> next \u4e0d\u80fd\u5199\u6210 temp -> next = cur \uff0c\u8fd9\u662f\u4e00\u4e2a\u9519\u8bef\uff0c\u53ef\u4ee5\u753b\u56fe\u770b\u51fa\u6765 \u53ef\u4ee5\u770b\u5230\uff0c\u5728\u6574\u4e2a\u8282\u70b9\u7684\u4ea4\u6362\u4e2d\uff0c pre\u662f\u59cb\u7ec8\u6307\u5411\u7b2cn\u4e2a\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b91\u7684\uff0c\u53ea\u6709cur\u5728\u4e0d\u65ad\u5411\u540e\u53d8\u52a8\uff0ctemp\u4e0d\u65ad\u66f4\u65b0\u4e3acur\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"leetcode92-\u53cd\u8f6c\u94fe\u8868II"},{"location":"%E9%93%BE%E8%A1%A8/leetcode92-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8II/#_1","text":"\u53cd\u8f6c\u4ece\u4f4d\u7f6e m \u5230 n \u7684\u94fe\u8868\u3002\u8bf7\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b8c\u6210\u53cd\u8f6c\u3002 \u8bf4\u660e: 1 \u2264 m \u2264 n \u2264 \u94fe\u8868\u957f\u5ea6\u3002 \u793a\u4f8b: \u8f93\u5165: 1->2->3->4->5->NULL, m = 2, n = 4 \u8f93\u51fa: 1->4->3->2->5->NULL","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E9%93%BE%E8%A1%A8/leetcode92-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8II/#_2","text":"https://leetcode-cn.com/problems/reverse-linked-list-ii","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"%E9%93%BE%E8%A1%A8/leetcode92-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8II/#_3","text":"\u4e00\u822c\u800c\u8a00\uff0c\u5bf9\u4e8e\u94fe\u8868\u7684\u9898\u76ee\uff0c\u90fd\u9700\u8981\u521b\u5efa\u4e00\u4e2a dummpy \u8282\u70b9\uff0c\u7528\u6765\u6307\u5411\u9996\u8282\u70b9\uff0c\u4ece\u800c\u65b9\u9762\u5bf9\u94fe\u8868\u9996\u8282\u70b9\u7684\u64cd\u4f5c\uff1b \u672c\u9898\u548c \u53cd\u8f6c\u94fe\u8868 \u8fd8\u4e0d\u4e00\u6837\uff0c\u8981\u6c42\u66f4\u591a\u4e00\u70b9\uff0c\u5373\u53cd\u8f6c\u94fe\u8868\u4e2d\u7684\u4e00\u90e8\u5206\uff1b\u9996\u5148\u77e5\u9053\uff0c\u8981\u64cd\u4f5c\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u5fc5\u987b\u8981\u77e5\u9053\u8fd9\u4e2a\u8282\u70b9\u7684\u4e0a\u4e00\u4e2a\u8282\u70b9\u624d\u884c\uff0c\u6240\u4ee5\u5982\u679c\u662f\u5bf9\u4e8e\u53cd\u8f6c \u7b2cm\u5230\u7b2cn\u4e2a\u8282\u70b9 \uff0c\u90a3\u4e48\u5fc5\u987b\u8981\u77e5\u9053 \u7b2cm-1\u4e2a\u8282\u70b9 \u624d\u884c\uff0c\u6240\u4ee5: \u7b2c\u4e00\u6b65\u5c31\u662f\u5bfb\u627e\u7b2cm-1\u4e2a\u8282\u70b9\uff0c\u8bbe\u7f6e\u4e00\u4e2a pre \u6307\u9488\u6307\u5411 dummpy \u8282\u70b9\uff0c\u8981\u627e\u5230\u7b2c m - 1\u4e2a\u8282\u70b9\uff0cpre\u9700\u8981\u79fb\u52a8 m-1 \u6b65\uff08\u8fd9\u4e2a\u53ef\u4ee5\u5728\u8111\u5b50\u91cc\u6f14\u793a\u4e00\u4e0b\uff1a\u6bd4\u5982 m = 1\uff0c\u5373\u4ece\u7b2c\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\u53cd\u8f6c\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u627e\u5230\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u73b0\u5728pre \u6307\u5411dummpy\uff0c\u90a3\u4e48pre\u9700\u8981\u79fb\u52a8 1 - 1 = 0 \u6b65\uff0c\u5373\u4e0d\u9700\u8981\u79fb\u52a8\uff0c \u56e0\u4e3adummpy\u672c\u6765\u5c31\u5728\u7b2c1\u4e2a\u8282\u70b9\u524d\u9762\uff1b\u53c8\u6bd4\u5982 m = 3\uff0c\u5373\u4ece\u7b2c3\u4e2a\u8282\u70b9\u5f00\u59cb\u53cd\u8f6c\uff0c\u90a3\u4e48\u9700\u8981\u627e\u5230\u7b2c2\u4e2a\u8282\u70b9\u8bdd\uff0cpre\u9700\u8981\u79fb\u52a8 3 - 1 = 2 \u6b65\uff0c\u5373\u4ece\u6307\u5411 dummpy \u8f6c\u800c\u6307\u5411\u7b2c1\u4e2a\uff0c\u518d\u4ece\u7b2c1\u4e2a\u6307\u5411\u7b2c2\u4e2a\uff0c\u6240\u4ee5\u5c31\u4e24\u6b65\uff1b\u8fd9\u91cc\u5c31\u53ef\u4ee5\u770b\u51fadummpy\u8282\u70b9\u7684\u597d\u5904\u4e86\u5c31\u662f\u5c06\u5bf9\u9996\u8282\u70b9\u7684\u64cd\u4f5c\u4e0e\u540e\u9762\u7684\u64cd\u4f5c\u4e00\u81f4\uff09 \u518d\u770b\u6211\u4eec\u53cd\u8f6c\u7684\u8fc7\u7a0b\uff0c\u5c06 1->2->3->4->5->NULL \u53d8\u6210 1->3->2->4->5->NULL \uff0c\u7136\u540e\u518d\u53d8\u6210 1->4->3->2->5->NULL \uff0c\u9996\u5148\u770b 2 -> 3 \u8f6c\u53d8\u4e3a 3->2 \u7684\u8fc7\u7a0b\uff0c\u6b64\u65f6 pre \u662f\u6307\u5411\u8282\u70b91\u7684\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e00\u4e2a cur \u6307\u9488\u6307\u5411 2 \uff0c\u7136\u540e\u518d\u8bbe\u7f6e\u4e00\u4e2a\u6307\u9488 temp \u6307\u5411 3 \uff0c\u56e0\u4e3a\u5f85\u4f1a\u8981\u5c062\u548c3\u8fdb\u884c\u65ad\u5f00\uff0c\u4e3a\u4e86 \u9632\u6b62\u65ad\u94fe \uff0c\u6240\u4ee5\u7528temp\u8bb0\u4f4f\u8282\u70b93\uff0c\u7136\u540e\u64cd\u4f5c\u5c31\u662f\u5c06 2->4 \uff0c\u5373 cur -> next = temp -> next \uff0c\u7136\u540e\u5c31\u662f\u5c06 3->2 \uff0c\u5373 temp -. next = pre -> next \uff0c\u7136\u540e\u5c06 1->3 \uff0c\u5373 pre -> next = temp \uff1b\u540e\u9762\u7684\u53d8\u6362\u540c\u6837\u7684\u64cd\u4f5c \u8fd9\u4e2a\u4ea4\u6362\u9700\u8981\u591a\u5c11\u6b21\u5462\uff1f\u53ef\u4ee5\u770b\u5230 m = 2\uff0cn = 4 \uff0c\u5b9e\u9645\u53ea\u9700\u89812\u6b21\uff0c\u5373 n - m\u6b21\u5373\u53ef","title":"\u601d\u8def"},{"location":"%E9%93%BE%E8%A1%A8/leetcode92-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8II/#_4","text":"class Solution { public : ListNode * reverseBetween ( ListNode * head , int m , int n ) { ListNode * dummpy = new ListNode ( 0 ); dummpy -> next = head ; ListNode * pre = dummpy ; //pre\u6307\u5411\u7b2cm\u4e2a\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9 for ( int i = 0 ; i < m - 1 ; i ++ ){ pre = pre -> next ; } ListNode * cur = pre -> next ; for ( int i = m ; i < n ; i ++ ){ ListNode * temp = cur -> next ; cur -> next = temp -> next ; temp -> next = pre -> next ; //\u8fd9\u91cc\u4e0d\u80fd\u5199\u6210cur pre -> next = temp ; } return dummpy -> next ; } }; \u6ce8\u610f\uff1a\u4e0a\u9762\u8282\u70b9\u8fdb\u884c\u4ea4\u6362\u7684\u65f6\u5019 temp -> next = pre -> next \u4e0d\u80fd\u5199\u6210 temp -> next = cur \uff0c\u8fd9\u662f\u4e00\u4e2a\u9519\u8bef\uff0c\u53ef\u4ee5\u753b\u56fe\u770b\u51fa\u6765 \u53ef\u4ee5\u770b\u5230\uff0c\u5728\u6574\u4e2a\u8282\u70b9\u7684\u4ea4\u6362\u4e2d\uff0c pre\u662f\u59cb\u7ec8\u6307\u5411\u7b2cn\u4e2a\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b91\u7684\uff0c\u53ea\u6709cur\u5728\u4e0d\u65ad\u5411\u540e\u53d8\u52a8\uff0ctemp\u4e0d\u65ad\u66f4\u65b0\u4e3acur\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9","title":"\u4ee3\u7801"},{"location":"%E9%93%BE%E8%A1%A8/leetcode92-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8II/#_5","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)","title":"\u590d\u6742\u5ea6\u5206\u6790"}]}